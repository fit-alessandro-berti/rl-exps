import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
ClientConsult = Transition(label='Client Consult')
SpecGathering = Transition(label='Spec Gathering')
SupplierSourcing = Transition(label='Supplier Sourcing')
DesignReview = Transition(label='Design Review')
SimulationTest = Transition(label='Simulation Test')
ProtoAssembly = Transition(label='Proto Assembly')
QualityCheck = Transition(label='Quality Check')
FirmwareFlash = Transition(label='Firmware Flash')
SensorInstall = Transition(label='Sensor Install')
FinalTesting = Transition(label='Final Testing')
BrandPackaging = Transition(label='Brand Packaging')
ShippingPrep = Transition(label='Shipping Prep')
DeliverySchedule = Transition(label='Delivery Schedule')
ClientTraining = Transition(label='Client Training')
DiagnosticsSetup = Transition(label='Diagnostics Setup')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[ClientConsult, SpecGathering, SupplierSourcing])
xor = OperatorPOWL(operator=Operator.XOR, children=[DesignReview, skip])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[SimulationTest, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[ProtoAssembly, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[QualityCheck, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[FirmwareFlash, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[SensorInstall, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[FinalTesting, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[BrandPackaging, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[ShippingPrep, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[DeliverySchedule, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[ClientTraining, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[DiagnosticsSetup, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)