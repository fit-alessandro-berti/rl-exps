import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_intake = Transition(label='Artifact Intake')
condition_check = Transition(label='Condition Check')
material_test = Transition(label='Material Test')
style_compare = Transition(label='Style Compare')
carbon_dating = Transition(label='Carbon Dating')
document_review = Transition(label='Document Review')
provenance_check = Transition(label='Provenance Check')
digital_imaging = Transition(label='Digital Imaging')
forgeriescan = Transition(label='Forgery Scan')
expert_consult = Transition(label='Expert Consult')
historical_research = Transition(label='Historical Research')
panel_review = Transition(label='Panel Review')
report_draft = Transition(label='Report Draft')
final_approval = Transition(label='Final Approval')
catalog_entry = Transition(label='Catalog Entry')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[artifact_intake, condition_check, material_test, style_compare, carbon_dating])
xor = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[digital_imaging, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[forgeriescan, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[expert_consult, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[historical_research, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[panel_review, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[report_draft, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[final_approval, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[catalog_entry, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor)