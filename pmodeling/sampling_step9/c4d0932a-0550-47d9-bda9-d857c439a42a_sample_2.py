import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model for the process
milk_sourcing = Transition(label='Milk Sourcing')
quality_testing = Transition(label='Quality Testing')
starter_culture = Transition(label='Starter Culture')
coagulation = Transition(label='Coagulation')
curd_cutting = Transition(label='Curd Cutting')
whey_draining = Transition(label='Whey Draining')
molding_cheese = Transition(label='Molding Cheese')
pressing_block = Transition(label='Pressing Block')
brining_bath = Transition(label='Brining Bath')
aging_control = Transition(label='Aging Control')
flavor_profiling = Transition(label='Flavor Profiling')
packaging_design = Transition(label='Packaging Design')
demand_forecast = Transition(label='Demand Forecast')
retail_outreach = Transition(label='Retail Outreach')
customer_feedback = Transition(label='Customer Feedback')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[milk_sourcing, quality_testing])
xor = OperatorPOWL(operator=Operator.XOR, children=[starter_culture, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[coagulation, xor])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[curd_cutting, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[whey_draining, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[molding_cheese, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[pressing_block, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[brining_bath, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[aging_control, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[flavor_profiling, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[packaging_design, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[retail_outreach, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, xor12])
root = StrictPartialOrder(nodes=[loop, xor13])
root.order.add_edge(loop, xor13)

print(root)