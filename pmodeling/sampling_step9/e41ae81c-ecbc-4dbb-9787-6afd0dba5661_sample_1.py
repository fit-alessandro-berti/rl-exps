import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
structure_reinforce = Transition(label='Structure Reinforce')
hydroponic_setup = Transition(label='Hydroponic Setup')
climate_install = Transition(label='Climate Install')
ai_integration = Transition(label='AI Integration')
seed_sourcing = Transition(label='Seed Sourcing')
nutrient_prep = Transition(label='Nutrient Prep')
system_testing = Transition(label='System Testing')
staff_training = Transition(label='Staff Training')
crop_planting = Transition(label='Crop Planting')
growth_monitor = Transition(label='Growth Monitor')
pest_control = Transition(label='Pest Control')
harvest_schedule = Transition(label='Harvest Schedule')
quality_check = Transition(label='Quality Check')
market_dispatch = Transition(label='Market Dispatch')
waste_recycle = Transition(label='Waste Recycle')
data_analysis = Transition(label='Data Analysis')

skip = SilentTransition()

site_survey_loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey])
structure_reinforce_loop = OperatorPOWL(operator=Operator.LOOP, children=[structure_reinforce])
hydroponic_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[hydroponic_setup])
climate_install_loop = OperatorPOWL(operator=Operator.LOOP, children=[climate_install])
ai_integration_loop = OperatorPOWL(operator=Operator.LOOP, children=[ai_integration])
seed_sourcing_loop = OperatorPOWL(operator=Operator.LOOP, children=[seed_sourcing])
nutrient_prep_loop = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_prep])
system_testing_loop = OperatorPOWL(operator=Operator.LOOP, children=[system_testing])
staff_training_loop = OperatorPOWL(operator=Operator.LOOP, children=[staff_training])
crop_planting_loop = OperatorPOWL(operator=Operator.LOOP, children=[crop_planting])
growth_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[growth_monitor])
pest_control_loop = OperatorPOWL(operator=Operator.LOOP, children=[pest_control])
harvest_schedule_loop = OperatorPOWL(operator=Operator.LOOP, children=[harvest_schedule])
quality_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[quality_check])
market_dispatch_loop = OperatorPOWL(operator=Operator.LOOP, children=[market_dispatch])
waste_recycle_loop = OperatorPOWL(operator=Operator.LOOP, children=[waste_recycle])
data_analysis_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_analysis])

xor = OperatorPOWL(operator=Operator.XOR, children=[seed_sourcing_loop, system_testing_loop])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[pest_control_loop, data_analysis_loop])

root = StrictPartialOrder(nodes=[site_survey_loop, structure_reinforce_loop, hydroponic_setup_loop, climate_install_loop, ai_integration_loop, xor, xor2, staff_training_loop, crop_planting_loop, growth_monitor_loop, harvest_schedule_loop, quality_check_loop, market_dispatch_loop, waste_recycle_loop, data_analysis_loop])
root.order.add_edge(site_survey_loop, structure_reinforce_loop)
root.order.add_edge(structure_reinforce_loop, hydroponic_setup_loop)
root.order.add_edge(hydroponic_setup_loop, climate_install_loop)
root.order.add_edge(climate_install_loop, ai_integration_loop)
root.order.add_edge(ai_integration_loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, staff_training_loop)
root.order.add_edge(staff_training_loop, crop_planting_loop)
root.order.add_edge(crop_planting_loop, growth_monitor_loop)
root.order.add_edge(growth_monitor_loop, harvest_schedule_loop)
root.order.add_edge(harvest_schedule_loop, quality_check_loop)
root.order.add_edge(quality_check_loop, market_dispatch_loop)
root.order.add_edge(market_dispatch_loop, waste_recycle_loop)
root.order.add_edge(waste_recycle_loop, data_analysis_loop)