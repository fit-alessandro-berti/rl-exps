import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
load_test = Transition(label='Load Test')
permit_review = Transition(label='Permit Review')
design_layout = Transition(label='Design Layout')
material_sourcing = Transition(label='Material Sourcing')
soil_prep = Transition(label='Soil Prep')
hydroponic_setup = Transition(label='Hydroponic Setup')
community_meet = Transition(label='Community Meet')
crop_select = Transition(label='Crop Select')
sensor_install = Transition(label='Sensor Install')
water_testing = Transition(label='Water Testing')
pest_control = Transition(label='Pest Control')
growth_monitor = Transition(label='Growth Monitor')
harvest_plan = Transition(label='Harvest Plan')
market_launch = Transition(label='Market Launch')
feedback_collect = Transition(label='Feedback Collect')
skip = SilentTransition()

site_survey_loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, load_test])
permit_review_loop = OperatorPOWL(operator=Operator.LOOP, children=[permit_review, material_sourcing])
soil_prep_loop = OperatorPOWL(operator=Operator.LOOP, children=[soil_prep, hydroponic_setup])
sensor_install_loop = OperatorPOWL(operator=Operator.LOOP, children=[sensor_install, water_testing])
pest_control_loop = OperatorPOWL(operator=Operator.LOOP, children=[pest_control, growth_monitor])
harvest_plan_loop = OperatorPOWL(operator=Operator.LOOP, children=[harvest_plan, market_launch])

xor_community_meet = OperatorPOWL(operator=Operator.XOR, children=[community_meet, skip])
xor_crop_select = OperatorPOWL(operator=Operator.XOR, children=[crop_select, skip])

xor_sensor_install = OperatorPOWL(operator=Operator.XOR, children=[sensor_install_loop, skip])
xor_water_testing = OperatorPOWL(operator=Operator.XOR, children=[water_testing, skip])
xor_pest_control = OperatorPOWL(operator=Operator.XOR, children=[pest_control_loop, skip])
xor_growth_monitor = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor, skip])
xor_harvest_plan = OperatorPOWL(operator=Operator.XOR, children=[harvest_plan_loop, skip])

xor_market_launch = OperatorPOWL(operator=Operator.XOR, children=[market_launch, skip])
xor_feedback_collect = OperatorPOWL(operator=Operator.XOR, children=[feedback_collect, skip])

root = StrictPartialOrder(nodes=[site_survey_loop, permit_review_loop, soil_prep_loop, sensor_install_loop, pest_control_loop, harvest_plan_loop, xor_community_meet, xor_crop_select, xor_sensor_install, xor_water_testing, xor_pest_control, xor_growth_monitor, xor_harvest_plan, xor_market_launch, xor_feedback_collect])
root.order.add_edge(site_survey_loop, permit_review_loop)
root.order.add_edge(permit_review_loop, soil_prep_loop)
root.order.add_edge(soil_prep_loop, sensor_install_loop)
root.order.add_edge(sensor_install_loop, pest_control_loop)
root.order.add_edge(pest_control_loop, harvest_plan_loop)
root.order.add_edge(harvest_plan_loop, market_launch)
root.order.add_edge(market_launch, feedback_collect)
root.order.add_edge(site_survey_loop, xor_community_meet)
root.order.add_edge(permit_review_loop, xor_crop_select)
root.order.add_edge(soil_prep_loop, xor_sensor_install)
root.order.add_edge(sensor_install_loop, xor_water_testing)
root.order.add_edge(pest_control_loop, xor_pest_control)
root.order.add_edge(harvest_plan_loop, xor_growth_monitor)
root.order.add_edge(market_launch, xor_market_launch)
root.order.add_edge(feedback_collect, xor_feedback_collect)