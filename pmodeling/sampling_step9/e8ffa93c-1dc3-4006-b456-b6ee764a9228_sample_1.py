import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
site_survey = Transition(label='Site Survey')
env_analysis = Transition(label='Env Analysis')
structure_build = Transition(label='Structure Build')
hydroponics_fit = Transition(label='Hydroponics Fit')
nutrient_mix = Transition(label='Nutrient Mix')
climate_setup = Transition(label='Climate Setup')
energy_audit = Transition(label='Energy Audit')
crop_select = Transition(label='Crop Select')
pest_control = Transition(label='Pest Control')
growth_monitor = Transition(label='Growth Monitor')
harvest_plan = Transition(label='Harvest Plan')
waste_recycle = Transition(label='Waste Recycle')
community_meet = Transition(label='Community Meet')
supply_sync = Transition(label='Supply Sync')
data_review = Transition(label='Data Review')
skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, env_analysis])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[structure_build, hydroponics_fit])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_mix, climate_setup])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[energy_audit, crop_select])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[pest_control, growth_monitor])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[harvest_plan, waste_recycle])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[community_meet, supply_sync])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[data_review, skip])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[loop1, loop2])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[loop3, loop4])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[loop5, loop6])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[loop7, loop8])
root = StrictPartialOrder(nodes=[xor1, xor2, xor3, xor4])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor1, xor4)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor3, xor4)