import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Structural_Check = Transition(label='Structural Check')
Permit_Apply = Transition(label='Permit Apply')
Design_Layout = Transition(label='Design Layout')
Soil_Prep = Transition(label='Soil Prep')
Bed_Install = Transition(label='Bed Install')
Irrigation_Setup = Transition(label='Irrigation Setup')
Sensor_Mount = Transition(label='Sensor Mount')
Solar_Connect = Transition(label='Solar Connect')
Seed_Order = Transition(label='Seed Order')
Nutrient_Mix = Transition(label='Nutrient Mix')
Community_Meet = Transition(label='Community Meet')
Staff_Train = Transition(label='Staff Train')
Plant_Crop = Transition(label='Plant Crop')
Maintenance_Plan = Transition(label='Maintenance Plan')
Harvest_Schedule = Transition(label='Harvest Schedule')
Waste_Manage = Transition(label='Waste Manage')
skip = SilentTransition()

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[Structural_Check, Permit_Apply])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[Design_Layout, Soil_Prep])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[Bed_Install, Irrigation_Setup])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[Sensor_Mount, Solar_Connect])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[Seed_Order, Nutrient_Mix])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[Community_Meet, Staff_Train])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[Plant_Crop, Maintenance_Plan])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[Harvest_Schedule, Waste_Manage])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[loop1, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[loop2, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[loop3, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[loop4, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[loop5, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[loop6, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[loop7, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[loop8, skip])

root = StrictPartialOrder(nodes=[xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)