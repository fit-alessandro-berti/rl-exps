import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
Site_Review = Transition(label='Site Review')
Impact_Study = Transition(label='Impact Study')
Design_Plan = Transition(label='Design Plan')
Structure_Mod = Transition(label='Structure Mod')
Hydroponics_Setup = Transition(label='Hydroponics Setup')
Crop_Select = Transition(label='Crop Select')
Nutrient_Mix = Transition(label='Nutrient Mix')
Pest_Control = Transition(label='Pest Control')
Sensor_Install = Transition(label='Sensor Install')
Staff_Train = Transition(label='Staff Train')
Compliance_Audit = Transition(label='Compliance Audit')
Packaging_Dev = Transition(label='Packaging Dev')
Logistics_Plan = Transition(label='Logistics Plan')
Community_Engage = Transition(label='Community Engage')
Sustainability_Check = Transition(label='Sustainability Check')

# Define silent transitions
skip = SilentTransition()

# Define the POWL model
loop_Site_Review = OperatorPOWL(operator=Operator.LOOP, children=[Site_Review, skip])
loop_Impact_Study = OperatorPOWL(operator=Operator.LOOP, children=[Impact_Study, skip])
loop_Structure_Mod = OperatorPOWL(operator=Operator.LOOP, children=[Structure_Mod, skip])
loop_Hydroponics_Setup = OperatorPOWL(operator=Operator.LOOP, children=[Hydroponics_Setup, skip])
loop_Crop_Select = OperatorPOWL(operator=Operator.LOOP, children=[Crop_Select, skip])
loop_Nutrient_Mix = OperatorPOWL(operator=Operator.LOOP, children=[Nutrient_Mix, skip])
loop_Pest_Control = OperatorPOWL(operator=Operator.LOOP, children=[Pest_Control, skip])
loop_Sensor_Install = OperatorPOWL(operator=Operator.LOOP, children=[Sensor_Install, skip])
loop_Staff_Train = OperatorPOWL(operator=Operator.LOOP, children=[Staff_Train, skip])
loop_Compliance_Audit = OperatorPOWL(operator=Operator.LOOP, children=[Compliance_Audit, skip])
loop_Packaging_Dev = OperatorPOWL(operator=Operator.LOOP, children=[Packaging_Dev, skip])
loop_Logistics_Plan = OperatorPOWL(operator=Operator.LOOP, children=[Logistics_Plan, skip])
loop_Community_Engage = OperatorPOWL(operator=Operator.LOOP, children=[Community_Engage, skip])
loop_Sustainability_Check = OperatorPOWL(operator=Operator.LOOP, children=[Sustainability_Check, skip])

xor_Site_Review = OperatorPOWL(operator=Operator.XOR, children=[Design_Plan, skip])
xor_Impact_Study = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Structure_Mod = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Hydroponics_Setup = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Crop_Select = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Nutrient_Mix = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Pest_Control = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Sensor_Install = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Staff_Train = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Compliance_Audit = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Packaging_Dev = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Logistics_Plan = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Community_Engage = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])
xor_Sustainability_Check = OperatorPOWL(operator=Operator.XOR, children=[skip, skip])

root = StrictPartialOrder(nodes=[loop_Site_Review, loop_Impact_Study, loop_Structure_Mod, loop_Hydroponics_Setup, loop_Crop_Select, loop_Nutrient_Mix, loop_Pest_Control, loop_Sensor_Install, loop_Staff_Train, loop_Compliance_Audit, loop_Packaging_Dev, loop_Logistics_Plan, loop_Community_Engage, loop_Sustainability_Check, xor_Site_Review, xor_Impact_Study, xor_Structure_Mod, xor_Hydroponics_Setup, xor_Crop_Select, xor_Nutrient_Mix, xor_Pest_Control, xor_Sensor_Install, xor_Staff_Train, xor_Compliance_Audit, xor_Packaging_Dev, xor_Logistics_Plan, xor_Community_Engage, xor_Sustainability_Check])
root.order.add_edge(loop_Site_Review, xor_Site_Review)
root.order.add_edge(loop_Impact_Study, xor_Impact_Study)
root.order.add_edge(loop_Structure_Mod, xor_Structure_Mod)
root.order.add_edge(loop_Hydroponics_Setup, xor_Hydroponics_Setup)
root.order.add_edge(loop_Crop_Select, xor_Crop_Select)
root.order.add_edge(loop_Nutrient_Mix, xor_Nutrient_Mix)
root.order.add_edge(loop_Pest_Control, xor_Pest_Control)
root.order.add_edge(loop_Sensor_Install, xor_Sensor_Install)
root.order.add_edge(loop_Staff_Train, xor_Staff_Train)
root.order.add_edge(loop_Compliance_Audit, xor_Compliance_Audit)
root.order.add_edge(loop_Packaging_Dev, xor_Packaging_Dev)
root.order.add_edge(loop_Logistics_Plan, xor_Logistics_Plan)
root.order.add_edge(loop_Community_Engage, xor_Community_Engage)
root.order.add_edge(loop_Sustainability_Check, xor_Sustainability_Check)