import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions
milk_sourcing = Transition(label='Milk Sourcing')
quality_testing = Transition(label='Quality Testing')
milk_pasturize = Transition(label='Milk Pasteurize')
curd_formation = Transition(label='Curd Formation')
whey_separation = Transition(label='Whey Separation')
press_cheese = Transition(label='Press Cheese')
salt_application = Transition(label='Salt Application')
controlled_aging = Transition(label='Controlled Aging')
sensory_check = Transition(label='Sensory Check')
batch_packaging = Transition(label='Batch Packaging')
label_printing = Transition(label='Label Printing')
cold_storage = Transition(label='Cold Storage')
logistics_plan = Transition(label='Logistics Plan')
retail_delivery = Transition(label='Retail Delivery')
feedback_review = Transition(label='Feedback Review')
demand_forecast = Transition(label='Demand Forecast')
provenance_track = Transition(label='Provenance Track')

# Define the silent transitions
skip = SilentTransition()

# Define the partial order model
loop = OperatorPOWL(operator=Operator.LOOP, children=[milk_sourcing, quality_testing])
xor = OperatorPOWL(operator=Operator.XOR, children=[milk_pasturize, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[curd_formation, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[whey_separation, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[press_cheese, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[salt_application, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[controlled_aging, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[sensory_check, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[batch_packaging, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[label_printing, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[cold_storage, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[retail_delivery, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[feedback_review, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[provenance_track, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)