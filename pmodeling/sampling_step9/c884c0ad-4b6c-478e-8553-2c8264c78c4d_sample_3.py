import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
seed_sourcing = Transition(label='Seed Sourcing')
germination_check = Transition(label='Germination Check')
nutrient_mix = Transition(label='Nutrient Mix')
automated_planting = Transition(label='Automated Planting')
climate_control = Transition(label='Climate Control')
crop_scanning = Transition(label='Crop Scanning')
pest_monitoring = Transition(label='Pest Monitoring')
growth_analysis = Transition(label='Growth Analysis')
robotic_harvest = Transition(label='Robotic Harvest')
quality_sort = Transition(label='Quality Sort')
eco_packaging = Transition(label='Eco Packaging')
blockchain_track = Transition(label='Blockchain Track')
route_planning = Transition(label='Route Planning')
feedback_collect = Transition(label='Feedback Collect')
waste_recycling = Transition(label='Waste Recycling')
data_analytics = Transition(label='Data Analytics')
demand_forecast = Transition(label='Demand Forecast')
maintenance_alert = Transition(label='Maintenance Alert')

# Define the POWL operators
xor1 = OperatorPOWL(operator=Operator.XOR, children=[climate_control, waste_recycling])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[pest_monitoring, data_analytics])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[growth_analysis, demand_forecast])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[eco_packaging, maintenance_alert])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[route_planning, feedback_collect])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[blockchain_track, waste_recycling])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[quality_sort, waste_recycling])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[waste_recycling, maintenance_alert])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, waste_recycling])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[eco_packaging, waste_recycling])

# Define the POWL root
root = StrictPartialOrder(nodes=[seed_sourcing, germination_check, nutrient_mix, automated_planting, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10])
root.order.add_edge(seed_sourcing, germination_check)
root.order.add_edge(seed_sourcing, nutrient_mix)
root.order.add_edge(seed_sourcing, automated_planting)
root.order.add_edge(germination_check, nutrient_mix)
root.order.add_edge(germination_check, automated_planting)
root.order.add_edge(nutrient_mix, automated_planting)
root.order.add_edge(automated_planting, climate_control)
root.order.add_edge(automated_planting, waste_recycling)
root.order.add_edge(climate_control, crop_scanning)
root.order.add_edge(climate_control, pest_monitoring)
root.order.add_edge(climate_control, growth_analysis)
root.order.add_edge(climate_control, robotic_harvest)
root.order.add_edge(climate_control, quality_sort)
root.order.add_edge(climate_control, eco_packaging)
root.order.add_edge(climate_control, blockchain_track)
root.order.add_edge(climate_control, route_planning)
root.order.add_edge(climate_control, feedback_collect)
root.order.add_edge(climate_control, waste_recycling)
root.order.add_edge(climate_control, maintenance_alert)
root.order.add_edge(climate_control, demand_forecast)
root.order.add_edge(climate_control, data_analytics)
root.order.add_edge(climate_control, xor1)
root.order.add_edge(climate_control, xor2)
root.order.add_edge(climate_control, xor3)
root.order.add_edge(climate_control, xor4)
root.order.add_edge(climate_control, xor5)
root.order.add_edge(climate_control, xor6)
root.order.add_edge(climate_control, xor7)
root.order.add_edge(climate_control, xor8)
root.order.add_edge(climate_control, xor9)
root.order.add_edge(climate_control, xor10)
root.order.add_edge(waste_recycling, xor7)
root.order.add_edge(waste_recycling, xor8)
root.order.add_edge(waste_recycling, xor9)
root.order.add_edge(waste_recycling, xor10)