import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Site_Survey = Transition(label='Site Survey')
Design_Layout = Transition(label='Design Layout')
Sensor_Deploy = Transition(label='Sensor Deploy')
Crop_Select = Transition(label='Crop Select')
System_Install = Transition(label='System Install')
Energy_Setup = Transition(label='Energy Setup')
Water_Cycle = Transition(label='Water Cycle')
Pest_Control = Transition(label='Pest Control')
Regulatory_Check = Transition(label='Regulatory Check')
Staff_Training = Transition(label='Staff Training')
Data_Configure = Transition(label='Data Configure')
Supply_Plan = Transition(label='Supply Plan')
Harvest_Schedule = Transition(label='Harvest Schedule')
Quality_Audit = Transition(label='Quality Audit')
Market_Launch = Transition(label='Market Launch')
Feedback_Loop = Transition(label='Feedback Loop')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Site_Survey, Design_Layout])
xor = OperatorPOWL(operator=Operator.XOR, children=[Crop_Select, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Energy_Setup, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Water_Cycle, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Pest_Control, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Regulatory_Check, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Staff_Training, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Data_Configure, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Supply_Plan, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Harvest_Schedule, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Quality_Audit, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Market_Launch, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Feedback_Loop, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12])
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(loop, xor11)
root.order.add_edge(loop, xor12)