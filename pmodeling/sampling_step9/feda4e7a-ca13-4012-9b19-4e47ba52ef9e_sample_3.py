import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteAnalysis = Transition(label='Site Analysis')
EnvScanning = Transition(label='Env Scanning')
FarmDesign = Transition(label='Farm Design')
NutrientMix = Transition(label='Nutrient Mix')
SeedAutomation = Transition(label='Seed Automation')
GrowthMonitor = Transition(label='Growth Monitor')
PestControl = Transition(label='Pest Control')
AIDDiagnostics = Transition(label='AI Diagnostics')
HarvestPlan = Transition(label='Harvest Plan')
RoboticSort = Transition(label='Robotic Sort')
PackagingLine = Transition(label='Packaging Line')
CommunityInput = Transition(label='Community Input')
DataAggregation = Transition(label='Data Aggregation')
WasteRecycle = Transition(label='Waste Recycle')
Sustainability = Transition(label='Sustainability')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[SiteAnalysis, EnvScanning])
xor = OperatorPOWL(operator=Operator.XOR, children=[FarmDesign, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[SeedAutomation, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[GrowthMonitor, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[PestControl, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[AIDDiagnostics, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[HarvestPlan, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[RoboticSort, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[PackagingLine, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[CommunityInput, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[DataAggregation, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[WasteRecycle, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Sustainability, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)