import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
seed_selection = Transition(label='Seed Selection')
germination_setup = Transition(label='Germination Setup')
nutrient_mix = Transition(label='Nutrient Mix')
water_control = Transition(label='Water Control')
climate_adjust = Transition(label='Climate Adjust')
sensor_monitor = Transition(label='Sensor Monitor')
lighting_tune = Transition(label='Lighting Tune')
airflow_manage = Transition(label='Airflow Manage')
health_scan = Transition(label='Health Scan')
pest_control = Transition(label='Pest Control')
harvest_timing = Transition(label='Harvest Timing')
cold_storage = Transition(label='Cold Storage')
package_prep = Transition(label='Package Prep')
delivery_plan = Transition(label='Delivery Plan')
feedback_loop = Transition(label='Feedback Loop')
skip = SilentTransition()

# Define loop nodes
nutrient_mix_loop = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_mix])
water_control_loop = OperatorPOWL(operator=Operator.LOOP, children=[water_control])
climate_adjust_loop = OperatorPOWL(operator=Operator.LOOP, children=[climate_adjust])
sensor_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[sensor_monitor])
lighting_tune_loop = OperatorPOWL(operator=Operator.LOOP, children=[lighting_tune])
airflow_manage_loop = OperatorPOWL(operator=Operator.LOOP, children=[airflow_manage])
health_scan_loop = OperatorPOWL(operator=Operator.LOOP, children=[health_scan])
pest_control_loop = OperatorPOWL(operator=Operator.LOOP, children=[pest_control])
harvest_timing_loop = OperatorPOWL(operator=Operator.LOOP, children=[harvest_timing])
cold_storage_loop = OperatorPOWL(operator=Operator.LOOP, children=[cold_storage])
package_prep_loop = OperatorPOWL(operator=Operator.LOOP, children=[package_prep])
delivery_plan_loop = OperatorPOWL(operator=Operator.LOOP, children=[delivery_plan])
feedback_loop_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop])

# Define exclusive choice nodes
nutrient_mix_choice = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix_loop, skip])
water_control_choice = OperatorPOWL(operator=Operator.XOR, children=[water_control_loop, skip])
climate_adjust_choice = OperatorPOWL(operator=Operator.XOR, children=[climate_adjust_loop, skip])
sensor_monitor_choice = OperatorPOWL(operator=Operator.XOR, children=[sensor_monitor_loop, skip])
lighting_tune_choice = OperatorPOWL(operator=Operator.XOR, children=[lighting_tune_loop, skip])
airflow_manage_choice = OperatorPOWL(operator=Operator.XOR, children=[airflow_manage_loop, skip])
health_scan_choice = OperatorPOWL(operator=Operator.XOR, children=[health_scan_loop, skip])
pest_control_choice = OperatorPOWL(operator=Operator.XOR, children=[pest_control_loop, skip])
harvest_timing_choice = OperatorPOWL(operator=Operator.XOR, children=[harvest_timing_loop, skip])
cold_storage_choice = OperatorPOWL(operator=Operator.XOR, children=[cold_storage_loop, skip])
package_prep_choice = OperatorPOWL(operator=Operator.XOR, children=[package_prep_loop, skip])
delivery_plan_choice = OperatorPOWL(operator=Operator.XOR, children=[delivery_plan_loop, skip])
feedback_loop_choice = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop_loop, skip])

# Define the root POWL model
root = StrictPartialOrder(nodes=[seed_selection, germination_setup, nutrient_mix_choice, water_control_choice, climate_adjust_choice, sensor_monitor_choice, lighting_tune_choice, airflow_manage_choice, health_scan_choice, pest_control_choice, harvest_timing_choice, cold_storage_choice, package_prep_choice, delivery_plan_choice, feedback_loop_choice])
root.order.add_edge(seed_selection, germination_setup)
root.order.add_edge(germination_setup, nutrient_mix_choice)
root.order.add_edge(nutrient_mix_choice, nutrient_mix_loop)
root.order.add_edge(nutrient_mix_loop, nutrient_mix_choice)
root.order.add_edge(nutrient_mix_loop, water_control_choice)
root.order.add_edge(water_control_choice, water_control_loop)
root.order.add_edge(water_control_loop, water_control_choice)
root.order.add_edge(water_control_loop, climate_adjust_choice)
root.order.add_edge(climate_adjust_choice, climate_adjust_loop)
root.order.add_edge(climate_adjust_loop, climate_adjust_choice)
root.order.add_edge(climate_adjust_loop, sensor_monitor_choice)
root.order.add_edge(sensor_monitor_choice, sensor_monitor_loop)
root.order.add_edge(sensor_monitor_loop, sensor_monitor_choice)
root.order.add_edge(sensor_monitor_loop, lighting_tune_choice)
root.order.add_edge(lighting_tune_choice, lighting_tune_loop)
root.order.add_edge(lighting_tune_loop, lighting_tune_choice)
root.order.add_edge(lighting_tune_loop, airflow_manage_choice)
root.order.add_edge(airflow_manage_choice, airflow_manage_loop)
root.order.add_edge(airflow_manage_loop, airflow_manage_choice)
root.order.add_edge(airflow_manage_loop, health_scan_choice)
root.order.add_edge(health_scan_choice, health_scan_loop)
root.order.add_edge(health_scan_loop, health_scan_choice)
root.order.add_edge(health_scan_loop, pest_control_choice)
root.order.add_edge(pest_control_choice, pest_control_loop)
root.order.add_edge(pest_control_loop, pest_control_choice)
root.order.add_edge(pest_control_loop, harvest_timing_choice)
root.order.add_edge(harvest_timing_choice, harvest_timing_loop)
root.order.add_edge(harvest_timing_loop, harvest_timing_choice)
root.order.add_edge(harvest_timing_loop, cold_storage_choice)
root.order.add_edge(cold_storage_choice, cold_storage_loop)
root.order.add_edge(cold_storage_loop, cold_storage_choice)
root.order.add_edge(cold_storage_loop, package_prep_choice)
root.order.add_edge(package_prep_choice, package_prep_loop)
root.order.add_edge(package_prep_loop, package_prep_choice)
root.order.add_edge(package_prep_loop, delivery_plan_choice)
root.order.add_edge(delivery_plan_choice, delivery_plan_loop)
root.order.add_edge(delivery_plan_loop, delivery_plan_choice)
root.order.add_edge(delivery_plan_loop, feedback_loop_choice)
root.order.add_edge(feedback_loop_choice, feedback_loop_loop)
root.order.add_edge(feedback_loop_loop, feedback_loop_choice)
root.order.add_edge(feedback_loop_loop, seed_selection)