import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Milk_Sourcing = Transition(label='Milk Sourcing')
Quality_Testing = Transition(label='Quality Testing')
Starter_Prep = Transition(label='Starter Prep')
Curd_Cutting = Transition(label='Curd Cutting')
Molding_Cheese = Transition(label='Molding Cheese')
Salting_Process = Transition(label='Salting Process')
Aging_Control = Transition(label='Aging Control')
Humidity_Check = Transition(label='Humidity Check')
Packaging_Design = Transition(label='Packaging Design')
Label_Printing = Transition(label='Label Printing')
Inventory_Audit = Transition(label='Inventory Audit')
Cold_Storage = Transition(label='Cold Storage')
Order_Processing = Transition(label='Order Processing')
Logistics_Planning = Transition(label='Logistics Planning')
Retail_Delivery = Transition(label='Retail Delivery')
Consumer_Feedback = Transition(label='Consumer Feedback')
Batch_Adjustment = Transition(label='Batch Adjustment')
Event_Coordination = Transition(label='Event Coordination')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Sourcing, Quality_Testing])
xor = OperatorPOWL(operator=Operator.XOR, children=[Starter_Prep, skip])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[Curd_Cutting, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Molding_Cheese, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Salting_Process, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Aging_Control, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Humidity_Check, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Packaging_Design, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Label_Printing, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Inventory_Audit, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Cold_Storage, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Order_Processing, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Logistics_Planning, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Retail_Delivery, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Consumer_Feedback, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[Batch_Adjustment, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[Event_Coordination, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)