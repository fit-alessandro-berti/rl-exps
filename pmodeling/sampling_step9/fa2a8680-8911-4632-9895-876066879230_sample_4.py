import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
ClientMeet = Transition(label='Client Meet')
RequirementGather = Transition(label='Requirement Gather')
ModuleDesign = Transition(label='Module Design')
SupplierVetting = Transition(label='Supplier Vetting')
ComponentOrder = Transition(label='Component Order')
PrototypeBuild = Transition(label='Prototype Build')
FieldTesting = Transition(label='Field Testing')
TestAnalysis = Transition(label='Test Analysis')
SoftwareSetup = Transition(label='Software Setup')
DataIntegration = Transition(label='Data Integration')
PilotTrain = Transition(label='Pilot Train')
ComplianceCheck = Transition(label='Compliance Check')
FleetDeploy = Transition(label='Fleet Deploy')
RemoteMonitor = Transition(label='Remote Monitor')
MaintenancePlan = Transition(label='Maintenance Plan')
PerformanceTune = Transition(label='Performance Tune')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[RequirementGather, ModuleDesign])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[PrototypeBuild, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[FieldTesting, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[TestAnalysis, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[SoftwareSetup, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[DataIntegration, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[PilotTrain, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[ComplianceCheck, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[FleetDeploy, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[RemoteMonitor, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[MaintenancePlan, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[PerformanceTune, skip])
root = StrictPartialOrder(nodes=[loop, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11])
root.order.add_edge(loop, xor1)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(loop, xor11)