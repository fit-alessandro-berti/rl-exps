import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteAnalysis = Transition(label='Site Analysis')
ImpactReview = Transition(label='Impact Review')
ModularDesign = Transition(label='Modular Design')
SystemIntegration = Transition(label='System Integration')
ClimateSetup = Transition(label='Climate Setup')
NutrientMix = Transition(label='Nutrient Mix')
LightConfig = Transition(label='Light Config')
StaffTraining = Transition(label='Staff Training')
PestMonitor = Transition(label='Pest Monitor')
DroneDeploy = Transition(label='Drone Deploy')
HealthScan = Transition(label='Health Scan')
DataLogging = Transition(label='Data Logging')
SupplySync = Transition(label='Supply Sync')
MaintenancePlan = Transition(label='Maintenance Plan')
WasteManage = Transition(label='Waste Manage')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[SiteAnalysis, ImpactReview])
xor = OperatorPOWL(operator=Operator.XOR, children=[ModularDesign, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[SystemIntegration, loop])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[ClimateSetup, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[LightConfig, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[StaffTraining, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[PestMonitor, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[DroneDeploy, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[HealthScan, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[DataLogging, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[SupplySync, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[MaintenancePlan, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[WasteManage, xor12])

root = StrictPartialOrder(nodes=[xor13])
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor1)
root.order.add_edge(xor1, xor)
root.order.add_edge(xor, loop)