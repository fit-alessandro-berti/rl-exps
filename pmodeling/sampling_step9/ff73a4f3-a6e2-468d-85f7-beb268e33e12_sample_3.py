import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

AuditArtifacts = Transition(label='Audit Artifacts')
InterviewStaff = Transition(label='Interview Staff')
AssessRisks = Transition(label='Assess Risks')
PlanRetrieval = Transition(label='Plan Retrieval')
LegalReview = Transition(label='Legal Review')
SecurityCheck = Transition(label='Security Check')
ExecuteRecovery = Transition(label='Execute Recovery')
ValidateItems = Transition(label='Validate Items')
RestoreFunction = Transition(label='Restore Function')
UpdateSystems = Transition(label='Update Systems')
TrainUsers = Transition(label='Train Users')
DocumentFindings = Transition(label='Document Findings')
ArchiveRecords = Transition(label='Archive Records')
ReviewLessons = Transition(label='Review Lessons')
CloseProcess = Transition(label='Close Process')

skip = SilentTransition()

audit = OperatorPOWL(operator=Operator.XOR, children=[AuditArtifacts, InterviewStaff])
riskAssessment = OperatorPOWL(operator=Operator.LOOP, children=[AssessRisks])
retrievalPlan = OperatorPOWL(operator=Operator.XOR, children=[PlanRetrieval, skip])
legalReview = OperatorPOWL(operator=Operator.LOOP, children=[LegalReview])
securityCheck = OperatorPOWL(operator=Operator.XOR, children=[SecurityCheck, skip])
recovery = OperatorPOWL(operator=Operator.LOOP, children=[ExecuteRecovery])
validation = OperatorPOWL(operator=Operator.XOR, children=[ValidateItems, skip])
restoration = OperatorPOWL(operator=Operator.LOOP, children=[RestoreFunction])
reintegration = OperatorPOWL(operator=Operator.XOR, children=[UpdateSystems, skip])
training = OperatorPOWL(operator=Operator.LOOP, children=[TrainUsers])
documentation = OperatorPOWL(operator=Operator.XOR, children=[DocumentFindings, skip])
archiving = OperatorPOWL(operator=Operator.LOOP, children=[ArchiveRecords])
lessonReview = OperatorPOWL(operator=Operator.XOR, children=[ReviewLessons, skip])
processClosure = OperatorPOWL(operator=Operator.XOR, children=[CloseProcess, skip])

root = StrictPartialOrder(nodes=[audit, riskAssessment, retrievalPlan, legalReview, securityCheck, recovery, validation, restoration, reintegration, training, documentation, archiving, lessonReview, processClosure])
root.order.add_edge(audit, riskAssessment)
root.order.add_edge(riskAssessment, retrievalPlan)
root.order.add_edge(retrievalPlan, legalReview)
root.order.add_edge(legalReview, securityCheck)
root.order.add_edge(securityCheck, recovery)
root.order.add_edge(recovery, validation)
root.order.add_edge(validation, restoration)
root.order.add_edge(restoration, reintegration)
root.order.add_edge(reintegration, training)
root.order.add_edge(training, documentation)
root.order.add_edge(documentation, archiving)
root.order.add_edge(archiving, lessonReview)
root.order.add_edge(lessonReview, processClosure)

print(root)