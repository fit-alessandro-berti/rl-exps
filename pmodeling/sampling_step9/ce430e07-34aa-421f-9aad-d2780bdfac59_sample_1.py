import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

RiskAssess = Transition(label='Risk Assess')
SourceAlternatives = Transition(label='Source Alternatives')
SupplierAudit = Transition(label='Supplier Audit')
ContractReview = Transition(label='Contract Review')
RegulationCheck = Transition(label='Regulation Check')
InventoryScan = Transition(label='Inventory Scan')
LogisticsReroute = Transition(label='Logistics Reroute')
CustomsNotify = Transition(label='Customs Notify')
StakeholderAlert = Transition(label='Stakeholder Alert')
DataAnalyze = Transition(label='Data Analyze')
CostForecast = Transition(label='Cost Forecast')
ComplianceVerify = Transition(label='Compliance Verify')
ScenarioPlan = Transition(label='Scenario Plan')
DecisionGate = Transition(label='Decision Gate')
FeedbackLoop = Transition(label='Feedback Loop')
ReportGenerate = Transition(label='Report Generate')
MarketMonitor = Transition(label='Market Monitor')
TeamSync = Transition(label='Team Sync')
skip = SilentTransition()

risk_assessment = OperatorPOWL(operator=Operator.XOR, children=[RiskAssess, skip])
alternative_sourcing = OperatorPOWL(operator=Operator.XOR, children=[SourceAlternatives, skip])
audit_supplier = OperatorPOWL(operator=Operator.XOR, children=[SupplierAudit, skip])
review_contract = OperatorPOWL(operator=Operator.XOR, children=[ContractReview, skip])
check_regulation = OperatorPOWL(operator=Operator.XOR, children=[RegulationCheck, skip])
inventory_scan = OperatorPOWL(operator=Operator.XOR, children=[InventoryScan, skip])
reroute_logistics = OperatorPOWL(operator=Operator.XOR, children=[LogisticsReroute, skip])
notify_customs = OperatorPOWL(operator=Operator.XOR, children=[CustomsNotify, skip])
alert_stakeholder = OperatorPOWL(operator=Operator.XOR, children=[StakeholderAlert, skip])
analyze_data = OperatorPOWL(operator=Operator.XOR, children=[DataAnalyze, skip])
cost_forecast = OperatorPOWL(operator=Operator.XOR, children=[CostForecast, skip])
verify_compliance = OperatorPOWL(operator=Operator.XOR, children=[ComplianceVerify, skip])
plan_scenario = OperatorPOWL(operator=Operator.XOR, children=[ScenarioPlan, skip])
decision_gate = OperatorPOWL(operator=Operator.XOR, children=[DecisionGate, skip])
feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[FeedbackLoop, skip])
generate_report = OperatorPOWL(operator=Operator.XOR, children=[ReportGenerate, skip])
monitor_market = OperatorPOWL(operator=Operator.XOR, children=[MarketMonitor, skip])
sync_team = OperatorPOWL(operator=Operator.XOR, children=[TeamSync, skip])

root = StrictPartialOrder(nodes=[risk_assessment, alternative_sourcing, audit_supplier, review_contract, check_regulation, inventory_scan, reroute_logistics, notify_customs, alert_stakeholder, analyze_data, cost_forecast, verify_compliance, plan_scenario, decision_gate, feedback_loop, generate_report, monitor_market, sync_team])
root.order.add_edge(risk_assessment, alternative_sourcing)
root.order.add_edge(risk_assessment, audit_supplier)
root.order.add_edge(risk_assessment, review_contract)
root.order.add_edge(risk_assessment, check_regulation)
root.order.add_edge(risk_assessment, inventory_scan)
root.order.add_edge(risk_assessment, reroute_logistics)
root.order.add_edge(risk_assessment, notify_customs)
root.order.add_edge(risk_assessment, alert_stakeholder)
root.order.add_edge(risk_assessment, analyze_data)
root.order.add_edge(risk_assessment, cost_forecast)
root.order.add_edge(risk_assessment, verify_compliance)
root.order.add_edge(risk_assessment, plan_scenario)
root.order.add_edge(risk_assessment, decision_gate)
root.order.add_edge(risk_assessment, feedback_loop)
root.order.add_edge(risk_assessment, generate_report)
root.order.add_edge(risk_assessment, monitor_market)
root.order.add_edge(risk_assessment, sync_team)
root.order.add_edge(alternative_sourcing, audit_supplier)
root.order.add_edge(alternative_sourcing, review_contract)
root.order.add_edge(alternative_sourcing, check_regulation)
root.order.add_edge(alternative_sourcing, inventory_scan)
root.order.add_edge(alternative_sourcing, reroute_logistics)
root.order.add_edge(alternative_sourcing, notify_customs)
root.order.add_edge(alternative_sourcing, alert_stakeholder)
root.order.add_edge(alternative_sourcing, analyze_data)
root.order.add_edge(alternative_sourcing, cost_forecast)
root.order.add_edge(alternative_sourcing, verify_compliance)
root.order.add_edge(alternative_sourcing, plan_scenario)
root.order.add_edge(alternative_sourcing, decision_gate)
root.order.add_edge(alternative_sourcing, feedback_loop)
root.order.add_edge(alternative_sourcing, generate_report)
root.order.add_edge(alternative_sourcing, monitor_market)
root.order.add_edge(alternative_sourcing, sync_team)
root.order.add_edge(audit_supplier, review_contract)
root.order.add_edge(audit_supplier, check_regulation)
root.order.add_edge(audit_supplier, inventory_scan)
root.order.add_edge(audit_supplier, reroute_logistics)
root.order.add_edge(audit_supplier, notify_customs)
root.order.add_edge(audit_supplier, alert_stakeholder)
root.order.add_edge(audit_supplier, analyze_data)
root.order.add_edge(audit_supplier, cost_forecast)
root.order.add_edge(audit_supplier, verify_compliance)
root.order.add_edge(audit_supplier, plan_scenario)
root.order.add_edge(audit_supplier, decision_gate)
root.order.add_edge(audit_supplier, feedback_loop)
root.order.add_edge(audit_supplier, generate_report)
root.order.add_edge(audit_supplier, monitor_market)
root.order.add_edge(audit_supplier, sync_team)
root.order.add_edge(review_contract, check_regulation)
root.order.add_edge(review_contract, inventory_scan)
root.order.add_edge(review_contract, reroute_logistics)
root.order.add_edge(review_contract, notify_customs)
root.order.add_edge(review_contract, alert_stakeholder)
root.order.add_edge(review_contract, analyze_data)
root.order.add_edge(review_contract, cost_forecast)
root.order.add_edge(review_contract, verify_compliance)
root.order.add_edge(review_contract, plan_scenario)
root.order.add_edge(review_contract, decision_gate)
root.order.add_edge(review_contract, feedback_loop)
root.order.add_edge(review_contract, generate_report)
root.order.add_edge(review_contract, monitor_market)
root.order.add_edge(review_contract, sync_team)
root.order.add_edge(check_regulation, inventory_scan)
root.order.add_edge(check_regulation, reroute_logistics)
root.order.add_edge(check_regulation, notify_customs)
root.order.add_edge(check_regulation, alert_stakeholder)
root.order.add_edge(check_regulation, analyze_data)
root.order.add_edge(check_regulation, cost_forecast)
root.order.add_edge(check_regulation, verify_compliance)
root.order.add_edge(check_regulation, plan_scenario)
root.order.add_edge(check_regulation, decision_gate)
root.order.add_edge(check_regulation, feedback_loop)
root.order.add_edge(check_regulation, generate_report)
root.order.add_edge(check_regulation, monitor_market)
root.order.add_edge(check_regulation, sync_team)
root.order.add_edge(inventory_scan, reroute_logistics)
root.order.add_edge(inventory_scan, notify_customs)
root.order.add_edge(inventory_scan, alert_stakeholder)
root.order.add_edge(inventory_scan, analyze_data)
root.order.add_edge(inventory_scan, cost_forecast)
root.order.add_edge(inventory_scan, verify_compliance)
root.order.add_edge(inventory_scan, plan_scenario)
root.order.add_edge(inventory_scan, decision_gate)
root.order.add_edge(inventory_scan, feedback_loop)
root.order.add_edge(inventory_scan, generate_report)
root.order.add_edge(inventory_scan, monitor_market)
root.order.add_edge(inventory_scan, sync_team)
root.order.add_edge(reroute_logistics, notify_customs)
root.order.add_edge(reroute_logistics, alert_stakeholder)
root.order.add_edge(reroute_logistics, analyze_data)
root.order.add_edge(reroute_logistics, cost_forecast)
root.order.add_edge(reroute_logistics, verify_compliance)
root.order.add_edge(reroute_logistics, plan_scenario)
root.order.add_edge(reroute_logistics, decision_gate)
root.order.add_edge(reroute_logistics, feedback_loop)
root.order.add_edge(reroute_logistics, generate_report)
root.order.add_edge(reroute_logistics, monitor_market)
root.order.add_edge(reroute_logistics, sync_team)
root.order.add_edge(notify_customs, alert_stakeholder)
root.order.add_edge(notify_customs, analyze_data)
root.order.add_edge(notify_customs, cost_forecast)
root.order.add_edge(notify_customs, verify_compliance)
root.order.add_edge(notify_customs, plan_scenario)
root.order.add_edge(notify_customs, decision_gate)
root.order.add_edge(notify_customs, feedback_loop)
root.order.add_edge(notify_customs, generate_report)
root.order.add_edge(notify_customs, monitor_market)
root.order.add_edge(notify_customs, sync_team)
root.order.add_edge(alert_stakeholder, analyze_data)
root.order.add_edge(alert_stakeholder, cost_forecast)
root.order.add_edge(alert_stakeholder, verify_compliance)
root.order.add_edge(alert_stakeholder, plan_scenario)
root.order.add_edge(alert_stakeholder, decision_gate)
root.order.add_edge(alert_stakeholder, feedback_loop)
root.order.add_edge(alert_stakeholder, generate_report)
root.order.add_edge(alert_stakeholder, monitor_market)
root.order.add_edge(alert_stakeholder, sync_team)
root.order.add_edge(analyze_data, cost_forecast)
root.order.add_edge(analyze_data, verify_compliance)
root.order.add_edge(analyze_data, plan_scenario)
root.order.add_edge(analyze_data, decision_gate)
root.order.add_edge(analyze_data, feedback_loop)
root.order.add_edge(analyze_data, generate_report)
root.order.add_edge(analyze_data, monitor_market)
root.order.add_edge(analyze_data, sync_team)
root.order.add_edge(cost_forecast, verify_compliance)
root.order.add_edge(cost_forecast, plan_scenario)
root.order.add_edge(cost_forecast, decision_gate)
root.order.add_edge(cost_forecast, feedback_loop)
root.order.add_edge(cost_forecast, generate_report)
root.order.add_edge(cost_forecast, monitor_market)
root.order.add_edge(cost_forecast, sync_team)
root.order.add_edge(verify_compliance, plan_scenario)
root.order.add_edge(verify_compliance, decision_gate)
root.order.add_edge(verify_compliance, feedback_loop)
root.order.add_edge(verify_compliance, generate_report)
root.order.add_edge(verify_compliance, monitor_market)
root.order.add_edge(verify_compliance, sync_team)
root.order.add_edge(plan_scenario, decision_gate)
root.order.add_edge(plan_scenario, feedback_loop)
root.order.add_edge(plan_scenario, generate_report)
root.order.add_edge(plan_scenario, monitor_market)
root.order.add_edge(plan_scenario, sync_team)
root.order.add_edge(decision_gate, feedback_loop)
root.order.add_edge(decision_gate, generate_report)
root.order.add_edge(decision_gate, monitor_market)
root.order.add_edge(decision_gate, sync_team)
root.order.add_edge(feedback_loop, generate_report)
root.order.add_edge(feedback_loop, monitor_market)
root.order.add_edge(feedback_loop, sync_team)
root.order.add_edge(generate_report, monitor_market)
root.order.add_edge(generate_report, sync_team)
root.order.add_edge(monitor_market, sync_team)