import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
data_capture = Transition(label='Data Capture')
fingerprint_art = Transition(label='Fingerprint Art')
record_input = Transition(label='Record Input')
historical_check = Transition(label='Historical Check')
stakeholder_vote = Transition(label='Stakeholder Vote')
consensus_validate = Transition(label='Consensus Validate')
timestamp_entry = Transition(label='Timestamp Entry')
ledger_update = Transition(label='Ledger Update')
ai_patternscan = Transition(label='AI PatternScan')
flag_anomaly = Transition(label='Flag Anomaly')
dispute_submit = Transition(label='Dispute Submit')
panel_review = Transition(label='Panel Review')
arbitrate_case = Transition(label='Arbitrate Case')
trade_monitor = Transition(label='Trade Monitor')
feedback_loop = Transition(label='Feedback Loop')
insurance_sync = Transition(label='Insurance Sync')
collector_notify = Transition(label='Collector Notify')

# Define the silent transitions
skip = SilentTransition()

# Define the POWL model
loop_data_capture = OperatorPOWL(operator=Operator.LOOP, children=[data_capture, skip])
loop_fingerprint_art = OperatorPOWL(operator=Operator.LOOP, children=[fingerprint_art, skip])
loop_record_input = OperatorPOWL(operator=Operator.LOOP, children=[record_input, skip])
loop_historical_check = OperatorPOWL(operator=Operator.LOOP, children=[historical_check, skip])
loop_stakeholder_vote = OperatorPOWL(operator=Operator.LOOP, children=[stakeholder_vote, skip])
loop_consensus_validate = OperatorPOWL(operator=Operator.LOOP, children=[consensus_validate, skip])
loop_timestamp_entry = OperatorPOWL(operator=Operator.LOOP, children=[timestamp_entry, skip])
loop_ledger_update = OperatorPOWL(operator=Operator.LOOP, children=[ledger_update, skip])
loop_ai_patternscan = OperatorPOWL(operator=Operator.LOOP, children=[ai_patternscan, skip])
loop_flag_anomaly = OperatorPOWL(operator=Operator.LOOP, children=[flag_anomaly, skip])
loop_dispute_submit = OperatorPOWL(operator=Operator.LOOP, children=[dispute_submit, skip])
loop_panel_review = OperatorPOWL(operator=Operator.LOOP, children=[panel_review, skip])
loop_arbitrate_case = OperatorPOWL(operator=Operator.LOOP, children=[arbitrate_case, skip])
loop_trade_monitor = OperatorPOWL(operator=Operator.LOOP, children=[trade_monitor, skip])
loop_feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop, skip])
loop_insurance_sync = OperatorPOWL(operator=Operator.LOOP, children=[insurance_sync, skip])
loop_collector_notify = OperatorPOWL(operator=Operator.LOOP, children=[collector_notify, skip])

xor_data_capture = OperatorPOWL(operator=Operator.XOR, children=[loop_data_capture, skip])
xor_fingerprint_art = OperatorPOWL(operator=Operator.XOR, children=[loop_fingerprint_art, skip])
xor_record_input = OperatorPOWL(operator=Operator.XOR, children=[loop_record_input, skip])
xor_historical_check = OperatorPOWL(operator=Operator.XOR, children=[loop_historical_check, skip])
xor_stakeholder_vote = OperatorPOWL(operator=Operator.XOR, children=[loop_stakeholder_vote, skip])
xor_consensus_validate = OperatorPOWL(operator=Operator.XOR, children=[loop_consensus_validate, skip])
xor_timestamp_entry = OperatorPOWL(operator=Operator.XOR, children=[loop_timestamp_entry, skip])
xor_ledger_update = OperatorPOWL(operator=Operator.XOR, children=[loop_ledger_update, skip])
xor_ai_patternscan = OperatorPOWL(operator=Operator.XOR, children=[loop_ai_patternscan, skip])
xor_flag_anomaly = OperatorPOWL(operator=Operator.XOR, children=[loop_flag_anomaly, skip])
xor_dispute_submit = OperatorPOWL(operator=Operator.XOR, children=[loop_dispute_submit, skip])
xor_panel_review = OperatorPOWL(operator=Operator.XOR, children=[loop_panel_review, skip])
xor_arbitrate_case = OperatorPOWL(operator=Operator.XOR, children=[loop_arbitrate_case, skip])
xor_trade_monitor = OperatorPOWL(operator=Operator.XOR, children=[loop_trade_monitor, skip])
xor_feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[loop_feedback_loop, skip])
xor_insurance_sync = OperatorPOWL(operator=Operator.XOR, children=[loop_insurance_sync, skip])
xor_collector_notify = OperatorPOWL(operator=Operator.XOR, children=[loop_collector_notify, skip])

root = StrictPartialOrder(nodes=[xor_data_capture, xor_fingerprint_art, xor_record_input, xor_historical_check, xor_stakeholder_vote, xor_consensus_validate, xor_timestamp_entry, xor_ledger_update, xor_ai_patternscan, xor_flag_anomaly, xor_dispute_submit, xor_panel_review, xor_arbitrate_case, xor_trade_monitor, xor_feedback_loop, xor_insurance_sync, xor_collector_notify])
root.order.add_edge(xor_data_capture, xor_fingerprint_art)
root.order.add_edge(xor_data_capture, xor_record_input)
root.order.add_edge(xor_data_capture, xor_historical_check)
root.order.add_edge(xor_data_capture, xor_stakeholder_vote)
root.order.add_edge(xor_data_capture, xor_consensus_validate)
root.order.add_edge(xor_data_capture, xor_timestamp_entry)
root.order.add_edge(xor_data_capture, xor_ledger_update)
root.order.add_edge(xor_data_capture, xor_ai_patternscan)
root.order.add_edge(xor_data_capture, xor_flag_anomaly)
root.order.add_edge(xor_data_capture, xor_dispute_submit)
root.order.add_edge(xor_data_capture, xor_panel_review)
root.order.add_edge(xor_data_capture, xor_arbitrate_case)
root.order.add_edge(xor_data_capture, xor_trade_monitor)
root.order.add_edge(xor_data_capture, xor_feedback_loop)
root.order.add_edge(xor_data_capture, xor_insurance_sync)
root.order.add_edge(xor_data_capture, xor_collector_notify)
root.order.add_edge(xor_fingerprint_art, xor_record_input)
root.order.add_edge(xor_fingerprint_art, xor_historical_check)
root.order.add_edge(xor_fingerprint_art, xor_stakeholder_vote)
root.order.add_edge(xor_fingerprint_art, xor_consensus_validate)
root.order.add_edge(xor_fingerprint_art, xor_timestamp_entry)
root.order.add_edge(xor_fingerprint_art, xor_ledger_update)
root.order.add_edge(xor_fingerprint_art, xor_ai_patternscan)
root.order.add_edge(xor_fingerprint_art, xor_flag_anomaly)
root.order.add_edge(xor_fingerprint_art, xor_dispute_submit)
root.order.add_edge(xor_fingerprint_art, xor_panel_review)
root.order.add_edge(xor_fingerprint_art, xor_arbitrate_case)
root.order.add_edge(xor_fingerprint_art, xor_trade_monitor)
root.order.add_edge(xor_fingerprint_art, xor_feedback_loop)
root.order.add_edge(xor_fingerprint_art, xor_insurance_sync)
root.order.add_edge(xor_fingerprint_art, xor_collector_notify)
root.order.add_edge(xor_record_input, xor_historical_check)
root.order.add_edge(xor_record_input, xor_stakeholder_vote)
root.order.add_edge(xor_record_input, xor_consensus_validate)
root.order.add_edge(xor_record_input, xor_timestamp_entry)
root.order.add_edge(xor_record_input, xor_ledger_update)
root.order.add_edge(xor_record_input, xor_ai_patternscan)
root.order.add_edge(xor_record_input, xor_flag_anomaly)
root.order.add_edge(xor_record_input, xor_dispute_submit)
root.order.add_edge(xor_record_input, xor_panel_review)
root.order.add_edge(xor_record_input, xor_arbitrate_case)
root.order.add_edge(xor_record_input, xor_trade_monitor)
root.order.add_edge(xor_record_input, xor_feedback_loop)
root.order.add_edge(xor_record_input, xor_insurance_sync)
root.order.add_edge(xor_record_input, xor_collector_notify)
root.order.add_edge(xor_historical_check, xor_stakeholder_vote)
root.order.add_edge(xor_historical_check, xor_consensus_validate)
root.order.add_edge(xor_historical_check, xor_timestamp_entry)
root.order.add_edge(xor_historical_check, xor_ledger_update)
root.order.add_edge(xor_historical_check, xor_ai_patternscan)
root.order.add_edge(xor_historical_check, xor_flag_anomaly)
root.order.add_edge(xor_historical_check, xor_dispute_submit)
root.order.add_edge(xor_historical_check, xor_panel_review)
root.order.add_edge(xor_historical_check, xor_arbitrate_case)
root.order.add_edge(xor_historical_check, xor_trade_monitor)
root.order.add_edge(xor_historical_check, xor_feedback_loop)
root.order.add_edge(xor_historical_check, xor_insurance_sync)
root.order.add_edge(xor_historical_check, xor_collector_notify)
root.order.add_edge(xor_stakeholder_vote, xor_consensus_validate)
root.order.add_edge(xor_stakeholder_vote, xor_timestamp_entry)
root.order.add_edge(xor_stakeholder_vote, xor_ledger_update)
root.order.add_edge(xor_stakeholder_vote, xor_ai_patternscan)
root.order.add_edge(xor_stakeholder_vote, xor_flag_anomaly)
root.order.add_edge(xor_stakeholder_vote, xor_dispute_submit)
root.order.add_edge(xor_stakeholder_vote, xor_panel_review)
root.order.add_edge(xor_stakeholder_vote, xor_arbitrate_case)
root.order.add_edge(xor_stakeholder_vote, xor_trade_monitor)
root.order.add_edge(xor_stakeholder_vote, xor_feedback_loop)
root.order.add_edge(xor_stakeholder_vote, xor_insurance_sync)
root.order.add_edge(xor_stakeholder_vote, xor_collector_notify)
root.order.add_edge(xor_consensus_validate, xor_timestamp_entry)
root.order.add_edge(xor_consensus_validate, xor_ledger_update)
root.order.add_edge(xor_consensus_validate, xor_ai_patternscan)
root.order.add_edge(xor_consensus_validate, xor_flag_anomaly)
root.order.add_edge(xor_consensus_validate, xor_dispute_submit)
root.order.add_edge(xor_consensus_validate, xor_panel_review)
root.order.add_edge(xor_consensus_validate, xor_arbitrate_case)
root.order.add_edge(xor_consensus_validate, xor_trade_monitor)
root.order.add_edge(xor_consensus_validate, xor_feedback_loop)
root.order.add_edge(xor_consensus_validate, xor_insurance_sync)
root.order.add_edge(xor_consensus_validate, xor_collector_notify)
root.order.add_edge(xor_timestamp_entry, xor_ledger_update)
root.order.add_edge(xor_timestamp_entry, xor_ai_patternscan)
root.order.add_edge(xor_timestamp_entry, xor_flag_anomaly)
root.order.add_edge(xor_timestamp_entry, xor_dispute_submit)
root.order.add_edge(xor_timestamp_entry, xor_panel_review)
root.order.add_edge(xor_timestamp_entry, xor_arbitrate_case)
root.order.add_edge(xor_timestamp_entry, xor_trade_monitor)
root.order.add_edge(xor_timestamp_entry, xor_feedback_loop)
root.order.add_edge(xor_timestamp_entry, xor_insurance_sync)
root.order.add_edge(xor_timestamp_entry, xor_collector_notify)
root.order.add_edge(xor_ledger_update, xor_ai_patternscan)
root.order.add_edge(xor_ledger_update, xor_flag_anomaly)
root.order.add_edge(xor_ledger_update, xor_dispute_submit)
root.order.add_edge(xor_ledger_update, xor_panel_review)
root.order.add_edge(xor_ledger_update, xor_arbitrate_case)
root.order.add_edge(xor_ledger_update, xor_trade_monitor)
root.order.add_edge(xor_ledger_update, xor_feedback_loop)
root.order.add_edge(xor_ledger_update, xor_insurance_sync)
root.order.add_edge(xor_ledger_update, xor_collector_notify)
root.order.add_edge(xor_ai_patternscan, xor_flag_anomaly)
root.order.add_edge(xor_ai_patternscan, xor_dispute_submit)
root.order.add_edge(xor_ai_patternscan, xor_panel_review)
root.order.add_edge(xor_ai_patternscan, xor_arbitrate_case)
root.order.add_edge(xor_ai_patternscan, xor_trade_monitor)
root.order.add_edge(xor_ai_patternscan, xor_feedback_loop)
root.order.add_edge(xor_ai_patternscan, xor_insurance_sync)
root.order.add_edge(xor_ai_patternscan, xor_collector_notify)
root.order.add_edge(xor_flag_anomaly, xor_dispute_submit)
root.order.add_edge(xor_flag_anomaly, xor_panel_review)
root.order.add_edge(xor_flag_anomaly, xor_arbitrate_case)
root.order.add_edge(xor_flag_anomaly, xor_trade_monitor)
root.order.add_edge(xor_flag_anomaly, xor_feedback_loop)
root.order.add_edge(xor_flag_anomaly, xor_insurance_sync)
root.order.add_edge(xor_flag_anomaly, xor_collector_notify)
root.order.add_edge(xor_dispute_submit, xor_panel_review)
root.order.add_edge(xor_dispute_submit, xor_arbitrate_case)
root.order.add_edge(xor_dispute_submit, xor_trade_monitor)
root.order.add_edge(xor_dispute_submit, xor_feedback_loop)
root.order.add_edge(xor_dispute_submit, xor_insurance_sync)
root.order.add_edge(xor_dispute_submit, xor_collector_notify)
root.order.add_edge(xor_panel_review, xor_arbitrate_case)
root.order.add_edge(xor_panel_review, xor_trade_monitor)
root.order.add_edge(xor_panel_review, xor_feedback_loop)
root.order.add_edge(xor_panel_review, xor_insurance_sync)
root.order.add_edge(xor_panel_review, xor_collector_notify)
root.order.add_edge(xor_arbitrate_case, xor_trade_monitor)
root.order.add_edge(xor_arbitrate_case, xor_feedback_loop)
root.order.add_edge(xor_arbitrate_case, xor_insurance_sync)
root.order.add_edge(xor_arbitrate_case, xor_collector_notify)
root.order.add_edge(xor_trade_monitor, xor_feedback_loop)
root.order.add_edge(xor_trade_monitor, xor_insurance_sync)
root.order.add_edge(xor_trade_monitor, xor_collector_notify)
root.order.add_edge(xor_feedback_loop, xor_insurance_sync)
root.order.add_edge(xor_feedback_loop, xor_collector_notify)
root.order.add_edge(xor_insurance_sync, xor_collector_notify)