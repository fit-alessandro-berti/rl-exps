import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

DataIngest = Transition(label='Data Ingest')
StatusCheck = Transition(label='Status Check')
ForecastUpdate = Transition(label='Forecast Update')
RiskAssess = Transition(label='Risk Assess')
ScenarioSim = Transition(label='Scenario Sim')
ModelRun = Transition(label='Model Run')
OptionSelect = Transition(label='Option Select')
TeamReview = Transition(label='Team Review')
PlanApprove = Transition(label='Plan Approve')
ProcureAdjust = Transition(label='Procure Adjust')
RouteReplan = Transition(label='Route Replan')
InventoryShift = Transition(label='Inventory Shift')
ExecuteUpdates = Transition(label='Execute Updates')
MonitorKPIs = Transition(label='Monitor KPIs')
FeedbackLoop = Transition(label='Feedback Loop')

skip = SilentTransition()

data_ingest = OperatorPOWL(operator=Operator.XOR, children=[DataIngest, skip])
status_check = OperatorPOWL(operator=Operator.XOR, children=[StatusCheck, skip])
forecast_update = OperatorPOWL(operator=Operator.XOR, children=[ForecastUpdate, skip])
risk_assess = OperatorPOWL(operator=Operator.XOR, children=[RiskAssess, skip])
scenario_sim = OperatorPOWL(operator=Operator.XOR, children=[ScenarioSim, skip])
model_run = OperatorPOWL(operator=Operator.XOR, children=[ModelRun, skip])
option_select = OperatorPOWL(operator=Operator.XOR, children=[OptionSelect, skip])
team_review = OperatorPOWL(operator=Operator.XOR, children=[TeamReview, skip])
plan_approve = OperatorPOWL(operator=Operator.XOR, children=[PlanApprove, skip])
procure_adjust = OperatorPOWL(operator=Operator.XOR, children=[ProcureAdjust, skip])
route_replan = OperatorPOWL(operator=Operator.XOR, children=[RouteReplan, skip])
inventory_shift = OperatorPOWL(operator=Operator.XOR, children=[InventoryShift, skip])
execute_updates = OperatorPOWL(operator=Operator.XOR, children=[ExecuteUpdates, skip])
monitor_kpis = OperatorPOWL(operator=Operator.XOR, children=[MonitorKPIs, skip])
feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[FeedbackLoop, skip])

root = StrictPartialOrder(nodes=[data_ingest, status_check, forecast_update, risk_assess, scenario_sim, model_run, option_select, team_review, plan_approve, procure_adjust, route_replan, inventory_shift, execute_updates, monitor_kpis, feedback_loop])
root.order.add_edge(data_ingest, status_check)
root.order.add_edge(data_ingest, forecast_update)
root.order.add_edge(status_check, risk_assess)
root.order.add_edge(status_check, scenario_sim)
root.order.add_edge(forecast_update, model_run)
root.order.add_edge(forecast_update, option_select)
root.order.add_edge(risk_assess, team_review)
root.order.add_edge(risk_assess, plan_approve)
root.order.add_edge(scenario_sim, procure_adjust)
root.order.add_edge(scenario_sim, route_replan)
root.order.add_edge(scenario_sim, inventory_shift)
root.order.add_edge(model_run, execute_updates)
root.order.add_edge(model_run, monitor_kpis)
root.order.add_edge(option_select, plan_approve)
root.order.add_edge(plan_approve, feedback_loop)
root.order.add_edge(plan_approve, procure_adjust)
root.order.add_edge(plan_approve, route_replan)
root.order.add_edge(plan_approve, inventory_shift)
root.order.add_edge(plan_approve, execute_updates)
root.order.add_edge(plan_approve, monitor_kpis)
root.order.add_edge(feedback_loop, data_ingest)