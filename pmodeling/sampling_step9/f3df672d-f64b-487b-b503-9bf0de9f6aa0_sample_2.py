import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

data_collection = Transition(label='Data Collection')
provenance_check = Transition(label='Provenance Check')
material_scan = Transition(label='Material Scan')
historical_review = Transition(label='Historical Review')
expert_panel = Transition(label='Expert Panel')
blockchain_verify = Transition(label='Blockchain Verify')
oral_history = Transition(label='Oral History')
condition_report = Transition(label='Condition Report')
legal_review = Transition(label='Legal Review')
certification = Transition(label='Certification')
archival_update = Transition(label='Archival Update')
insurance_setup = Transition(label='Insurance Setup')
exhibition_prep = Transition(label='Exhibition Prep')
iot_monitoring = Transition(label='IoT Monitoring')
re_validation = Transition(label='Re-validation')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[data_collection, provenance_check])
xor = OperatorPOWL(operator=Operator.XOR, children=[material_scan, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[historical_review, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[expert_panel, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[blockchain_verify, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[oral_history, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[condition_report, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[certification, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[archival_update, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[insurance_setup, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[exhibition_prep, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[iot_monitoring, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[re_validation, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, loop)