import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_analysis = Transition(label='Site Analysis')
sensor_setup = Transition(label='Sensor Setup')
data_capture = Transition(label='Data Capture')
ai_prediction = Transition(label='AI Prediction')
community_poll = Transition(label='Community Poll')
irrigation_adjust = Transition(label='Irrigation Adjust')
nutrient_mix = Transition(label='Nutrient Mix')
pest_control = Transition(label='Pest Control')
soil_testing = Transition(label='Soil Testing')
biochar_apply = Transition(label='Biochar Apply')
microbial_add = Transition(label='Microbial Add')
automated_harvest = Transition(label='Automated Harvest')
yield_review = Transition(label='Yield Review')
waste_process = Transition(label='Waste Process')
feedback_loop = Transition(label='Feedback Loop')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[site_analysis, sensor_setup])
xor = OperatorPOWL(operator=Operator.XOR, children=[data_capture, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[ai_prediction, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[community_poll, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[irrigation_adjust, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[soil_testing, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[biochar_apply, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[microbial_add, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[automated_harvest, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[yield_review, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[waste_process, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(loop, xor11)
root.order.add_edge(loop, xor12)
root.order.add_edge(loop, xor13)