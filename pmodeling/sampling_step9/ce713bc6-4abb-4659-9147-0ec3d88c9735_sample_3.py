import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
InitialInquiry = Transition(label='Initial Inquiry')
DocumentReview = Transition(label='Document Review')
HistoricalResearch = Transition(label='Historical Research')
MaterialSampling = Transition(label='Material Sampling')
ForensicTesting = Transition(label='Forensic Testing')
OwnershipAudit = Transition(label='Ownership Audit')
LegalVerification = Transition(label='Legal Verification')
EthicalScreening = Transition(label='Ethical Screening')
ExpertConsultation = Transition(label='Expert Consultation')
CulturalAssessment = Transition(label='Cultural Assessment')
ConditionSurvey = Transition(label='Condition Survey')
ProvenanceMapping = Transition(label='Provenance Mapping')
RiskAnalysis = Transition(label='Risk Analysis')
ReportCompilation = Transition(label='Report Compilation')
AcquisitionApproval = Transition(label='Acquisition Approval')
RepatriationReview = Transition(label='Repatriation Review')
ArchivalStorage = Transition(label='Archival Storage')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[InitialInquiry, DocumentReview])
xor = OperatorPOWL(operator=Operator.XOR, children=[HistoricalResearch, MaterialSampling])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[ForensicTesting, OwnershipAudit])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[LegalVerification, EthicalScreening])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[ExpertConsultation, CulturalAssessment])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[ConditionSurvey, ProvenanceMapping])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[RiskAnalysis, ReportCompilation])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[AcquisitionApproval, RepatriationReview])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[ArchivalStorage, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor1, xor2, xor3, xor4, xor5, xor6, xor7])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)