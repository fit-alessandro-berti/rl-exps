import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteSurvey = Transition(label='Site Survey')
SystemDesign = Transition(label='System Design')
ClimateSim = Transition(label='Climate Sim')
SeedSelect = Transition(label='Seed Select')
ModuleSetup = Transition(label='Module Setup')
NutrientMix = Transition(label='Nutrient Mix')
WaterCycle = Transition(label='Water Cycle')
EnergyLink = Transition(label='Energy Link')
SensorInstall = Transition(label='Sensor Install')
PestDetect = Transition(label='Pest Detect')
GrowthScan = Transition(label='Growth Scan')
DataSync = Transition(label='Data Sync')
CommunityMeet = Transition(label='Community Meet')
RegCompliance = Transition(label='Reg Compliance')
SystemTest = Transition(label='System Test')
MaintenancePlan = Transition(label='Maintenance Plan')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[SiteSurvey, SystemDesign])
xor = OperatorPOWL(operator=Operator.XOR, children=[ClimateSim, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[SeedSelect, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[ModuleSetup, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[WaterCycle, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[EnergyLink, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[SensorInstall, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[PestDetect, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[GrowthScan, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[DataSync, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[CommunityMeet, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[RegCompliance, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[SystemTest, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[MaintenancePlan, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)