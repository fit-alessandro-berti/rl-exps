import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Client_Meet = Transition(label='Client Meet')
Design_Draft = Transition(label='Design Draft')
Vendor_Select = Transition(label='Vendor Select')
Component_Order = Transition(label='Component Order')
Parts_Inspect = Transition(label='Parts Inspect')
Frame_Build = Transition(label='Frame Build')
Wiring_Setup = Transition(label='Wiring Setup')
Software_Load = Transition(label='Software Load')
Flight_Sim = Transition(label='Flight Sim')
Quality_Test = Transition(label='Quality Test')
Feedback_Review = Transition(label='Feedback Review')
Adjust_Design = Transition(label='Adjust Design')
Compliance_Check = Transition(label='Compliance Check')
Packaging_Prep = Transition(label='Packaging Prep')
Final_Demo = Transition(label='Final Demo')
Ship_Drone = Transition(label='Ship Drone')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Client_Meet, Design_Draft])
xor = OperatorPOWL(operator=Operator.XOR, children=[Vendor_Select, skip])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[Component_Order, Parts_Inspect])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Frame_Build, skip])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[Wiring_Setup, Software_Load])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Flight_Sim, skip])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[Quality_Test, Feedback_Review])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Adjust_Design, skip])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[Compliance_Check, Packaging_Prep])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Final_Demo, skip])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[Ship_Drone, skip])

root = StrictPartialOrder(nodes=[loop, xor, loop2, xor2, loop3, xor3, loop4, xor4, loop5, xor5, loop6])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, loop2)
root.order.add_edge(loop2, xor2)
root.order.add_edge(xor2, loop3)
root.order.add_edge(loop3, xor3)
root.order.add_edge(xor3, loop4)
root.order.add_edge(loop4, xor4)
root.order.add_edge(xor4, loop5)
root.order.add_edge(loop5, xor5)
root.order.add_edge(xor5, loop6)
root.order.add_edge(loop6, xor5)