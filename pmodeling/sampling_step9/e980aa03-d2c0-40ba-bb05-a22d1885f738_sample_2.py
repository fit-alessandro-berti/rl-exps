import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Client_Brief = Transition(label='Client Brief')
Spec_Analysis = Transition(label='Spec Analysis')
Material_Sourcing = Transition(label='Material Sourcing')
Component_Vetting = Transition(label='Component Vetting')
Frame_Assembly = Transition(label='Frame Assembly')
Sensor_Install = Transition(label='Sensor Install')
Propulsion_Setup = Transition(label='Propulsion Setup')
Calibration = Transition(label='Calibration')
Software_Load = Transition(label='Software Load')
Flight_Test = Transition(label='Flight Test')
AI_Training = Transition(label='AI Training')
QA_Review = Transition(label='QA Review')
Mission_Pack = Transition(label='Mission Pack')
Client_Training = Transition(label='Client Training')
Deployment_Support = Transition(label='Deployment Support')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Spec_Analysis, Component_Vetting])
xor = OperatorPOWL(operator=Operator.XOR, children=[Frame_Assembly, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Sensor_Install, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Propulsion_Setup, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Calibration, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Software_Load, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Flight_Test, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[AI_Training, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[QA_Review, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Mission_Pack, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Client_Training, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Deployment_Support, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)