import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
IntakeCheck = Transition(label='Intake Check')
ConditionLog = Transition(label='Condition Log')
ProvenanceReview = Transition(label='Provenance Review')
MaterialTest = Transition(label='Material Test')
SpectrometryScan = Transition(label='Spectrometry Scan')
StylisticAnalysis = Transition(label='Stylistic Analysis')
ExpertConsult = Transition(label='Expert Consult')
ArchiveSearch = Transition(label='Archive Search')
LedgerVerification = Transition(label='Ledger Verification')
SecondaryReview = Transition(label='Secondary Review')
CrossCheck = Transition(label='Cross-Check')
ConservationPrep = Transition(label='Conservation Prep')
Documentation = Transition(label='Documentation')
ReportCreation = Transition(label='Report Creation')
DatabaseUpdate = Transition(label='Database Update')
skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[IntakeCheck, ConditionLog])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[MaterialTest, SpectrometryScan])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[StylisticAnalysis, ExpertConsult])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[ArchiveSearch, LedgerVerification])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[SecondaryReview, CrossCheck])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[ConservationPrep, Documentation])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[ReportCreation, DatabaseUpdate])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[loop1, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[loop2, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[loop3, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[loop4, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[loop5, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[loop6, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[loop7, skip])
root = StrictPartialOrder(nodes=[xor1, xor2, xor3, xor4, xor5, xor6, xor7])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor1, xor4)
root.order.add_edge(xor1, xor5)
root.order.add_edge(xor1, xor6)
root.order.add_edge(xor1, xor7)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor2, xor6)
root.order.add_edge(xor2, xor7)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor3, xor6)
root.order.add_edge(xor3, xor7)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor4, xor6)
root.order.add_edge(xor4, xor7)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor5, xor7)
root.order.add_edge(xor6, xor7)