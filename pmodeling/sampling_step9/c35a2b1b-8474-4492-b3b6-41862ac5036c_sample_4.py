import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

initial_inspect = Transition(label='Initial Inspect')
material_test = Transition(label='Material Test')
imaging_scan = Transition(label='Imaging Scan')
historical_check = Transition(label='Historical Check')
expert_consult = Transition(label='Expert Consult')
provenance_trace = Transition(label='Provenance Trace')
forgery_detect = Transition(label='Forgery Detect')
restoration_map = Transition(label='Restoration Map')
market_analyze = Transition(label='Market Analyze')
auction_review = Transition(label='Auction Review')
value_assess = Transition(label='Value Assess')
report_draft = Transition(label='Report Draft')
board_review = Transition(label='Board Review')
certification = Transition(label='Certification')
release_artifact = Transition(label='Release Artifact')
chain_custody = Transition(label='Chain Custody')

skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[initial_inspect, material_test])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[imaging_scan, skip])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[historical_check, expert_consult])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[provenance_trace, skip])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[forgery_detect, restoration_map])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[market_analyze, skip])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[auction_review, value_assess])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[report_draft, skip])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[board_review, certification])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[release_artifact, skip])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[chain_custody, skip])

root = StrictPartialOrder(nodes=[loop1, xor1, loop2, xor2, loop3, xor3, loop4, xor4, loop5, xor5, loop6])
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)
root.order.add_edge(loop6, xor6)