import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

provenance_check = Transition(label='Provenance Check')
radiocarbon_test = Transition(label='Radiocarbon Test')
material_analysis = Transition(label='Material Analysis')
microscopic_scan = Transition(label='Microscopic Scan')
expert_review = Transition(label='Expert Review')
context_validation = Transition(label='Context Validation')
legal_audit = Transition(label='Legal Audit')
export_verify = Transition(label='Export Verify')
digital_imaging = Transition(label='Digital Imaging')
three_d_modeling = Transition(label='3D Modeling')
consensus_meeting = Transition(label='Consensus Meeting')
final_approval = Transition(label='Final Approval')
catalog_entry = Transition(label='Catalog Entry')
virtual_setup = Transition(label='Virtual Setup')
archival_backup = Transition(label='Archival Backup')

skip = SilentTransition()
loop_provenance = OperatorPOWL(operator=Operator.LOOP, children=[provenance_check, skip])
loop_radiocarbon = OperatorPOWL(operator=Operator.LOOP, children=[radiocarbon_test, skip])
loop_material = OperatorPOWL(operator=Operator.LOOP, children=[material_analysis, skip])
loop_microscopic = OperatorPOWL(operator=Operator.LOOP, children=[microscopic_scan, skip])
loop_expert = OperatorPOWL(operator=Operator.LOOP, children=[expert_review, skip])
loop_legal = OperatorPOWL(operator=Operator.LOOP, children=[legal_audit, skip])
loop_export = OperatorPOWL(operator=Operator.LOOP, children=[export_verify, skip])
loop_digital = OperatorPOWL(operator=Operator.LOOP, children=[digital_imaging, skip])
loop_three_d = OperatorPOWL(operator=Operator.LOOP, children=[three_d_modeling, skip])
loop_consensus = OperatorPOWL(operator=Operator.LOOP, children=[consensus_meeting, skip])

xor_provenance = OperatorPOWL(operator=Operator.XOR, children=[context_validation, skip])
xor_legal = OperatorPOWL(operator=Operator.XOR, children=[legal_audit, skip])
xor_export = OperatorPOWL(operator=Operator.XOR, children=[export_verify, skip])

root = StrictPartialOrder(nodes=[loop_provenance, loop_radiocarbon, loop_material, loop_microscopic, loop_expert, loop_legal, loop_export, loop_digital, loop_three_d, loop_consensus, xor_provenance, xor_legal, xor_export, final_approval, catalog_entry, virtual_setup, archival_backup])
root.order.add_edge(loop_provenance, xor_provenance)
root.order.add_edge(loop_radiocarbon, xor_legal)
root.order.add_edge(loop_material, xor_legal)
root.order.add_edge(loop_microscopic, xor_legal)
root.order.add_edge(loop_expert, xor_legal)
root.order.add_edge(loop_legal, xor_export)
root.order.add_edge(loop_export, xor_legal)
root.order.add_edge(loop_digital, xor_legal)
root.order.add_edge(loop_three_d, xor_legal)
root.order.add_edge(loop_consensus, xor_legal)
root.order.add_edge(xor_provenance, final_approval)
root.order.add_edge(xor_legal, final_approval)
root.order.add_edge(xor_export, final_approval)
root.order.add_edge(final_approval, catalog_entry)
root.order.add_edge(final_approval, virtual_setup)
root.order.add_edge(final_approval, archival_backup)

print(root)