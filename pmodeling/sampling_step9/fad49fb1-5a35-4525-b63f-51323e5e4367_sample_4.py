import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteSurvey = Transition(label='Site Survey')
DesignModules = Transition(label='Design Modules')
SourceMaterials = Transition(label='Source Materials')
InstallFramework = Transition(label='Install Framework')
SetupIrrigation = Transition(label='Setup Irrigation')
IntegrateSensors = Transition(label='Integrate Sensors')
ConfigureAI = Transition(label='Configure AI')
SelectCrops = Transition(label='Select Crops')
CalibrateClimate = Transition(label='Calibrate Climate')
PlantSeeds = Transition(label='Plant Seeds')
MonitorGrowth = Transition(label='Monitor Growth')
ManagePests = Transition(label='Manage Pests')
RecycleWaste = Transition(label='Recycle Waste')
EngageCommunity = Transition(label='Engage Community')
EnsureCompliance = Transition(label='Ensure Compliance')
DistributeProduce = Transition(label='Distribute Produce')
skip = SilentTransition()

siteSurveyLoop = OperatorPOWL(operator=Operator.LOOP, children=[SiteSurvey])
moduleDesignLoop = OperatorPOWL(operator=Operator.LOOP, children=[DesignModules])
materialSourceLoop = OperatorPOWL(operator=Operator.LOOP, children=[SourceMaterials])
frameworkInstallLoop = OperatorPOWL(operator=Operator.LOOP, children=[InstallFramework])
irrigationSetupLoop = OperatorPOWL(operator=Operator.LOOP, children=[SetupIrrigation])
sensorIntegrationLoop = OperatorPOWL(operator=Operator.LOOP, children=[IntegrateSensors])
AIConfigurationLoop = OperatorPOWL(operator=Operator.LOOP, children=[ConfigureAI])
cropSelectionLoop = OperatorPOWL(operator=Operator.LOOP, children=[SelectCrops])
climateCalibrationLoop = OperatorPOWL(operator=Operator.LOOP, children=[CalibrateClimate])
seedPlantingLoop = OperatorPOWL(operator=Operator.LOOP, children=[PlantSeeds])
growthMonitoringLoop = OperatorPOWL(operator=Operator.LOOP, children=[MonitorGrowth])
pestManagementLoop = OperatorPOWL(operator=Operator.LOOP, children=[ManagePests])
wasteRecyclingLoop = OperatorPOWL(operator=Operator.LOOP, children=[RecycleWaste])
communityEngagementLoop = OperatorPOWL(operator=Operator.LOOP, children=[EngageCommunity])
complianceCheckLoop = OperatorPOWL(operator=Operator.LOOP, children=[EnsureCompliance])
produceDistributionLoop = OperatorPOWL(operator=Operator.LOOP, children=[DistributeProduce])

root = StrictPartialOrder(nodes=[siteSurveyLoop, moduleDesignLoop, materialSourceLoop, frameworkInstallLoop, irrigationSetupLoop, sensorIntegrationLoop, AIConfigurationLoop, cropSelectionLoop, climateCalibrationLoop, seedPlantingLoop, growthMonitoringLoop, pestManagementLoop, wasteRecyclingLoop, communityEngagementLoop, complianceCheckLoop, produceDistributionLoop])
root.order.add_edge(siteSurveyLoop, moduleDesignLoop)
root.order.add_edge(moduleDesignLoop, materialSourceLoop)
root.order.add_edge(materialSourceLoop, frameworkInstallLoop)
root.order.add_edge(frameworkInstallLoop, irrigationSetupLoop)
root.order.add_edge(irrigationSetupLoop, sensorIntegrationLoop)
root.order.add_edge(sensorIntegrationLoop, AIConfigurationLoop)
root.order.add_edge(AIConfigurationLoop, cropSelectionLoop)
root.order.add_edge(cropSelectionLoop, climateCalibrationLoop)
root.order.add_edge(climateCalibrationLoop, seedPlantingLoop)
root.order.add_edge(seedPlantingLoop, growthMonitoringLoop)
root.order.add_edge(growthMonitoringLoop, pestManagementLoop)
root.order.add_edge(pestManagementLoop, wasteRecyclingLoop)
root.order.add_edge(wasteRecyclingLoop, communityEngagementLoop)
root.order.add_edge(communityEngagementLoop, complianceCheckLoop)
root.order.add_edge(complianceCheckLoop, produceDistributionLoop)