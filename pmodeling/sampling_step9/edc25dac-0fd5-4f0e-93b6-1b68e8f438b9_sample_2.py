import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

LoadAssess = Transition(label='Load Assess')
PermitReview = Transition(label='Permit Review')
SiteSurvey = Transition(label='Site Survey')
DesignLayout = Transition(label='Design Layout')
SoilMix = Transition(label='Soil Mix')
InstallBeds = Transition(label='Install Beds')
IrrigationSet = Transition(label='Irrigation Set')
ClimateTest = Transition(label='Climate Test')
SensorDeploy = Transition(label='Sensor Deploy')
EnergySetup = Transition(label='Energy Setup')
CropSelect = Transition(label='Crop Select')
PlantSeeding = Transition(label='Plant Seeding')
CommunityMeet = Transition(label='Community Meet')
ComplianceCheck = Transition(label='Compliance Check')
GrowthMonitor = Transition(label='Growth Monitor')
HarvestPlan = Transition(label='Harvest Plan')
WasteRecycle = Transition(label='Waste Recycle')
skip = SilentTransition()

load_assess_loop = OperatorPOWL(operator=Operator.LOOP, children=[LoadAssess, PermitReview])
site_survey_loop = OperatorPOWL(operator=Operator.LOOP, children=[SiteSurvey, skip])
design_layout_loop = OperatorPOWL(operator=Operator.LOOP, children=[DesignLayout, skip])
soil_mix_loop = OperatorPOWL(operator=Operator.LOOP, children=[SoilMix, skip])
install_beds_loop = OperatorPOWL(operator=Operator.LOOP, children=[InstallBeds, skip])
irrigation_set_loop = OperatorPOWL(operator=Operator.LOOP, children=[IrrigationSet, skip])
climate_test_loop = OperatorPOWL(operator=Operator.LOOP, children=[ClimateTest, skip])
sensor_deploy_loop = OperatorPOWL(operator=Operator.LOOP, children=[SensorDeploy, skip])
energy_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[EnergySetup, skip])
crop_select_loop = OperatorPOWL(operator=Operator.LOOP, children=[CropSelect, skip])
plant_seeding_loop = OperatorPOWL(operator=Operator.LOOP, children=[PlantSeeding, skip])
community_meet_loop = OperatorPOWL(operator=Operator.LOOP, children=[CommunityMeet, skip])
compliance_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[ComplianceCheck, skip])
growth_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[GrowthMonitor, skip])
harvest_plan_loop = OperatorPOWL(operator=Operator.LOOP, children=[HarvestPlan, skip])
waste_recycle_loop = OperatorPOWL(operator=Operator.LOOP, children=[WasteRecycle, skip])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[load_assess_loop, site_survey_loop])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[design_layout_loop, soil_mix_loop])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[install_beds_loop, irrigation_set_loop])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[climate_test_loop, sensor_deploy_loop])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[energy_setup_loop, crop_select_loop])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[plant_seeding_loop, community_meet_loop])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check_loop, growth_monitor_loop])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[harvest_plan_loop, waste_recycle_loop])

root = StrictPartialOrder(nodes=[xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor3, xor6)
root.order.add_edge(xor3, xor7)
root.order.add_edge(xor4, xor8)
root.order.add_edge(xor5, xor8)
root.order.add_edge(xor6, xor8)
root.order.add_edge(xor7, xor8)