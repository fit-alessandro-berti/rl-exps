import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

client_intake = Transition(label='Client Intake')
needs_analysis = Transition(label='Needs Analysis')
developer_match = Transition(label='Developer Match')
expert_vetting = Transition(label='Expert Vetting')
prototype_build = Transition(label='Prototype Build')
feedback_loop = Transition(label='Feedback Loop')
model_refinement = Transition(label='Model Refinement')
license_draft = Transition(label='License Draft')
ip_negotiation = Transition(label='IP Negotiation')
contract_sign = Transition(label='Contract Sign')
deployment_prep = Transition(label='Deployment Prep')
go_live = Transition(label='Go Live')
monitor_model = Transition(label='Monitor Model')
optimize_ai = Transition(label='Optimize AI')
support_handoff = Transition(label='Support Handoff')
compliance_check = Transition(label='Compliance Check')
final_review = Transition(label='Final Review')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[prototype_build, feedback_loop])
xor = OperatorPOWL(operator=Operator.XOR, children=[model_refinement, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[license_draft, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[ip_negotiation, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[contract_sign, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[deployment_prep, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[go_live, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[monitor_model, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[optimize_ai, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[support_handoff, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[final_review, skip])

root = StrictPartialOrder(nodes=[client_intake, needs_analysis, developer_match, expert_vetting, loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11])
root.order.add_edge(client_intake, needs_analysis)
root.order.add_edge(needs_analysis, developer_match)
root.order.add_edge(developer_match, expert_vetting)
root.order.add_edge(expert_vetting, loop)
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, final_review)