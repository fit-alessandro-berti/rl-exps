import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
structural_check = Transition(label='Structural Check')
iot_setup = Transition(label='IoT Setup')
crop_selection = Transition(label='Crop Selection')
hydroponic_install = Transition(label='Hydroponic Install')
water_recycling = Transition(label='Water Recycling')
energy_audit = Transition(label='Energy Audit')
plant_scheduling = Transition(label='Plant Scheduling')
yield_monitoring = Transition(label='Yield Monitoring')
regulation_review = Transition(label='Regulation Review')
staff_training = Transition(label='Staff Training')
data_integration = Transition(label='Data Integration')
supply_setup = Transition(label='Supply Setup')
quality_audit = Transition(label='Quality Audit')
logistics_plan = Transition(label='Logistics Plan')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, structural_check])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[iot_setup, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[crop_selection, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[hydroponic_install, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[water_recycling, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[plant_scheduling, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[yield_monitoring, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[regulation_review, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[staff_training, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[data_integration, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[supply_setup, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[quality_audit, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, xor12])

root = StrictPartialOrder(nodes=[loop, xor13])
root.order.add_edge(loop, xor13)

print(root)