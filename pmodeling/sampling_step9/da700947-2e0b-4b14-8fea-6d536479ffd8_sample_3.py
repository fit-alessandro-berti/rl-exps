import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions (activities)
site_survey = Transition(label='Site Survey')
structural_audit = Transition(label='Structural Audit')
climate_design = Transition(label='Climate Design')
lighting_setup = Transition(label='Lighting Setup')
irrigation_plan = Transition(label='Irrigation Plan')
nutrient_mix = Transition(label='Nutrient Mix')
sensor_install = Transition(label='Sensor Install')
ai_calibration = Transition(label='AI Calibration')
pest_scan = Transition(label='Pest Scan')
energy_audit = Transition(label='Energy Audit')
renewable_sync = Transition(label='Renewable Sync')
data_modeling = Transition(label='Data Modeling')
staff_briefing = Transition(label='Staff Briefing')
compliance_check = Transition(label='Compliance Check')
community_meet = Transition(label='Community Meet')
yield_review = Transition(label='Yield Review')
feedback_loop = Transition(label='Feedback Loop')

# Define silent transitions
skip = SilentTransition()

# Define the loop and choice nodes
loop = OperatorPOWL(operator=Operator.LOOP, children=[climate_design, structural_audit])
xor = OperatorPOWL(operator=Operator.XOR, children=[lighting_setup, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[irrigation_plan, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[sensor_install, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[ai_calibration, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[pest_scan, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[renewable_sync, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[data_modeling, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[staff_briefing, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[community_meet, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[yield_review, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, skip])

# Define the root POWL model
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, loop)