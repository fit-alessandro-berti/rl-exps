import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
verify_provenance = Transition(label='Verify Provenance')
assess_condition = Transition(label='Assess Condition')
negotiate_terms = Transition(label='Negotiate Terms')
arrange_transport = Transition(label='Arrange Transport')
customs_clearance = Transition(label='Customs Clearance')
secure_insurance = Transition(label='Secure Insurance')
schedule_handlers = Transition(label='Schedule Handlers')
install_artwork = Transition(label='Install Artwork')
monitor_climate = Transition(label='Monitor Climate')
manage_security = Transition(label='Manage Security')
facilitate_access = Transition(label='Facilitate Access')
document_display = Transition(label='Document Display')
coordinate_events = Transition(label='Coordinate Events')
inspect_periodically = Transition(label='Inspect Periodically')
plan_return = Transition(label='Plan Return')
deinstall_artwork = Transition(label='Deinstall Artwork')
finalize_reports = Transition(label='Finalize Reports')

# Define the silent transitions
skip_verify_provenance = SilentTransition()
skip_assess_condition = SilentTransition()
skip_negotiate_terms = SilentTransition()
skip_arrange_transport = SilentTransition()
skip_customs_clearance = SilentTransition()
skip_secure_insurance = SilentTransition()
skip_schedule_handlers = SilentTransition()
skip_install_artwork = SilentTransition()
skip_monitor_climate = SilentTransition()
skip_manage_security = SilentTransition()
skip_facilitate_access = SilentTransition()
skip_document_display = SilentTransition()
skip_coordinate_events = SilentTransition()
skip_inspect_periodically = SilentTransition()
skip_plan_return = SilentTransition()
skip_deinstall_artwork = SilentTransition()
skip_finalize_reports = SilentTransition()

# Define the exclusive choice nodes
xor_verify_provenance = OperatorPOWL(operator=Operator.XOR, children=[verify_provenance, skip_verify_provenance])
xor_assess_condition = OperatorPOWL(operator=Operator.XOR, children=[assess_condition, skip_assess_condition])
xor_negotiate_terms = OperatorPOWL(operator=Operator.XOR, children=[negotiate_terms, skip_negotiate_terms])
xor_arrange_transport = OperatorPOWL(operator=Operator.XOR, children=[arrange_transport, skip_arrange_transport])
xor_customs_clearance = OperatorPOWL(operator=Operator.XOR, children=[customs_clearance, skip_customs_clearance])
xor_secure_insurance = OperatorPOWL(operator=Operator.XOR, children=[secure_insurance, skip_secure_insurance])
xor_schedule_handlers = OperatorPOWL(operator=Operator.XOR, children=[schedule_handlers, skip_schedule_handlers])
xor_install_artwork = OperatorPOWL(operator=Operator.XOR, children=[install_artwork, skip_install_artwork])
xor_monitor_climate = OperatorPOWL(operator=Operator.XOR, children=[monitor_climate, skip_monitor_climate])
xor_manage_security = OperatorPOWL(operator=Operator.XOR, children=[manage_security, skip_manage_security])
xor_facilitate_access = OperatorPOWL(operator=Operator.XOR, children=[facilitate_access, skip_facilitate_access])
xor_document_display = OperatorPOWL(operator=Operator.XOR, children=[document_display, skip_document_display])
xor_coordinate_events = OperatorPOWL(operator=Operator.XOR, children=[coordinate_events, skip_coordinate_events])
xor_inspect_periodically = OperatorPOWL(operator=Operator.XOR, children=[inspect_periodically, skip_inspect_periodically])
xor_plan_return = OperatorPOWL(operator=Operator.XOR, children=[plan_return, skip_plan_return])
xor_deinstall_artwork = OperatorPOWL(operator=Operator.XOR, children=[deinstall_artwork, skip_deinstall_artwork])
xor_finalize_reports = OperatorPOWL(operator=Operator.XOR, children=[finalize_reports, skip_finalize_reports])

# Define the loop nodes
loop_verify_provenance = OperatorPOWL(operator=Operator.LOOP, children=[xor_verify_provenance])
loop_assess_condition = OperatorPOWL(operator=Operator.LOOP, children=[xor_assess_condition])
loop_negotiate_terms = OperatorPOWL(operator=Operator.LOOP, children=[xor_negotiate_terms])
loop_arrange_transport = OperatorPOWL(operator=Operator.LOOP, children=[xor_arrange_transport])
loop_customs_clearance = OperatorPOWL(operator=Operator.LOOP, children=[xor_customs_clearance])
loop_secure_insurance = OperatorPOWL(operator=Operator.LOOP, children=[xor_secure_insurance])
loop_schedule_handlers = OperatorPOWL(operator=Operator.LOOP, children=[xor_schedule_handlers])
loop_install_artwork = OperatorPOWL(operator=Operator.LOOP, children=[xor_install_artwork])
loop_monitor_climate = OperatorPOWL(operator=Operator.LOOP, children=[xor_monitor_climate])
loop_manage_security = OperatorPOWL(operator=Operator.LOOP, children=[xor_manage_security])
loop_facilitate_access = OperatorPOWL(operator=Operator.LOOP, children=[xor_facilitate_access])
loop_document_display = OperatorPOWL(operator=Operator.LOOP, children=[xor_document_display])
loop_coordinate_events = OperatorPOWL(operator=Operator.LOOP, children=[xor_coordinate_events])
loop_inspect_periodically = OperatorPOWL(operator=Operator.LOOP, children=[xor_inspect_periodically])
loop_plan_return = OperatorPOWL(operator=Operator.LOOP, children=[xor_plan_return])
loop_deinstall_artwork = OperatorPOWL(operator=Operator.LOOP, children=[xor_deinstall_artwork])
loop_finalize_reports = OperatorPOWL(operator=Operator.LOOP, children=[xor_finalize_reports])

# Define the root node
root = StrictPartialOrder(nodes=[loop_verify_provenance, loop_assess_condition, loop_negotiate_terms, loop_arrange_transport, loop_customs_clearance, loop_secure_insurance, loop_schedule_handlers, loop_install_artwork, loop_monitor_climate, loop_manage_security, loop_facilitate_access, loop_document_display, loop_coordinate_events, loop_inspect_periodically, loop_plan_return, loop_deinstall_artwork, loop_finalize_reports])
root.order.add_edge(loop_verify_provenance, loop_assess_condition)
root.order.add_edge(loop_assess_condition, loop_negotiate_terms)
root.order.add_edge(loop_negotiate_terms, loop_arrange_transport)
root.order.add_edge(loop_arrange_transport, loop_customs_clearance)
root.order.add_edge(loop_customs_clearance, loop_secure_insurance)
root.order.add_edge(loop_secure_insurance, loop_schedule_handlers)
root.order.add_edge(loop_schedule_handlers, loop_install_artwork)
root.order.add_edge(loop_install_artwork, loop_monitor_climate)
root.order.add_edge(loop_monitor_climate, loop_manage_security)
root.order.add_edge(loop_manage_security, loop_facilitate_access)
root.order.add_edge(loop_facilitate_access, loop_document_display)
root.order.add_edge(loop_document_display, loop_coordinate_events)
root.order.add_edge(loop_coordinate_events, loop_inspect_periodically)
root.order.add_edge(loop_inspect_periodically, loop_plan_return)
root.order.add_edge(loop_plan_return, loop_deinstall_artwork)
root.order.add_edge(loop_deinstall_artwork, loop_finalize_reports)