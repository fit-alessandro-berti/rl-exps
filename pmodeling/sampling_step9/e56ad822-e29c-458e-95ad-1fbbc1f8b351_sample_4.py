import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Submit_Artifact = Transition(label='Submit Artifact')
Initial_Review = Transition(label='Initial Review')
Provenance_Check = Transition(label='Provenance Check')
Material_Scan = Transition(label='Material Scan')
Context_Analysis = Transition(label='Context Analysis')
Expert_Panel = Transition(label='Expert Panel')
Digital_Fingerprint = Transition(label='Digital Fingerprint')
AI_Pattern = Transition(label='AI Pattern')
Legal_Audit = Transition(label='Legal Audit')
Ethics_Review = Transition(label='Ethics Review')
Fraud_Detection = Transition(label='Fraud Detection')
Blockchain_Log = Transition(label='Blockchain Log')
Certification = Transition(label='Certification')
Owner_Notify = Transition(label='Owner Notify')
Archive_Data = Transition(label='Archive Data')
Secure_Storage = Transition(label='Secure Storage')

skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[Submit_Artifact, Initial_Review])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[Provenance_Check, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Material_Scan, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Context_Analysis, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Expert_Panel, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Digital_Fingerprint, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[AI_Pattern, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Legal_Audit, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Ethics_Review, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Fraud_Detection, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Blockchain_Log, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Certification, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Owner_Notify, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Archive_Data, xor12])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[Secure_Storage, xor13])
root = StrictPartialOrder(nodes=[loop1, xor14])
root.order.add_edge(loop1, xor14)

print(root)