import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Milk_Collection = Transition(label='Milk Collection')
Quality_Testing = Transition(label='Quality Testing')
Milk_Blending = Transition(label='Milk Blending')
Starter_Culture = Transition(label='Starter Culture')
Fermentation_Check = Transition(label='Fermentation Check')
Curd_Cutting = Transition(label='Curd Cutting')
Whey_Separation = Transition(label='Whey Separation')
Molding_Press = Transition(label='Molding Press')
Salting_Stage = Transition(label='Salting Stage')
Aging_Control = Transition(label='Aging Control')
Packaging_Design = Transition(label='Packaging Design')
Cold_Shipping = Transition(label='Cold Shipping')
Compliance_Audit = Transition(label='Compliance Audit')
Blockchain_Log = Transition(label='Blockchain Log')
Market_Pricing = Transition(label='Market Pricing')
Order_Fulfillment = Transition(label='Order Fulfillment')
Feedback_Review = Transition(label='Feedback Review')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Collection, Quality_Testing])
xor = OperatorPOWL(operator=Operator.XOR, children=[Milk_Blending, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Starter_Culture, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Fermentation_Check, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Curd_Cutting, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Whey_Separation, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Molding_Press, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Salting_Stage, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Aging_Control, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Packaging_Design, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Cold_Shipping, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Compliance_Audit, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Blockchain_Log, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Market_Pricing, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[Order_Fulfillment, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[Feedback_Review, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)