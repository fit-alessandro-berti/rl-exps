import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

intake = Transition(label='Intake Review')
condition_scan = Transition(label='Condition Scan')
material_test = Transition(label='Material Test')
style_match = Transition(label='Style Match')
provenance_log = Transition(label='Provenance Log')
forger_risk = Transition(label='Forgery Risk')
legal_audit = Transition(label='Legal Audit')
expert_panel = Transition(label='Expert Panel')
crosscheck = Transition(label='Data Crosscheck')
report_draft = Transition(label='Report Draft')
blockchain_tag = Transition(label='Blockchain Tag')
certification = Transition(label='Certification')
client_feedback = Transition(label='Client Feedback')
final_approval = Transition(label='Final Approval')
release_prep = Transition(label='Release Prep')
skip = SilentTransition()

intake_condition = OperatorPOWL(operator=Operator.XOR, children=[intake, condition_scan])
condition_test = OperatorPOWL(operator=Operator.XOR, children=[condition_scan, material_test])
test_style = OperatorPOWL(operator=Operator.XOR, children=[material_test, style_match])
style_provenance = OperatorPOWL(operator=Operator.XOR, children=[style_match, provenance_log])
provenance_risk = OperatorPOWL(operator=Operator.XOR, children=[provenance_log, forger_risk])
risk_audit = OperatorPOWL(operator=Operator.XOR, children=[forger_risk, legal_audit])
audit_panel = OperatorPOWL(operator=Operator.XOR, children=[legal_audit, expert_panel])
audit_crosscheck = OperatorPOWL(operator=Operator.XOR, children=[expert_panel, crosscheck])
crosscheck_report = OperatorPOWL(operator=Operator.XOR, children=[crosscheck, report_draft])
report_blockchain = OperatorPOWL(operator=Operator.XOR, children=[report_draft, blockchain_tag])
blockchain_certify = OperatorPOWL(operator=Operator.XOR, children=[blockchain_tag, certification])
certification_feedback = OperatorPOWL(operator=Operator.XOR, children=[certification, client_feedback])
feedback_final = OperatorPOWL(operator=Operator.XOR, children=[client_feedback, final_approval])
final_release = OperatorPOWL(operator=Operator.XOR, children=[final_approval, release_prep])

root = StrictPartialOrder(nodes=[intake_condition, condition_test, test_style, style_provenance, provenance_risk, risk_audit, audit_panel, audit_crosscheck, crosscheck_report, report_blockchain, blockchain_certify, certification_feedback, feedback_final, final_release])
root.order.add_edge(intake_condition, condition_test)
root.order.add_edge(condition_test, test_style)
root.order.add_edge(test_style, style_provenance)
root.order.add_edge(style_provenance, provenance_risk)
root.order.add_edge(provenance_risk, risk_audit)
root.order.add_edge(risk_audit, audit_panel)
root.order.add_edge(audit_panel, audit_crosscheck)
root.order.add_edge(audit_crosscheck, crosscheck_report)
root.order.add_edge(crosscheck_report, report_blockchain)
root.order.add_edge(report_blockchain, blockchain_certify)
root.order.add_edge(blockchain_certify, certification_feedback)
root.order.add_edge(certification_feedback, feedback_final)
root.order.add_edge(feedback_final, final_release)