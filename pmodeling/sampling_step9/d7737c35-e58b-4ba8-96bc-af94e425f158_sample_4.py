import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

MilkSourcing = Transition(label='Milk Sourcing')
SupplierAudit = Transition(label='Supplier Audit')
CulturePrep = Transition(label='Culture Prep')
MilkTesting = Transition(label='Milk Testing')
FermentationStart = Transition(label='Fermentation Start')
pHMonitoring = Transition(label='pH Monitoring')
CurdCutting = Transition(label='Curd Cutting')
MoldInoculation = Transition(label='Mold Inoculation')
AgingSetup = Transition(label='Aging Setup')
HumidityControl = Transition(label='Humidity Control')
TextureCheck = Transition(label='Texture Check')
FlavorProfiling = Transition(label='Flavor Profiling')
BatchLabeling = Transition(label='Batch Labeling')
Packaging = Transition(label='Packaging')
Distribution = Transition(label='Distribution')
FeedbackReview = Transition(label='Feedback Review')
SustainabilityAudit = Transition(label='Sustainability Audit')

skip = SilentTransition()

supplierAuditLoop = OperatorPOWL(operator=Operator.LOOP, children=[SupplierAudit, skip])
culturePrepLoop = OperatorPOWL(operator=Operator.LOOP, children=[CulturePrep, skip])
milkTestingLoop = OperatorPOWL(operator=Operator.LOOP, children=[MilkTesting, skip])
fermentationStartLoop = OperatorPOWL(operator=Operator.LOOP, children=[FermentationStart, skip])
pHMonitoringLoop = OperatorPOWL(operator=Operator.LOOP, children=[pHMonitoring, skip])
curdCuttingLoop = OperatorPOWL(operator=Operator.LOOP, children=[CurdCutting, skip])
moldInoculationLoop = OperatorPOWL(operator=Operator.LOOP, children=[MoldInoculation, skip])
agingSetupLoop = OperatorPOWL(operator=Operator.LOOP, children=[AgingSetup, skip])
humidityControlLoop = OperatorPOWL(operator=Operator.LOOP, children=[HumidityControl, skip])
textureCheckLoop = OperatorPOWL(operator=Operator.LOOP, children=[TextureCheck, skip])
flavorProfilingLoop = OperatorPOWL(operator=Operator.LOOP, children=[FlavorProfiling, skip])
batchLabelingLoop = OperatorPOWL(operator=Operator.LOOP, children=[BatchLabeling, skip])
packagingLoop = OperatorPOWL(operator=Operator.LOOP, children=[Packaging, skip])
distributionLoop = OperatorPOWL(operator=Operator.LOOP, children=[Distribution, skip])
feedbackReviewLoop = OperatorPOWL(operator=Operator.LOOP, children=[FeedbackReview, skip])
sustainabilityAuditLoop = OperatorPOWL(operator=Operator.LOOP, children=[SustainabilityAudit, skip])

xor = OperatorPOWL(operator=Operator.XOR, children=[MilkSourcing, supplierAuditLoop, culturePrepLoop, milkTestingLoop, fermentationStartLoop, pHMonitoringLoop, curdCuttingLoop, moldInoculationLoop, agingSetupLoop, humidityControlLoop, textureCheckLoop, flavorProfilingLoop, batchLabelingLoop, packagingLoop, distributionLoop, feedbackReviewLoop, sustainabilityAuditLoop])

root = StrictPartialOrder(nodes=[xor])
root.order.add_edge(xor, supplierAuditLoop)
root.order.add_edge(xor, culturePrepLoop)
root.order.add_edge(xor, milkTestingLoop)
root.order.add_edge(xor, fermentationStartLoop)
root.order.add_edge(xor, pHMonitoringLoop)
root.order.add_edge(xor, curdCuttingLoop)
root.order.add_edge(xor, moldInoculationLoop)
root.order.add_edge(xor, agingSetupLoop)
root.order.add_edge(xor, humidityControlLoop)
root.order.add_edge(xor, textureCheckLoop)
root.order.add_edge(xor, flavorProfilingLoop)
root.order.add_edge(xor, batchLabelingLoop)
root.order.add_edge(xor, packagingLoop)
root.order.add_edge(xor, distributionLoop)
root.order.add_edge(xor, feedbackReviewLoop)
root.order.add_edge(xor, sustainabilityAuditLoop)