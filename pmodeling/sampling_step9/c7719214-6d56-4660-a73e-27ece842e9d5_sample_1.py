import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
Milk_Sourcing = Transition(label='Milk Sourcing')
Diet_Monitoring = Transition(label='Diet Monitoring')
Culture_Selection = Transition(label='Culture Selection')
Milk_Pasteurize = Transition(label='Milk Pasteurize')
Curd_Cutting = Transition(label='Curd Cutting')
Whey_Draining = Transition(label='Whey Draining')
Mold_Inoculate = Transition(label='Mold Inoculate')
Press_Forming = Transition(label='Press Forming')
Salt_Application = Transition(label='Salt Application')
Aging_Setup = Transition(label='Aging Setup')
Humidity_Control = Transition(label='Humidity Control')
Flavor_Testing = Transition(label='Flavor Testing')
Packaging_Design = Transition(label='Packaging Design')
Order_Processing = Transition(label='Order Processing')
Retail_Delivery = Transition(label='Retail Delivery')
Event_Coordination = Transition(label='Event Coordination')
Feedback_Review = Transition(label='Feedback Review')

# Define silent transitions
skip = SilentTransition()

# Define loops and exclusive choices
loop_diet_monitoring = OperatorPOWL(operator=Operator.LOOP, children=[Diet_Monitoring])
loop_culture_selection = OperatorPOWL(operator=Operator.LOOP, children=[Culture_Selection])
loop_milk_pasteurize = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Pasteurize])
loop_curd_cutting = OperatorPOWL(operator=Operator.LOOP, children=[Curd_Cutting])
loop_whey_draining = OperatorPOWL(operator=Operator.LOOP, children=[Whey_Draining])
loop_mold_inoculate = OperatorPOWL(operator=Operator.LOOP, children=[Mold_Inoculate])
loop_press_forming = OperatorPOWL(operator=Operator.LOOP, children=[Press_Forming])
loop_salt_application = OperatorPOWL(operator=Operator.LOOP, children=[Salt_Application])
loop_aging_setup = OperatorPOWL(operator=Operator.LOOP, children=[Aging_Setup])
loop_humidity_control = OperatorPOWL(operator=Operator.LOOP, children=[Humidity_Control])
loop_flavor_testing = OperatorPOWL(operator=Operator.LOOP, children=[Flavor_Testing])
loop_packaging_design = OperatorPOWL(operator=Operator.LOOP, children=[Packaging_Design])
loop_order_processing = OperatorPOWL(operator=Operator.LOOP, children=[Order_Processing])
loop_retail_delivery = OperatorPOWL(operator=Operator.LOOP, children=[Retail_Delivery])
loop_event_coordination = OperatorPOWL(operator=Operator.LOOP, children=[Event_Coordination])
loop_feedback_review = OperatorPOWL(operator=Operator.LOOP, children=[Feedback_Review])

# Define exclusive choices
xor_diet_monitoring = OperatorPOWL(operator=Operator.XOR, children=[loop_diet_monitoring, skip])
xor_culture_selection = OperatorPOWL(operator=Operator.XOR, children=[loop_culture_selection, skip])
xor_milk_pasteurize = OperatorPOWL(operator=Operator.XOR, children=[loop_milk_pasteurize, skip])
xor_curd_cutting = OperatorPOWL(operator=Operator.XOR, children=[loop_curd_cutting, skip])
xor_whey_draining = OperatorPOWL(operator=Operator.XOR, children=[loop_whey_draining, skip])
xor_mold_inoculate = OperatorPOWL(operator=Operator.XOR, children=[loop_mold_inoculate, skip])
xor_press_forming = OperatorPOWL(operator=Operator.XOR, children=[loop_press_forming, skip])
xor_salt_application = OperatorPOWL(operator=Operator.XOR, children=[loop_salt_application, skip])
xor_aging_setup = OperatorPOWL(operator=Operator.XOR, children=[loop_aging_setup, skip])
xor_humidity_control = OperatorPOWL(operator=Operator.XOR, children=[loop_humidity_control, skip])
xor_flavor_testing = OperatorPOWL(operator=Operator.XOR, children=[loop_flavor_testing, skip])
xor_packaging_design = OperatorPOWL(operator=Operator.XOR, children=[loop_packaging_design, skip])
xor_order_processing = OperatorPOWL(operator=Operator.XOR, children=[loop_order_processing, skip])
xor_retail_delivery = OperatorPOWL(operator=Operator.XOR, children=[loop_retail_delivery, skip])
xor_event_coordination = OperatorPOWL(operator=Operator.XOR, children=[loop_event_coordination, skip])
xor_feedback_review = OperatorPOWL(operator=Operator.XOR, children=[loop_feedback_review, skip])

# Define the root node
root = StrictPartialOrder(nodes=[xor_diet_monitoring, xor_culture_selection, xor_milk_pasteurize, xor_curd_cutting, xor_whey_draining, xor_mold_inoculate, xor_press_forming, xor_salt_application, xor_aging_setup, xor_humidity_control, xor_flavor_testing, xor_packaging_design, xor_order_processing, xor_retail_delivery, xor_event_coordination, xor_feedback_review])
root.order.add_edge(xor_diet_monitoring, xor_culture_selection)
root.order.add_edge(xor_culture_selection, xor_milk_pasteurize)
root.order.add_edge(xor_milk_pasteurize, xor_curd_cutting)
root.order.add_edge(xor_curd_cutting, xor_whey_draining)
root.order.add_edge(xor_whey_draining, xor_mold_inoculate)
root.order.add_edge(xor_mold_inoculate, xor_press_forming)
root.order.add_edge(xor_press_forming, xor_salt_application)
root.order.add_edge(xor_salt_application, xor_aging_setup)
root.order.add_edge(xor_aging_setup, xor_humidity_control)
root.order.add_edge(xor_humidity_control, xor_flavor_testing)
root.order.add_edge(xor_flavor_testing, xor_packaging_design)
root.order.add_edge(xor_packaging_design, xor_order_processing)
root.order.add_edge(xor_order_processing, xor_retail_delivery)
root.order.add_edge(xor_retail_delivery, xor_event_coordination)
root.order.add_edge(xor_event_coordination, xor_feedback_review)

print(root)