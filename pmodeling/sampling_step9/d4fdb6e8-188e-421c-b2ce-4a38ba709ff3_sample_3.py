import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_receipt = Transition(label='Artifact Receipt')
initial_inspection = Transition(label='Initial Inspection')
material_testing = Transition(label='Material Testing')
provenance_check = Transition(label='Provenance Check')
digital_imaging = Transition(label='Digital Imaging')
database_search = Transition(label='Database Search')
expert_consult = Transition(label='Expert Consult')
legal_review = Transition(label='Legal Review')
cultural_audit = Transition(label='Cultural Audit')
condition_report = Transition(label='Condition Report')
risk_assessment = Transition(label='Risk Assessment')
insurance_setup = Transition(label='Insurance Setup')
transport_plan = Transition(label='Transport Plan')
final_certification = Transition(label='Final Certification')
archive_entry = Transition(label='Archive Entry')
publication_prep = Transition(label='Publication Prep')

skip = SilentTransition()

artifact_receipt_to_initial_inspection = OperatorPOWL(operator=Operator.XOR, children=[artifact_receipt, initial_inspection])
initial_inspection_to_material_testing = OperatorPOWL(operator=Operator.XOR, children=[initial_inspection, material_testing])
material_testing_to_provenance_check = OperatorPOWL(operator=Operator.XOR, children=[material_testing, provenance_check])
provenance_check_to_digital_imaging = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, digital_imaging])
digital_imaging_to_database_search = OperatorPOWL(operator=Operator.XOR, children=[digital_imaging, database_search])
database_search_to_expert_consult = OperatorPOWL(operator=Operator.XOR, children=[database_search, expert_consult])
expert_consult_to_legal_review = OperatorPOWL(operator=Operator.XOR, children=[expert_consult, legal_review])
legal_review_to_cultural_audit = OperatorPOWL(operator=Operator.XOR, children=[legal_review, cultural_audit])
cultural_audit_to_condition_report = OperatorPOWL(operator=Operator.XOR, children=[cultural_audit, condition_report])
condition_report_to_risk_assessment = OperatorPOWL(operator=Operator.XOR, children=[condition_report, risk_assessment])
risk_assessment_to_insurance_setup = OperatorPOWL(operator=Operator.XOR, children=[risk_assessment, insurance_setup])
insurance_setup_to_transport_plan = OperatorPOWL(operator=Operator.XOR, children=[insurance_setup, transport_plan])
transport_plan_to_final_certification = OperatorPOWL(operator=Operator.XOR, children=[transport_plan, final_certification])
final_certification_to_archive_entry = OperatorPOWL(operator=Operator.XOR, children=[final_certification, archive_entry])
archive_entry_to_publication_prep = OperatorPOWL(operator=Operator.XOR, children=[archive_entry, publication_prep])

root = StrictPartialOrder(nodes=[artifact_receipt_to_initial_inspection, initial_inspection_to_material_testing, material_testing_to_provenance_check, provenance_check_to_digital_imaging, digital_imaging_to_database_search, database_search_to_expert_consult, expert_consult_to_legal_review, legal_review_to_cultural_audit, cultural_audit_to_condition_report, condition_report_to_risk_assessment, risk_assessment_to_insurance_setup, insurance_setup_to_transport_plan, transport_plan_to_final_certification, final_certification_to_archive_entry, archive_entry_to_publication_prep])
root.order.add_edge(artifact_receipt_to_initial_inspection, initial_inspection_to_material_testing)
root.order.add_edge(initial_inspection_to_material_testing, material_testing_to_provenance_check)
root.order.add_edge(material_testing_to_provenance_check, provenance_check_to_digital_imaging)
root.order.add_edge(provenance_check_to_digital_imaging, digital_imaging_to_database_search)
root.order.add_edge(digital_imaging_to_database_search, database_search_to_expert_consult)
root.order.add_edge(database_search_to_expert_consult, expert_consult_to_legal_review)
root.order.add_edge(expert_consult_to_legal_review, legal_review_to_cultural_audit)
root.order.add_edge(legal_review_to_cultural_audit, cultural_audit_to_condition_report)
root.order.add_edge(cultural_audit_to_condition_report, condition_report_to_risk_assessment)
root.order.add_edge(condition_report_to_risk_assessment, risk_assessment_to_insurance_setup)
root.order.add_edge(risk_assessment_to_insurance_setup, insurance_setup_to_transport_plan)
root.order.add_edge(insurance_setup_to_transport_plan, transport_plan_to_final_certification)
root.order.add_edge(transport_plan_to_final_certification, final_certification_to_archive_entry)
root.order.add_edge(final_certification_to_archive_entry, archive_entry_to_publication_prep)