import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteSurvey = Transition(label='Site Survey')
ClimatePlan = Transition(label='Climate Plan')
SystemDesign = Transition(label='System Design')
AISetup = Transition(label='AI Setup')
SeedSourcing = Transition(label='Seed Sourcing')
NutrientMix = Transition(label='Nutrient Mix')
InstallHydro = Transition(label='Install Hydro')
EnergyAudit = Transition(label='Energy Audit')
StaffTraining = Transition(label='Staff Training')
TrialGrowth = Transition(label='Trial Growth')
YieldMeasure = Transition(label='Yield Measure')
WasteCycle = Transition(label='Waste Cycle')
ComplianceCheck = Transition(label='Compliance Check')
MarketStudy = Transition(label='Market Study')
CommunityMeet = Transition(label='Community Meet')
OptimizeEnvironment = Transition(label='Optimize Environment')

skip = SilentTransition()
xor1 = OperatorPOWL(operator=Operator.XOR, children=[ClimatePlan, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[SystemDesign, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[AISetup, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[SeedSourcing, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[InstallHydro, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[EnergyAudit, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[StaffTraining, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[TrialGrowth, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[YieldMeasure, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[WasteCycle, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[ComplianceCheck, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[MarketStudy, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[CommunityMeet, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[OptimizeEnvironment, skip])

root = StrictPartialOrder(nodes=[xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)