import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

concept_ideation = Transition(label='Concept Ideation')
sponsor_alignment = Transition(label='Sponsor Alignment')
participant_sign_up = Transition(label='Participant SignUp')
team_formation = Transition(label='Team Formation')
workshop_setup = Transition(label='Workshop Setup')
workshop_delivery = Transition(label='Workshop Delivery')
progress_monitor = Transition(label='Progress Monitor')
live_support = Transition(label='Live Support')
feedback_loop = Transition(label='Feedback Loop')
submission_check = Transition(label='Submission Check')
plagiarism_scan = Transition(label='Plagiarism Scan')
jury_evaluation = Transition(label='Jury Evaluation')
result_compilation = Transition(label='Result Compilation')
winner_announcement = Transition(label='Winner Announcement')
post_analytics = Transition(label='Post Analytics')

skip = SilentTransition()

loop_concept_ideation = OperatorPOWL(operator=Operator.LOOP, children=[concept_ideation, sponsor_alignment])
xor_team_formation = OperatorPOWL(operator=Operator.XOR, children=[team_formation, skip])
xor_workshop_setup = OperatorPOWL(operator=Operator.XOR, children=[workshop_setup, skip])
xor_workshop_delivery = OperatorPOWL(operator=Operator.XOR, children=[workshop_delivery, skip])
xor_progress_monitor = OperatorPOWL(operator=Operator.XOR, children=[progress_monitor, skip])
xor_live_support = OperatorPOWL(operator=Operator.XOR, children=[live_support, skip])
xor_feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, skip])
xor_submission_check = OperatorPOWL(operator=Operator.XOR, children=[submission_check, skip])
xor_plagiarism_scan = OperatorPOWL(operator=Operator.XOR, children=[plagiarism_scan, skip])
xor_jury_evaluation = OperatorPOWL(operator=Operator.XOR, children=[jury_evaluation, skip])
xor_result_compilation = OperatorPOWL(operator=Operator.XOR, children=[result_compilation, skip])
xor_winner_announcement = OperatorPOWL(operator=Operator.XOR, children=[winner_announcement, skip])
xor_post_analytics = OperatorPOWL(operator=Operator.XOR, children=[post_analytics, skip])

root = StrictPartialOrder(nodes=[loop_concept_ideation, xor_team_formation, xor_workshop_setup, xor_workshop_delivery, xor_progress_monitor, xor_live_support, xor_feedback_loop, xor_submission_check, xor_plagiarism_scan, xor_jury_evaluation, xor_result_compilation, xor_winner_announcement, xor_post_analytics])
root.order.add_edge(loop_concept_ideation, xor_team_formation)
root.order.add_edge(loop_concept_ideation, xor_workshop_setup)
root.order.add_edge(loop_concept_ideation, xor_workshop_delivery)
root.order.add_edge(loop_concept_ideation, xor_progress_monitor)
root.order.add_edge(loop_concept_ideation, xor_live_support)
root.order.add_edge(loop_concept_ideation, xor_feedback_loop)
root.order.add_edge(loop_concept_ideation, xor_submission_check)
root.order.add_edge(loop_concept_ideation, xor_plagiarism_scan)
root.order.add_edge(loop_concept_ideation, xor_jury_evaluation)
root.order.add_edge(loop_concept_ideation, xor_result_compilation)
root.order.add_edge(loop_concept_ideation, xor_winner_announcement)
root.order.add_edge(loop_concept_ideation, xor_post_analytics)