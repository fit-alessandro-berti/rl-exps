import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Milk_Sourcing = Transition(label='Milk Sourcing')
Quality_Testing = Transition(label='Quality Testing')
Batch_Curdling = Transition(label='Batch Curdling')
Whey_Removal = Transition(label='Whey Removal')
Mold_Inoculation = Transition(label='Mold Inoculation')
Humidity_Control = Transition(label='Humidity Control')
Temperature_Aging = Transition(label='Temperature Aging')
Rind_Brushing = Transition(label='Rind Brushing')
Flavor_Sampling = Transition(label='Flavor Sampling')
Label_Printing = Transition(label='Label Printing')
Packaging_Prep = Transition(label='Packaging Prep')
Cold_Storage = Transition(label='Cold Storage')
Order_Consolidation = Transition(label='Order Consolidation')
Logistics_Scheduling = Transition(label='Logistics Scheduling')
Customer_Feedback = Transition(label='Customer Feedback')
Certification_Audit = Transition(label='Certification Audit')
Recipe_Adjustment = Transition(label='Recipe Adjustment')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Sourcing, Quality_Testing])
xor = OperatorPOWL(operator=Operator.XOR, children=[Batch_Curdling, Whey_Removal])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Mold_Inoculation, Humidity_Control])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Temperature_Aging, Rind_Brushing])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Flavor_Sampling, Label_Printing])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Packaging_Prep, Cold_Storage])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Order_Consolidation, Logistics_Scheduling])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Customer_Feedback, Certification_Audit])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Recipe_Adjustment, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, root)