import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
site_analysis = Transition(label='Site Analysis')
permit_securing = Transition(label='Permit Securing')
unit_designing = Transition(label='Unit Designing')
led_sourcing = Transition(label='LED Sourcing')
hydroponic_setup = Transition(label='Hydroponic Setup')
staff_hiring = Transition(label='Staff Hiring')
pilot_cultivation = Transition(label='Pilot Cultivation')
data_integration = Transition(label='Data Integration')
waste_recycling = Transition(label='Waste Recycling')
local_distribution = Transition(label='Local Distribution')
subscription_setup = Transition(label='Subscription Setup')
iot_deployment = Transition(label='IoT Deployment')
sustainability_audit = Transition(label='Sustainability Audit')
market_testing = Transition(label='Market Testing')
process_refinement = Transition(label='Process Refinement')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[site_analysis, permit_securing])
xor = OperatorPOWL(operator=Operator.XOR, children=[unit_designing, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[led_sourcing, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[hydroponic_setup, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[staff_hiring, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[pilot_cultivation, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[data_integration, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[waste_recycling, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[local_distribution, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[subscription_setup, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[iot_deployment, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[sustainability_audit, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[market_testing, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[process_refinement, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(loop, xor11)
root.order.add_edge(loop, xor12)
root.order.add_edge(loop, xor13)