import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
design_layout = Transition(label='Design Layout')
material_sourcing = Transition(label='Material Sourcing')
unit_assembly = Transition(label='Unit Assembly')
system_wiring = Transition(label='System Wiring')
sensor_install = Transition(label='Sensor Install')
water_testing = Transition(label='Water Testing')
nutrient_mix = Transition(label='Nutrient Mix')
seed_selection = Transition(label='Seed Selection')
planting_setup = Transition(label='Planting Setup')
climate_control = Transition(label='Climate Control')
pest_management = Transition(label='Pest Management')
data_calibration = Transition(label='Data Calibration')
yield_analysis = Transition(label='Yield Analysis')
community_meet = Transition(label='Community Meet')
compliance_check = Transition(label='Compliance Check')
expansion_plan = Transition(label='Expansion Plan')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, design_layout])
xor = OperatorPOWL(operator=Operator.XOR, children=[material_sourcing, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[unit_assembly, system_wiring])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[sensor_install, water_testing])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, seed_selection])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[planting_setup, climate_control])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[pest_management, data_calibration])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[yield_analysis, community_meet])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, expansion_plan])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[site_survey, design_layout])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, loop)