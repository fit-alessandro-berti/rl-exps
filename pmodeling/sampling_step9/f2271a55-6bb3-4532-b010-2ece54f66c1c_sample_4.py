import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

provenance_check = Transition(label='Provenance Check')
spectroscopy_test = Transition(label='Spectroscopy Test')
carbon_dating = Transition(label='Carbon Dating')
style_analysis = Transition(label='Style Analysis')
image_scanning = Transition(label='Image Scanning')
restoration_scan = Transition(label='Restoration Scan')
appraiser_review = Transition(label='Appraiser Review')
database_match = Transition(label='Database Match')
blockchain_entry = Transition(label='Blockchain Entry')
certificate_issue = Transition(label='Certificate Issue')
forgery_detect = Transition(label='Forgery Detect')
report_compilation = Transition(label='Report Compilation')
client_briefing = Transition(label='Client Briefing')
secure_storage = Transition(label='Secure Storage')
final_approval = Transition(label='Final Approval')

skip = SilentTransition()
loop_provenance = OperatorPOWL(operator=Operator.LOOP, children=[provenance_check, carbon_dating])
loop_style = OperatorPOWL(operator=Operator.LOOP, children=[style_analysis, restoration_scan])
loop_database = OperatorPOWL(operator=Operator.LOOP, children=[database_match, forgery_detect])
xor_image = OperatorPOWL(operator=Operator.XOR, children=[image_scanning, skip])
xor_appraiser = OperatorPOWL(operator=Operator.XOR, children=[appraiser_review, skip])
xor_report = OperatorPOWL(operator=Operator.XOR, children=[report_compilation, skip])
xor_client = OperatorPOWL(operator=Operator.XOR, children=[client_briefing, skip])
xor_storage = OperatorPOWL(operator=Operator.XOR, children=[secure_storage, skip])
xor_approval = OperatorPOWL(operator=Operator.XOR, children=[final_approval, skip])

root = StrictPartialOrder(nodes=[loop_provenance, loop_style, loop_database, xor_image, xor_appraiser, xor_report, xor_client, xor_storage, xor_approval])
root.order.add_edge(loop_provenance, xor_appraiser)
root.order.add_edge(loop_style, xor_report)
root.order.add_edge(loop_database, xor_client)
root.order.add_edge(xor_image, xor_storage)
root.order.add_edge(xor_appraiser, xor_approval)
root.order.add_edge(xor_report, xor_storage)
root.order.add_edge(xor_client, xor_storage)
root.order.add_edge(xor_storage, xor_approval)