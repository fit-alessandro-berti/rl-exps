import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
MilkSourcing = Transition(label='Milk Sourcing')
QualityTesting = Transition(label='Quality Testing')
MilkPasteurize = Transition(label='Milk Pasteurize')
CultureAddition = Transition(label='Culture Addition')
CurdCutting = Transition(label='Curd Cutting')
WheyDrain = Transition(label='Whey Drain')
CheeseMolding = Transition(label='Cheese Molding')
ControlledAging = Transition(label='Controlled Aging')
SensoryCheck = Transition(label='Sensory Check')
HealthCertify = Transition(label='Health Certify')
CustomLabeling = Transition(label='Custom Labeling')
ColdPackaging = Transition(label='Cold Packaging')
LogisticsSetup = Transition(label='Logistics Setup')
ExportDocs = Transition(label='Export Docs')
CustomsClearance = Transition(label='Customs Clearance')
ShipmentTrack = Transition(label='Shipment Track')
ClientFeedback = Transition(label='Client Feedback')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[QualityTesting, MilkPasteurize, CultureAddition, CurdCutting, WheyDrain, CheeseMolding, ControlledAging, SensoryCheck])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[HealthCertify, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[CustomLabeling, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[ColdPackaging, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[LogisticsSetup, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[ExportDocs, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[CustomsClearance, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[ShipmentTrack, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[ClientFeedback, skip])
root = StrictPartialOrder(nodes=[loop, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(loop, xor1)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)