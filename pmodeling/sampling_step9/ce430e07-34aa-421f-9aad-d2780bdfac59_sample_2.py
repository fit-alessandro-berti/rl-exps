import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

RiskAssess = Transition(label='Risk Assess')
SourceAlternatives = Transition(label='Source Alternatives')
SupplierAudit = Transition(label='Supplier Audit')
ContractReview = Transition(label='Contract Review')
RegulationCheck = Transition(label='Regulation Check')
InventoryScan = Transition(label='Inventory Scan')
LogisticsReroute = Transition(label='Logistics Reroute')
CustomsNotify = Transition(label='Customs Notify')
StakeholderAlert = Transition(label='Stakeholder Alert')
DataAnalyze = Transition(label='Data Analyze')
CostForecast = Transition(label='Cost Forecast')
ComplianceVerify = Transition(label='Compliance Verify')
ScenarioPlan = Transition(label='Scenario Plan')
DecisionGate = Transition(label='Decision Gate')
FeedbackLoop = Transition(label='Feedback Loop')
ReportGenerate = Transition(label='Report Generate')
MarketMonitor = Transition(label='Market Monitor')
TeamSync = Transition(label='Team Sync')

skip = SilentTransition()

riskAssess = OperatorPOWL(operator=Operator.LOOP, children=[RiskAssess, SourceAlternatives])
sourceAlternatives = OperatorPOWL(operator=Operator.XOR, children=[SupplierAudit, skip])
supplierAudit = OperatorPOWL(operator=Operator.LOOP, children=[ContractReview, RegulationCheck])
contractReview = OperatorPOWL(operator=Operator.XOR, children=[InventoryScan, skip])
regulationCheck = OperatorPOWL(operator=Operator.LOOP, children=[LogisticsReroute, CustomsNotify])
logisticsReroute = OperatorPOWL(operator=Operator.XOR, children=[StakeholderAlert, skip])
stakeholderAlert = OperatorPOWL(operator=Operator.LOOP, children=[DataAnalyze, CostForecast])
dataAnalyze = OperatorPOWL(operator=Operator.XOR, children=[ComplianceVerify, skip])
complianceVerify = OperatorPOWL(operator=Operator.LOOP, children=[ScenarioPlan, DecisionGate])
scenarioPlan = OperatorPOWL(operator=Operator.XOR, children=[FeedbackLoop, skip])
decisionGate = OperatorPOWL(operator=Operator.LOOP, children=[ReportGenerate, MarketMonitor])
reportGenerate = OperatorPOWL(operator=Operator.XOR, children=[TeamSync, skip])
marketMonitor = OperatorPOWL(operator=Operator.LOOP, children=[skip, skip])

root = StrictPartialOrder(nodes=[riskAssess, sourceAlternatives, supplierAudit, contractReview, regulationCheck, logisticsReroute, stakeholderAlert, dataAnalyze, complianceVerify, scenarioPlan, decisionGate, reportGenerate, marketMonitor, teamSync])
root.order.add_edge(riskAssess, sourceAlternatives)
root.order.add_edge(sourceAlternatives, supplierAudit)
root.order.add_edge(supplierAudit, contractReview)
root.order.add_edge(contractReview, regulationCheck)
root.order.add_edge(regulationCheck, logisticsReroute)
root.order.add_edge(logisticsReroute, stakeholderAlert)
root.order.add_edge(stakeholderAlert, dataAnalyze)
root.order.add_edge(dataAnalyze, complianceVerify)
root.order.add_edge(complianceVerify, scenarioPlan)
root.order.add_edge(scenarioPlan, decisionGate)
root.order.add_edge(decisionGate, reportGenerate)
root.order.add_edge(reportGenerate, marketMonitor)
root.order.add_edge(marketMonitor, teamSync)