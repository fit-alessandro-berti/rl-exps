import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

MilkSourcing = Transition(label='Milk Sourcing')
CultureSelection = Transition(label='Culture Selection')
MilkPasteurize = Transition(label='Milk Pasteurize')
CurdFormation = Transition(label='Curd Formation')
WheySeparation = Transition(label='Whey Separation')
MoldInoculate = Transition(label='Mold Inoculate')
CheesePressing = Transition(label='Cheese Pressing')
AgingSetup = Transition(label='Aging Setup')
HumidityControl = Transition(label='Humidity Control')
FlavorTesting = Transition(label='Flavor Testing')
PackagingDesign = Transition(label='Packaging Design')
LabelApproval = Transition(label='Label Approval')
OrderForecast = Transition(label='Order Forecast')
RegulationAudit = Transition(label='Regulation Audit')
WasteRecycling = Transition(label='Waste Recycling')
MarketDelivery = Transition(label='Market Delivery')
CustomerFeedback = Transition(label='Customer Feedback')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[MilkSourcing, CultureSelection])
xor = OperatorPOWL(operator=Operator.XOR, children=[MilkPasteurize, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[CurdFormation, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[WheySeparation, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[MoldInoculate, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[CheesePressing, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[AgingSetup, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[HumidityControl, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[FlavorTesting, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[PackagingDesign, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[LabelApproval, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[OrderForecast, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[RegulationAudit, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[WasteRecycling, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[MarketDelivery, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[CustomerFeedback, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)