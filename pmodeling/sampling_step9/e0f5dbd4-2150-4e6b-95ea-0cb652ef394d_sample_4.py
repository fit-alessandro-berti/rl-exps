import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

drone_design = Transition(label='Drone Design')
regulatory_check = Transition(label='Regulatory Check')
nav_system = Transition(label='Nav System')
partner_setup = Transition(label='Partner Setup')
operator_training = Transition(label='Operator Training')
test_flights = Transition(label='Test Flights')
weather_review = Transition(label='Weather Review')
route_optimize = Transition(label='Route Optimize')
parts_logistics = Transition(label='Parts Logistics')
feedback_loop = Transition(label='Feedback Loop')
risk_assess = Transition(label='Risk Assess')
emergency_plan = Transition(label='Emergency Plan')
compliance_audit = Transition(label='Compliance Audit')
data_sync = Transition(label='Data Sync')
service_launch = Transition(label='Service Launch')

skip = SilentTransition()

regulatory_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[regulatory_check, skip])
nav_system_loop = OperatorPOWL(operator=Operator.LOOP, children=[nav_system, skip])
partner_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[partner_setup, skip])
operator_training_loop = OperatorPOWL(operator=Operator.LOOP, children=[operator_training, skip])
test_flights_loop = OperatorPOWL(operator=Operator.LOOP, children=[test_flights, skip])
weather_review_loop = OperatorPOWL(operator=Operator.LOOP, children=[weather_review, skip])
route_optimize_loop = OperatorPOWL(operator=Operator.LOOP, children=[route_optimize, skip])
parts_logistics_loop = OperatorPOWL(operator=Operator.LOOP, children=[parts_logistics, skip])
feedback_loop_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop, skip])
risk_assess_loop = OperatorPOWL(operator=Operator.LOOP, children=[risk_assess, skip])
emergency_plan_loop = OperatorPOWL(operator=Operator.LOOP, children=[emergency_plan, skip])
compliance_audit_loop = OperatorPOWL(operator=Operator.LOOP, children=[compliance_audit, skip])
data_sync_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_sync, skip])
service_launch_loop = OperatorPOWL(operator=Operator.LOOP, children=[service_launch, skip])

root = StrictPartialOrder(nodes=[drone_design, regulatory_check_loop, nav_system_loop, partner_setup_loop, operator_training_loop, test_flights_loop, weather_review_loop, route_optimize_loop, parts_logistics_loop, feedback_loop_loop, risk_assess_loop, emergency_plan_loop, compliance_audit_loop, data_sync_loop, service_launch_loop])
root.order.add_edge(drone_design, regulatory_check_loop)
root.order.add_edge(regulatory_check_loop, nav_system_loop)
root.order.add_edge(nav_system_loop, partner_setup_loop)
root.order.add_edge(partner_setup_loop, operator_training_loop)
root.order.add_edge(operator_training_loop, test_flights_loop)
root.order.add_edge(test_flights_loop, weather_review_loop)
root.order.add_edge(weather_review_loop, route_optimize_loop)
root.order.add_edge(route_optimize_loop, parts_logistics_loop)
root.order.add_edge(parts_logistics_loop, feedback_loop_loop)
root.order.add_edge(feedback_loop_loop, risk_assess_loop)
root.order.add_edge(risk_assess_loop, emergency_plan_loop)
root.order.add_edge(emergency_plan_loop, compliance_audit_loop)
root.order.add_edge(compliance_audit_loop, data_sync_loop)
root.order.add_edge(data_sync_loop, service_launch_loop)