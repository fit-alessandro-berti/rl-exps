import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
permit_secutring = Transition(label='Permit Securing')
structure_check = Transition(label='Structure Check')
soil_testing = Transition(label='Soil Testing')
water_analysis = Transition(label='Water Analysis')
material_sourcing = Transition(label='Material Sourcing')
planter_setup = Transition(label='Planter Setup')
sensor_install = Transition(label='Sensor Install')
irrigation_setup = Transition(label='Irrigation Setup')
vendor_liaison = Transition(label='Vendor Liaison')
staff_training = Transition(label='Staff Training')
pest_control = Transition(label='Pest Control')
produce_marketing = Transition(label='Produce Marketing')
crop_rotation = Transition(label='Crop Rotation')
health_audit = Transition(label='Health Audit')
waste_composting = Transition(label='Waste Composting')

# Define the silent activities
skip = SilentTransition()

# Define the loop nodes
loop_structure_check = OperatorPOWL(operator=Operator.LOOP, children=[structure_check, skip])
loop_soil_testing = OperatorPOWL(operator=Operator.LOOP, children=[soil_testing, skip])
loop_water_analysis = OperatorPOWL(operator=Operator.LOOP, children=[water_analysis, skip])
loop_material_sourcing = OperatorPOWL(operator=Operator.LOOP, children=[material_sourcing, skip])
loop_planter_setup = OperatorPOWL(operator=Operator.LOOP, children=[planter_setup, skip])
loop_sensor_install = OperatorPOWL(operator=Operator.LOOP, children=[sensor_install, skip])
loop_irrigation_setup = OperatorPOWL(operator=Operator.LOOP, children=[irrigation_setup, skip])
loop_vendor_liaison = OperatorPOWL(operator=Operator.LOOP, children=[vendor_liaison, skip])
loop_staff_training = OperatorPOWL(operator=Operator.LOOP, children=[staff_training, skip])
loop_pest_control = OperatorPOWL(operator=Operator.LOOP, children=[pest_control, skip])
loop_produce_marketing = OperatorPOWL(operator=Operator.LOOP, children=[produce_marketing, skip])
loop_crop_rotation = OperatorPOWL(operator=Operator.LOOP, children=[crop_rotation, skip])
loop_health_audit = OperatorPOWL(operator=Operator.LOOP, children=[health_audit, skip])
loop_waste_composting = OperatorPOWL(operator=Operator.LOOP, children=[waste_composting, skip])

# Define the partial order
root = StrictPartialOrder(nodes=[permit_secutring, structure_check, soil_testing, water_analysis, material_sourcing, planter_setup, sensor_install, irrigation_setup, vendor_liaison, staff_training, pest_control, produce_marketing, crop_rotation, health_audit, waste_composting])
root.order.add_edge(permit_secutring, structure_check)
root.order.add_edge(structure_check, loop_structure_check)
root.order.add_edge(loop_structure_check, soil_testing)
root.order.add_edge(soil_testing, loop_soil_testing)
root.order.add_edge(loop_soil_testing, water_analysis)
root.order.add_edge(water_analysis, loop_water_analysis)
root.order.add_edge(loop_water_analysis, material_sourcing)
root.order.add_edge(material_sourcing, loop_material_sourcing)
root.order.add_edge(loop_material_sourcing, planter_setup)
root.order.add_edge(planter_setup, loop_planter_setup)
root.order.add_edge(loop_planter_setup, sensor_install)
root.order.add_edge(sensor_install, loop_sensor_install)
root.order.add_edge(loop_sensor_install, irrigation_setup)
root.order.add_edge(irrigation_setup, loop_irrigation_setup)
root.order.add_edge(loop_irrigation_setup, vendor_liaison)
root.order.add_edge(vendor_liaison, loop_vendor_liaison)
root.order.add_edge(loop_vendor_liaison, staff_training)
root.order.add_edge(staff_training, loop_staff_training)
root.order.add_edge(loop_staff_training, pest_control)
root.order.add_edge(pest_control, loop_pest_control)
root.order.add_edge(loop_pest_control, produce_marketing)
root.order.add_edge(produce_marketing, loop_produce_marketing)
root.order.add_edge(loop_produce_marketing, crop_rotation)
root.order.add_edge(crop_rotation, loop_crop_rotation)
root.order.add_edge(loop_crop_rotation, health_audit)
root.order.add_edge(health_audit, loop_health_audit)
root.order.add_edge(loop_health_audit, waste_composting)
root.order.add_edge(waste_composting, loop_waste_composting)