import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
SeedSelection = Transition(label='Seed Selection')
AI_Prediction = Transition(label='AI Prediction')
Automated_Planting = Transition(label='Automated Planting')
Sensor_Calibration = Transition(label='Sensor Calibration')
Environment_Adjust = Transition(label='Environment Adjust')
Nutrient_Dosing = Transition(label='Nutrient Dosing')
Hydroponic_Flow = Transition(label='Hydroponic Flow')
Robotic_Pruning = Transition(label='Robotic Pruning')
Health_Monitor = Transition(label='Health Monitor')
Harvesting_Ops = Transition(label='Harvesting Ops')
Data_Analysis = Transition(label='Data Analysis')
Predictive_Check = Transition(label='Predictive Check')
Waste_Composting = Transition(label='Waste Composting')
Water_Recycling = Transition(label='Water Recycling')
Eco_Packaging = Transition(label='Eco Packaging')
Carbon_Tracking = Transition(label='Carbon Tracking')
Logistics_Dispatch = Transition(label='Logistics Dispatch')
skip = SilentTransition()
seed_selection = OperatorPOWL(operator=Operator.XOR, children=[SeedSelection, AI_Prediction])
planting = OperatorPOWL(operator=Operator.LOOP, children=[Automated_Planting, Sensor_Calibration, Environment_Adjust, Nutrient_Dosing, Hydroponic_Flow, Robotic_Pruning, Health_Monitor, Harvesting_Ops])
monitoring = OperatorPOWL(operator=Operator.LOOP, children=[Data_Analysis, Predictive_Check])
waste_management = OperatorPOWL(operator=Operator.XOR, children=[Waste_Composting, Water_Recycling])
packaging = OperatorPOWL(operator=Operator.LOOP, children=[Eco_Packaging, Carbon_Tracking])
dispatch = OperatorPOWL(operator=Operator.XOR, children=[Logistics_Dispatch, skip])
root = StrictPartialOrder(nodes=[seed_selection, planting, monitoring, waste_management, packaging, dispatch])
root.order.add_edge(seed_selection, planting)
root.order.add_edge(planting, monitoring)
root.order.add_edge(monitoring, waste_management)
root.order.add_edge(waste_management, packaging)
root.order.add_edge(packaging, dispatch)