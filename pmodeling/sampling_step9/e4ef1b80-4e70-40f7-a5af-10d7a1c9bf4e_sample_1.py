import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Opportunity_Scan = Transition(label='Opportunity Scan')
Idea_Workshop = Transition(label='Idea Workshop')
Concept_Merge = Transition(label='Concept Merge')
Resource_Align = Transition(label='Resource Align')
Prototype_Build = Transition(label='Prototype Build')
Feasibility_Test = Transition(label='Feasibility Test')
Pilot_Launch = Transition(label='Pilot Launch')
Feedback_Gather = Transition(label='Feedback Gather')
Design_Adapt = Transition(label='Design Adapt')
Compliance_Check = Transition(label='Compliance Check')
Scaling_Plan = Transition(label='Scaling Plan')
IP_Management = Transition(label='IP Management')
Market_Sync = Transition(label='Market Sync')
Partner_Review = Transition(label='Partner Review')
Exit_Strategy = Transition(label='Exit Strategy')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Opportunity_Scan, Idea_Workshop])
xor = OperatorPOWL(operator=Operator.XOR, children=[Resource_Align, skip])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[Prototype_Build, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Feasibility_Test, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Pilot_Launch, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Feedback_Gather, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Design_Adapt, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Compliance_Check, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Scaling_Plan, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[IP_Management, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Market_Sync, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Partner_Review, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Exit_Strategy, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)