import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

VerifyProvenance = Transition(label='Verify Provenance')
AssessCondition = Transition(label='Assess Condition')
NegotiateTerms = Transition(label='Negotiate Terms')
ArrangeTransport = Transition(label='Arrange Transport')
CustomsClearance = Transition(label='Customs Clearance')
SecureInsurance = Transition(label='Secure Insurance')
ScheduleHandlers = Transition(label='Schedule Handlers')
InstallArtwork = Transition(label='Install Artwork')
MonitorClimate = Transition(label='Monitor Climate')
ManageSecurity = Transition(label='Manage Security')
FacilitateAccess = Transition(label='Facilitate Access')
DocumentDisplay = Transition(label='Document Display')
CoordinateEvents = Transition(label='Coordinate Events')
InspectPeriodically = Transition(label='Inspect Periodically')
PlanReturn = Transition(label='Plan Return')
DeinstallArtwork = Transition(label='Deinstall Artwork')
FinalizeReports = Transition(label='Finalize Reports')

skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[VerifyProvenance, AssessCondition])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[NegotiateTerms, skip])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[ArrangeTransport, CustomsClearance])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[SecureInsurance, skip])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[ScheduleHandlers, InstallArtwork])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[MonitorClimate, ManageSecurity])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[FacilitateAccess, DocumentDisplay])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[CoordinateEvents, skip])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[InspectPeriodically, PlanReturn])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[DeinstallArtwork, FinalizeReports])

root = StrictPartialOrder(nodes=[loop1, xor1, loop2, xor2, loop3, xor3, loop4, xor4, loop5, xor5])
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)