import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
SiteSurvey = Transition(label='Site Survey')
StructuralCheck = Transition(label='Structural Check')
EnvControl = Transition(label='Env Control')
HydroSetup = Transition(label='Hydro Setup')
CropSelect = Transition(label='Crop Select')
IoTInstall = Transition(label='IoT Install')
SensorCalibrate = Transition(label='Sensor Calibrate')
WaterCycle = Transition(label='Water Cycle')
NutrientMix = Transition(label='Nutrient Mix')
LightingAdjust = Transition(label='Lighting Adjust')
StaffTrain = Transition(label='Staff Train')
WasteManage = Transition(label='Waste Manage')
EnergyAudit = Transition(label='Energy Audit')
HarvestPlan = Transition(label='Harvest Plan')
DeliverySetup = Transition(label='Delivery Setup')
MarketAlign = Transition(label='Market Align')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[SiteSurvey, StructuralCheck])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[EnvControl, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[HydroSetup, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[CropSelect, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[IoTInstall, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[SensorCalibrate, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[WaterCycle, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[LightingAdjust, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[StaffTrain, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[WasteManage, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[EnergyAudit, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[HarvestPlan, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[DeliverySetup, xor12])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[MarketAlign, xor13])
root = StrictPartialOrder(nodes=[loop, xor14])
root.order.add_edge(loop, xor14)