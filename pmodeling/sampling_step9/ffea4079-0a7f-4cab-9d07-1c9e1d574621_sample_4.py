import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions (activities)
scenario_setup = Transition(label='Scenario Setup')
resource_mapping = Transition(label='Resource Mapping')
team_briefing = Transition(label='Team Briefing')
tech_deployment = Transition(label='Tech Deployment')
data_sync = Transition(label='Data Sync')
comm_setup = Transition(label='Comm Setup')
live_monitoring = Transition(label='Live Monitoring')
variable_adjust = Transition(label='Variable Adjust')
incident_injection = Transition(label='Incident Injection')
response_tracking = Transition(label='Response Tracking')
interlock_check = Transition(label='Interlock Check')
real_time_feedback = Transition(label='Real-time Feedback')
debrief_session = Transition(label='Debrief Session')
outcome_analysis = Transition(label='Outcome Analysis')
report_generation = Transition(label='Report Generation')
improvement_plan = Transition(label='Improvement Plan')

# Define the silent transitions
skip = SilentTransition()

# Define the choice operators
xor_scenario = OperatorPOWL(operator=Operator.XOR, children=[scenario_setup, skip])
xor_resource = OperatorPOWL(operator=Operator.XOR, children=[resource_mapping, skip])
xor_team = OperatorPOWL(operator=Operator.XOR, children=[team_briefing, skip])
xor_tech = OperatorPOWL(operator=Operator.XOR, children=[tech_deployment, skip])
xor_data = OperatorPOWL(operator=Operator.XOR, children=[data_sync, skip])
xor_comm = OperatorPOWL(operator=Operator.XOR, children=[comm_setup, skip])
xor_monitoring = OperatorPOWL(operator=Operator.XOR, children=[live_monitoring, skip])
xor_adjust = OperatorPOWL(operator=Operator.XOR, children=[variable_adjust, skip])
xor_incident = OperatorPOWL(operator=Operator.XOR, children=[incident_injection, skip])
xor_response = OperatorPOWL(operator=Operator.XOR, children=[response_tracking, skip])
xor_interlock = OperatorPOWL(operator=Operator.XOR, children=[interlock_check, skip])
xor_feedback = OperatorPOWL(operator=Operator.XOR, children=[real_time_feedback, skip])
xor_debrief = OperatorPOWL(operator=Operator.XOR, children=[debrief_session, skip])
xor_outcome = OperatorPOWL(operator=Operator.XOR, children=[outcome_analysis, skip])
xor_report = OperatorPOWL(operator=Operator.XOR, children=[report_generation, skip])
xor_improvement = OperatorPOWL(operator=Operator.XOR, children=[improvement_plan, skip])

# Define the loop operators
loop_scenario = OperatorPOWL(operator=Operator.LOOP, children=[xor_scenario])
loop_resource = OperatorPOWL(operator=Operator.LOOP, children=[xor_resource])
loop_team = OperatorPOWL(operator=Operator.LOOP, children=[xor_team])
loop_tech = OperatorPOWL(operator=Operator.LOOP, children=[xor_tech])
loop_data = OperatorPOWL(operator=Operator.LOOP, children=[xor_data])
loop_comm = OperatorPOWL(operator=Operator.LOOP, children=[xor_comm])
loop_monitoring = OperatorPOWL(operator=Operator.LOOP, children=[xor_monitoring])
loop_adjust = OperatorPOWL(operator=Operator.LOOP, children=[xor_adjust])
loop_incident = OperatorPOWL(operator=Operator.LOOP, children=[xor_incident])
loop_response = OperatorPOWL(operator=Operator.LOOP, children=[xor_response])
loop_interlock = OperatorPOWL(operator=Operator.LOOP, children=[xor_interlock])
loop_feedback = OperatorPOWL(operator=Operator.LOOP, children=[xor_feedback])
loop_debrief = OperatorPOWL(operator=Operator.LOOP, children=[xor_debrief])
loop_outcome = OperatorPOWL(operator=Operator.LOOP, children=[xor_outcome])
loop_report = OperatorPOWL(operator=Operator.LOOP, children=[xor_report])
loop_improvement = OperatorPOWL(operator=Operator.LOOP, children=[xor_improvement])

# Define the root model
root = StrictPartialOrder(nodes=[loop_scenario, loop_resource, loop_team, loop_tech, loop_data, loop_comm, loop_monitoring, loop_adjust, loop_incident, loop_response, loop_interlock, loop_feedback, loop_debrief, loop_outcome, loop_report, loop_improvement])
root.order.add_edge(loop_scenario, xor_resource)
root.order.add_edge(loop_resource, xor_team)
root.order.add_edge(loop_team, xor_tech)
root.order.add_edge(loop_tech, xor_data)
root.order.add_edge(loop_data, xor_comm)
root.order.add_edge(loop_comm, xor_monitoring)
root.order.add_edge(loop_monitoring, xor_adjust)
root.order.add_edge(loop_adjust, xor_incident)
root.order.add_edge(loop_incident, xor_response)
root.order.add_edge(loop_response, xor_interlock)
root.order.add_edge(loop_interlock, xor_feedback)
root.order.add_edge(loop_feedback, xor_debrief)
root.order.add_edge(loop_debrief, xor_outcome)
root.order.add_edge(loop_outcome, xor_report)
root.order.add_edge(loop_report, xor_improvement)
root.order.add_edge(loop_improvement, xor_scenario)