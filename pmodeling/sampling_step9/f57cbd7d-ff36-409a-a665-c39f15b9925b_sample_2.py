import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Trend_Scan = Transition(label='Trend Scan')
Idea_Sprint = Transition(label='Idea Sprint')
Feasibility_Check = Transition(label='Feasibility Check')
Risk_Review = Transition(label='Risk Review')
Tech_Prototype = Transition(label='Tech Prototype')
Market_Simulate = Transition(label='Market Simulate')
Stakeholder_Align = Transition(label='Stakeholder Align')
Budget_Adjust = Transition(label='Budget Adjust')
Talent_Source = Transition(label='Talent Source')
Pilot_Launch = Transition(label='Pilot Launch')
Data_Refine = Transition(label='Data Refine')
Scale_Analysis = Transition(label='Scale Analysis')
Integration_Plan = Transition(label='Integration Plan')
Change_Manage = Transition(label='Change Manage')
Knowledge_Transfer = Transition(label='Knowledge Transfer')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Tech_Prototype, Risk_Review])
xor = OperatorPOWL(operator=Operator.XOR, children=[Pilot_Launch, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Stakeholder_Align, Budget_Adjust])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Talent_Source, Risk_Review])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Scale_Analysis, Risk_Review])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Integration_Plan, Risk_Review])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Change_Manage, Risk_Review])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Knowledge_Transfer, Risk_Review])
root = StrictPartialOrder(nodes=[Trend_Scan, Idea_Sprint, Feasibility_Check, Risk_Review, Tech_Prototype, Market_Simulate, Stakeholder_Align, Budget_Adjust, Talent_Source, Pilot_Launch, Data_Refine, Scale_Analysis, Integration_Plan, Change_Manage, Knowledge_Transfer])
root.order.add_edge(Trend_Scan, Idea_Sprint)
root.order.add_edge(Idea_Sprint, Feasibility_Check)
root.order.add_edge(Feasibility_Check, Risk_Review)
root.order.add_edge(Risk_Review, loop)
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, Risk_Review)