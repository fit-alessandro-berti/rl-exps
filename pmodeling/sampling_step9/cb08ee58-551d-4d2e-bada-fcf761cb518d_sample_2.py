import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteSurvey = Transition(label='Site Survey')
LightMapping = Transition(label='Light Mapping')
WaterTesting = Transition(label='Water Testing')
DesignModules = Transition(label='Design Modules')
IoTSetup = Transition(label='IoT Setup')
SensorCalibration = Transition(label='Sensor Calibration')
NutrientMix = Transition(label='Nutrient Mix')
ClimateControl = Transition(label='Climate Control')
RegulatoryCheck = Transition(label='Regulatory Check')
CommunityMeet = Transition(label='Community Meet')
EnergyAudit = Transition(label='Energy Audit')
StaffTraining = Transition(label='Staff Training')
Installation = Transition(label='Installation')
SystemTesting = Transition(label='System Testing')
YieldAnalysis = Transition(label='Yield Analysis')
ResourceAudit = Transition(label='Resource Audit')
ImpactReview = Transition(label='Impact Review')

skip = SilentTransition()

site_survey = OperatorPOWL(operator=Operator.XOR, children=[SiteSurvey, skip])
light_mapping = OperatorPOWL(operator=Operator.XOR, children=[LightMapping, skip])
water_testing = OperatorPOWL(operator=Operator.XOR, children=[WaterTesting, skip])
design_modules = OperatorPOWL(operator=Operator.XOR, children=[DesignModules, skip])
iot_setup = OperatorPOWL(operator=Operator.XOR, children=[IoTSetup, skip])
sensor_calibration = OperatorPOWL(operator=Operator.XOR, children=[SensorCalibration, skip])
nutrient_mix = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, skip])
climate_control = OperatorPOWL(operator=Operator.XOR, children=[ClimateControl, skip])
regulatory_check = OperatorPOWL(operator=Operator.XOR, children=[RegulatoryCheck, skip])
community_meet = OperatorPOWL(operator=Operator.XOR, children=[CommunityMeet, skip])
energy_audit = OperatorPOWL(operator=Operator.XOR, children=[EnergyAudit, skip])
staff_training = OperatorPOWL(operator=Operator.XOR, children=[StaffTraining, skip])
installation = OperatorPOWL(operator=Operator.XOR, children=[Installation, skip])
system_testing = OperatorPOWL(operator=Operator.XOR, children=[SystemTesting, skip])
yield_analysis = OperatorPOWL(operator=Operator.XOR, children=[YieldAnalysis, skip])
resource_audit = OperatorPOWL(operator=Operator.XOR, children=[ResourceAudit, skip])
impact_review = OperatorPOWL(operator=Operator.XOR, children=[ImpactReview, skip])

root = StrictPartialOrder(nodes=[site_survey, light_mapping, water_testing, design_modules, iot_setup, sensor_calibration, nutrient_mix, climate_control, regulatory_check, community_meet, energy_audit, staff_training, installation, system_testing, yield_analysis, resource_audit, impact_review])
root.order.add_edge(site_survey, light_mapping)
root.order.add_edge(light_mapping, water_testing)
root.order.add_edge(water_testing, design_modules)
root.order.add_edge(design_modules, iot_setup)
root.order.add_edge(iot_setup, sensor_calibration)
root.order.add_edge(sensor_calibration, nutrient_mix)
root.order.add_edge(nutrient_mix, climate_control)
root.order.add_edge(climate_control, regulatory_check)
root.order.add_edge(regulatory_check, community_meet)
root.order.add_edge(community_meet, energy_audit)
root.order.add_edge(energy_audit, staff_training)
root.order.add_edge(staff_training, installation)
root.order.add_edge(installation, system_testing)
root.order.add_edge(system_testing, yield_analysis)
root.order.add_edge(yield_analysis, resource_audit)
root.order.add_edge(resource_audit, impact_review)