import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Milk_Sourcing = Transition(label='Milk Sourcing')
Curd_Preparation = Transition(label='Curd Preparation')
starter_Culture = Transition(label='starter Culture')
Temperature_Control = Transition(label='Temperature Control')
Pressing_Cheese = Transition(label='Pressing Cheese')
Salting_Stage = Transition(label='Salting Stage')
Aging_Process = Transition(label='Aging Process')
Microbial_Test = Transition(label='Microbial Test')
Quality_Check = Transition(label='Quality Check')
Eco_Packaging = Transition(label='Eco Packaging')
Label_Printing = Transition(label='Label Printing')
Inventory_Audit = Transition(label='Inventory Audit')
Order_Processing = Transition(label='Order Processing')
Retail_Shipping = Transition(label='Retail Shipping')
Customer_Feedback = Transition(label='Customer Feedback')
Recipe_Update = Transition(label='Recipe Update')
Market_Analysis = Transition(label='Market Analysis')

skip = SilentTransition()

loop_1 = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Sourcing, Curd_Preparation])
loop_2 = OperatorPOWL(operator=Operator.LOOP, children=[starter_Culture, Temperature_Control])
loop_3 = OperatorPOWL(operator=Operator.LOOP, children=[Pressing_Cheese, Salting_Stage])
loop_4 = OperatorPOWL(operator=Operator.LOOP, children=[Aging_Process, Microbial_Test])
loop_5 = OperatorPOWL(operator=Operator.LOOP, children=[Quality_Check, Eco_Packaging])
loop_6 = OperatorPOWL(operator=Operator.LOOP, children=[Label_Printing, Inventory_Audit])
loop_7 = OperatorPOWL(operator=Operator.LOOP, children=[Order_Processing, Retail_Shipping])
loop_8 = OperatorPOWL(operator=Operator.LOOP, children=[Customer_Feedback, Recipe_Update])
loop_9 = OperatorPOWL(operator=Operator.LOOP, children=[Market_Analysis])

xor_1 = OperatorPOWL(operator=Operator.XOR, children=[Milk_Sourcing, skip])
xor_2 = OperatorPOWL(operator=Operator.XOR, children=[Curd_Preparation, skip])
xor_3 = OperatorPOWL(operator=Operator.XOR, children=[starter_Culture, skip])
xor_4 = OperatorPOWL(operator=Operator.XOR, children=[Temperature_Control, skip])
xor_5 = OperatorPOWL(operator=Operator.XOR, children=[Pressing_Cheese, skip])
xor_6 = OperatorPOWL(operator=Operator.XOR, children=[Salting_Stage, skip])
xor_7 = OperatorPOWL(operator=Operator.XOR, children=[Aging_Process, skip])
xor_8 = OperatorPOWL(operator=Operator.XOR, children=[Microbial_Test, skip])
xor_9 = OperatorPOWL(operator=Operator.XOR, children=[Quality_Check, skip])
xor_10 = OperatorPOWL(operator=Operator.XOR, children=[Eco_Packaging, skip])
xor_11 = OperatorPOWL(operator=Operator.XOR, children=[Label_Printing, skip])
xor_12 = OperatorPOWL(operator=Operator.XOR, children=[Inventory_Audit, skip])
xor_13 = OperatorPOWL(operator=Operator.XOR, children=[Order_Processing, skip])
xor_14 = OperatorPOWL(operator=Operator.XOR, children=[Retail_Shipping, skip])
xor_15 = OperatorPOWL(operator=Operator.XOR, children=[Customer_Feedback, skip])
xor_16 = OperatorPOWL(operator=Operator.XOR, children=[Recipe_Update, skip])
xor_17 = OperatorPOWL(operator=Operator.XOR, children=[Market_Analysis, skip])

root = StrictPartialOrder(nodes=[loop_1, loop_2, loop_3, loop_4, loop_5, loop_6, loop_7, loop_8, loop_9, xor_1, xor_2, xor_3, xor_4, xor_5, xor_6, xor_7, xor_8, xor_9, xor_10, xor_11, xor_12, xor_13, xor_14, xor_15, xor_16, xor_17])
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)
root.order.add_edge(loop_7, xor_7)
root.order.add_edge(loop_8, xor_8)
root.order.add_edge(loop_9, xor_9)
root.order.add_edge(loop_1, xor_10)
root.order.add_edge(loop_2, xor_11)
root.order.add_edge(loop_3, xor_12)
root.order.add_edge(loop_4, xor_13)
root.order.add_edge(loop_5, xor_14)
root.order.add_edge(loop_6, xor_15)
root.order.add_edge(loop_7, xor_16)
root.order.add_edge(loop_8, xor_17)
root.order.add_edge(xor_1, loop_1)
root.order.add_edge(xor_2, loop_2)
root.order.add_edge(xor_3, loop_3)
root.order.add_edge(xor_4, loop_4)
root.order.add_edge(xor_5, loop_5)
root.order.add_edge(xor_6, loop_6)
root.order.add_edge(xor_7, loop_7)
root.order.add_edge(xor_8, loop_8)
root.order.add_edge(xor_9, loop_9)
root.order.add_edge(xor_10, loop_1)
root.order.add_edge(xor_11, loop_2)
root.order.add_edge(xor_12, loop_3)
root.order.add_edge(xor_13, loop_4)
root.order.add_edge(xor_14, loop_5)
root.order.add_edge(xor_15, loop_6)
root.order.add_edge(xor_16, loop_7)
root.order.add_edge(xor_17, loop_8)
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)
root.order.add_edge(loop_7, xor_7)
root.order.add_edge(loop_8, xor_8)
root.order.add_edge(loop_9, xor_9)
root.order.add_edge(loop_1, xor_10)
root.order.add_edge(loop_2, xor_11)
root.order.add_edge(loop_3, xor_12)
root.order.add_edge(loop_4, xor_13)
root.order.add_edge(loop_5, xor_14)
root.order.add_edge(loop_6, xor_15)
root.order.add_edge(loop_7, xor_16)
root.order.add_edge(loop_8, xor_17)
root.order.add_edge(xor_1, loop_1)
root.order.add_edge(xor_2, loop_2)
root.order.add_edge(xor_3, loop_3)
root.order.add_edge(xor_4, loop_4)
root.order.add_edge(xor_5, loop_5)
root.order.add_edge(xor_6, loop_6)
root.order.add_edge(xor_7, loop_7)
root.order.add_edge(xor_8, loop_8)
root.order.add_edge(xor_9, loop_9)
root.order.add_edge(xor_10, loop_1)
root.order.add_edge(xor_11, loop_2)
root.order.add_edge(xor_12, loop_3)
root.order.add_edge(xor_13, loop_4)
root.order.add_edge(xor_14, loop_5)
root.order.add_edge(xor_15, loop_6)
root.order.add_edge(xor_16, loop_7)
root.order.add_edge(xor_17, loop_8)
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)
root.order.add_edge(loop_7, xor_7)
root.order.add_edge(loop_8, xor_8)
root.order.add_edge(loop_9, xor_9)
root.order.add_edge(loop_1, xor_10)
root.order.add_edge(loop_2, xor_11)
root.order.add_edge(loop_3, xor_12)
root.order.add_edge(loop_4, xor_13)
root.order.add_edge(loop_5, xor_14)
root.order.add_edge(loop_6, xor_15)
root.order.add_edge(loop_7, xor_16)
root.order.add_edge(loop_8, xor_17)
root.order.add_edge(xor_1, loop_1)
root.order.add_edge(xor_2, loop_2)
root.order.add_edge(xor_3, loop_3)
root.order.add_edge(xor_4, loop_4)
root.order.add_edge(xor_5, loop_5)
root.order.add_edge(xor_6, loop_6)
root.order.add_edge(xor_7, loop_7)
root.order.add_edge(xor_8, loop_8)
root.order.add_edge(xor_9, loop_9)
root.order.add_edge(xor_10, loop_1)
root.order.add_edge(xor_11, loop_2)
root.order.add_edge(xor_12, loop_3)
root.order.add_edge(xor_13, loop_4)
root.order.add_edge(xor_14, loop_5)
root.order.add_edge(xor_15, loop_6)
root.order.add_edge(xor_16, loop_7)
root.order.add_edge(xor_17, loop_8)
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)
root.order.add_edge(loop_7, xor_7)
root.order.add_edge(loop_8, xor_8)
root.order.add_edge(loop_9, xor_9)
root.order.add_edge(loop_1, xor_10)
root.order.add_edge(loop_2, xor_11)
root.order.add_edge(loop_3, xor_12)
root.order.add_edge(loop_4, xor_13)
root.order.add_edge(loop_5, xor_14)
root.order.add_edge(loop_6, xor_15)
root.order.add_edge(loop_7, xor_16)
root.order.add_edge(loop_8, xor_17)
root.order.add_edge(xor_1, loop_1)
root.order.add_edge(xor_2, loop_2)
root.order.add_edge(xor_3, loop_3)
root.order.add_edge(xor_4, loop_4)
root.order.add_edge(xor_5, loop_5)
root.order.add_edge(xor_6, loop_6)
root.order.add_edge(xor_7, loop_7)
root.order.add_edge(xor_8, loop_8)
root.order.add_edge(xor_9, loop_9)
root.order.add_edge(xor_10, loop_1)
root.order.add_edge(xor_11, loop_2)
root.order.add_edge(xor_12, loop_3)
root.order.add_edge(xor_13, loop_4)
root.order.add_edge(xor_14, loop_5)
root.order.add_edge(xor_15, loop_6)
root.order.add_edge(xor_16, loop_7)
root.order.add_edge(xor_17, loop_8)
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)
root.order.add_edge(loop_7, xor_7)
root.order.add_edge(loop_8, xor_8)
root.order.add_edge(loop_9, xor_9)
root.order.add_edge(loop_1, xor_10)
root.order.add_edge(loop_2, xor_11)
root.order.add_edge(loop_3, xor_12)
root.order.add_edge(loop_4, xor_13)
root.order.add_edge(loop_5, xor_14)
root.order.add_edge(loop_6, xor_15)
root.order.add_edge(loop_7, xor_16)
root.order.add_edge(loop_8, xor_17)
root.order.add_edge(xor_1, loop_1)
root.order.add_edge(xor_2, loop_2)
root.order.add_edge(xor_3, loop_3)
root.order.add_edge(xor_4, loop_4)
root.order.add_edge(xor_5, loop_5)
root.order.add_edge(xor_6, loop_6)
root.order.add_edge(xor_7, loop_7)
root.order.add_edge(xor_8, loop_8)
root.order.add_edge(xor_9, loop_9)
root.order.add_edge(xor_10, loop_1)
root.order.add_edge(xor_11, loop_2)
root.order.add_edge(xor_12, loop_3)
root.order.add_edge(xor_13, loop_4)
root.order.add_edge(xor_14, loop_5)
root.order.add_edge(xor_15, loop_6)
root.order.add_edge(xor_16, loop_7)
root.order.add_edge(xor_17, loop_8)
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)
root.order.add_edge(loop_7, xor_7)
root.order.add_edge(loop_8, xor_8)
root.order.add_edge(loop_9, xor_9)
root.order.add_edge(loop_1, xor_10)
root.order.add_edge(loop_2, xor_11)
root.order.add_edge(loop_3, xor_12)
root.order.add_edge(loop_4, xor_13)
root.order.add_edge(loop_5, xor_14)
root.order.add_edge(loop_6, xor_15)
root.order.add_edge(loop_7, xor_16)
root.order.add_edge(loop_8, xor_17)
root.order.add_edge(xor_1, loop_1)
root.order.add_edge(xor_2, loop_2)
root.order.add_edge(xor_3, loop_3)
root.order.add_edge(xor_4, loop_4)
root.order.add_edge(xor_5, loop_5)
root.order.add_edge(xor_6, loop_6)
root.order.add_edge(xor_7, loop_7)
root.order.add_edge(xor_8, loop_8)
root.order.add_edge(xor_9, loop_9)
root.order.add_edge(xor_10, loop_1)
root.order.add_edge(xor_11, loop_2)
root.order.add_edge(xor_12, loop_3)
root.order.add_edge(xor_13, loop_4)
root.order.add_edge(xor_14, loop_5)
root.order.add_edge(xor_15, loop_6)
root.order.add_edge(xor_16, loop_7)
root.order.add_edge(xor_17, loop_8)
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)
root.order.add_edge(loop_7, xor_7)
root.order.add_edge(loop_8, xor_8)
root.order.add_edge(loop_9, xor_9)
root.order.add_edge(loop_1, xor_10)
root.order.add_edge(loop_2, xor_11)
root.order.add_edge(loop_3, xor_12)
root.order.add_edge(loop_4, xor_13)
root.order.add_edge(loop_5, xor_14)
root.order.add_edge(loop_6, xor_15)
root.order.add_edge(loop_7, xor_16)
root.order.add_edge(loop_8, xor_17)
root.order.add_edge(xor_1, loop_1)
root.order.add_edge(xor_2, loop_2)
root.order.add_edge(xor_3, loop_3)
root.order.add_edge(xor_4, loop_4)
root.order.add_edge(xor_5, loop_5)
root.order.add_edge(xor_6, loop_6)
root.order.add_edge(xor_7, loop_7)
root.order.add_edge(xor_8, loop_8)
root.order.add_edge(xor_9, loop_9)
root.order.add_edge(xor_10, loop_1)
root.order.add_edge(xor_11, loop_2)
root.order.add_edge(xor_12, loop_3)
root.order.add_edge(xor_13, loop_4)
root.order.add_edge(xor_14, loop_5)
root.order.add_edge(xor_15, loop_6)
root.order.add_edge(xor_16, loop_7)
root.order.add_edge(xor_17, loop_8)
root.order.add_edge(loop_1, xor_1)
root.order.add_edge(loop_2, xor_2)
root.order.add_edge(loop_3, xor_3)
root.order.add_edge(loop_4, xor_4)
root.order.add_edge(loop_5, xor_5)
root.order.add_edge(loop_6, xor_6)