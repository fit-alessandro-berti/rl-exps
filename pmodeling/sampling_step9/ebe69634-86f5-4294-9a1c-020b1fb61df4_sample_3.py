import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Client_Intake = Transition(label='Client Intake')
Needs_Analysis = Transition(label='Needs Analysis')
Developer_Match = Transition(label='Developer Match')
Expert_Vetting = Transition(label='Expert Vetting')
Prototype_Build = Transition(label='Prototype Build')
Feedback_Loop = Transition(label='Feedback Loop')
Model_Refinement = Transition(label='Model Refinement')
License_Draft = Transition(label='License Draft')
IP_Negotiation = Transition(label='IP Negotiation')
Contract_Sign = Transition(label='Contract Sign')
Deployment_Prep = Transition(label='Deployment Prep')
Go_Live = Transition(label='Go Live')
Monitor_Model = Transition(label='Monitor Model')
Optimize_AI = Transition(label='Optimize AI')
Support_Handoff = Transition(label='Support Handoff')
Compliance_Check = Transition(label='Compliance Check')
Final_Review = Transition(label='Final Review')

skip = SilentTransition()

client_intake = OperatorPOWL(operator=Operator.XOR, children=[Client_Intake, skip])
needs_analysis = OperatorPOWL(operator=Operator.XOR, children=[Needs_Analysis, skip])
developer_match = OperatorPOWL(operator=Operator.XOR, children=[Developer_Match, skip])
expert_vetting = OperatorPOWL(operator=Operator.XOR, children=[Expert_Vetting, skip])
prototype_build = OperatorPOWL(operator=Operator.XOR, children=[Prototype_Build, skip])
feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[Feedback_Loop, skip])
model_refinement = OperatorPOWL(operator=Operator.XOR, children=[Model_Refinement, skip])
license_draft = OperatorPOWL(operator=Operator.XOR, children=[License_Draft, skip])
ip_negotiation = OperatorPOWL(operator=Operator.XOR, children=[IP_Negotiation, skip])
contract_sign = OperatorPOWL(operator=Operator.XOR, children=[Contract_Sign, skip])
deployment_prep = OperatorPOWL(operator=Operator.XOR, children=[Deployment_Prep, skip])
go_live = OperatorPOWL(operator=Operator.XOR, children=[Go_Live, skip])
monitor_model = OperatorPOWL(operator=Operator.XOR, children=[Monitor_Model, skip])
optimize_ai = OperatorPOWL(operator=Operator.XOR, children=[Optimize_AI, skip])
support_handoff = OperatorPOWL(operator=Operator.XOR, children=[Support_Handoff, skip])
compliance_check = OperatorPOWL(operator=Operator.XOR, children=[Compliance_Check, skip])
final_review = OperatorPOWL(operator=Operator.XOR, children=[Final_Review, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[Needs_Analysis, Developer_Match, Expert_Vetting, Prototype_Build, Feedback_Loop, Model_Refinement, License_Draft, IP_Negotiation, Contract_Sign, Deployment_Prep, Go_Live, Monitor_Model, Optimize_AI, Support_Handoff, Compliance_Check, Final_Review])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[Needs_Analysis, Developer_Match, Expert_Vetting, Prototype_Build, Feedback_Loop, Model_Refinement, License_Draft, IP_Negotiation, Contract_Sign, Deployment_Prep, Go_Live, Monitor_Model, Optimize_AI, Support_Handoff, Compliance_Check, Final_Review])

root = StrictPartialOrder(nodes=[loop1, loop2, client_intake, needs_analysis, developer_match, expert_vetting, prototype_build, feedback_loop, model_refinement, license_draft, ip_negotiation, contract_sign, deployment_prep, go_live, monitor_model, optimize_ai, support_handoff, compliance_check, final_review])
root.order.add_edge(loop1, client_intake)
root.order.add_edge(loop1, needs_analysis)
root.order.add_edge(loop1, developer_match)
root.order.add_edge(loop1, expert_vetting)
root.order.add_edge(loop1, prototype_build)
root.order.add_edge(loop1, feedback_loop)
root.order.add_edge(loop1, model_refinement)
root.order.add_edge(loop1, license_draft)
root.order.add_edge(loop1, ip_negotiation)
root.order.add_edge(loop1, contract_sign)
root.order.add_edge(loop1, deployment_prep)
root.order.add_edge(loop1, go_live)
root.order.add_edge(loop1, monitor_model)
root.order.add_edge(loop1, optimize_ai)
root.order.add_edge(loop1, support_handoff)
root.order.add_edge(loop1, compliance_check)
root.order.add_edge(loop1, final_review)
root.order.add_edge(loop2, client_intake)
root.order.add_edge(loop2, needs_analysis)
root.order.add_edge(loop2, developer_match)
root.order.add_edge(loop2, expert_vetting)
root.order.add_edge(loop2, prototype_build)
root.order.add_edge(loop2, feedback_loop)
root.order.add_edge(loop2, model_refinement)
root.order.add_edge(loop2, license_draft)
root.order.add_edge(loop2, ip_negotiation)
root.order.add_edge(loop2, contract_sign)
root.order.add_edge(loop2, deployment_prep)
root.order.add_edge(loop2, go_live)
root.order.add_edge(loop2, monitor_model)
root.order.add_edge(loop2, optimize_ai)
root.order.add_edge(loop2, support_handoff)
root.order.add_edge(loop2, compliance_check)
root.order.add_edge(loop2, final_review)