import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteAnalysis = Transition(label='Site Analysis')
ClimateSetup = Transition(label='Climate Setup')
NutrientMix = Transition(label='Nutrient Mix')
SeedGerminate = Transition(label='Seed Germinate')
AutoPlanting = Transition(label='Auto Planting')
IrrigationSetup = Transition(label='Irrigation Setup')
IoTMonitoring = Transition(label='IoT Monitoring')
PestDetection = Transition(label='Pest Detection')
DronePollinate = Transition(label='Drone Pollinate')
PesticideSpray = Transition(label='Pesticide Spray')
RoboticHarvest = Transition(label='Robotic Harvest')
QualityCheck = Transition(label='Quality Check')
PackageProduct = Transition(label='Package Product')
WasteRecycle = Transition(label='Waste Recycle')
EnergyOptimize = Transition(label='Energy Optimize')
DataLogging = Transition(label='Data Logging')

skip = SilentTransition()

siteAnalysisLoop = OperatorPOWL(operator=Operator.LOOP, children=[SiteAnalysis, ClimateSetup])
climateSetupLoop = OperatorPOWL(operator=Operator.LOOP, children=[ClimateSetup, NutrientMix])
nutrientMixLoop = OperatorPOWL(operator=Operator.LOOP, children=[NutrientMix, SeedGerminate])
seedGerminateLoop = OperatorPOWL(operator=Operator.LOOP, children=[SeedGerminate, AutoPlanting])
autoPlantingLoop = OperatorPOWL(operator=Operator.LOOP, children=[AutoPlanting, IrrigationSetup])
irrigationSetupLoop = OperatorPOWL(operator=Operator.LOOP, children=[IrrigationSetup, IoTMonitoring])
iotMonitoringLoop = OperatorPOWL(operator=Operator.LOOP, children=[IoTMonitoring, PestDetection])
pestDetectionLoop = OperatorPOWL(operator=Operator.LOOP, children=[PestDetection, DronePollinate])
dronePollinateLoop = OperatorPOWL(operator=Operator.LOOP, children=[DronePollinate, PesticideSpray])
pesticideSprayLoop = OperatorPOWL(operator=Operator.LOOP, children=[PesticideSpray, RoboticHarvest])
roboticHarvestLoop = OperatorPOWL(operator=Operator.LOOP, children=[RoboticHarvest, QualityCheck])
qualityCheckLoop = OperatorPOWL(operator=Operator.LOOP, children=[QualityCheck, PackageProduct])
packageProductLoop = OperatorPOWL(operator=Operator.LOOP, children=[PackageProduct, WasteRecycle])
wasteRecycleLoop = OperatorPOWL(operator=Operator.LOOP, children=[WasteRecycle, EnergyOptimize])
energyOptimizeLoop = OperatorPOWL(operator=Operator.LOOP, children=[EnergyOptimize, DataLogging])

root = StrictPartialOrder(nodes=[siteAnalysisLoop, climateSetupLoop, nutrientMixLoop, seedGerminateLoop, autoPlantingLoop, irrigationSetupLoop, iotMonitoringLoop, pestDetectionLoop, dronePollinateLoop, pesticideSprayLoop, roboticHarvestLoop, qualityCheckLoop, packageProductLoop, wasteRecycleLoop, energyOptimizeLoop, dataLogging])
root.order.add_edge(siteAnalysisLoop, climateSetupLoop)
root.order.add_edge(climateSetupLoop, nutrientMixLoop)
root.order.add_edge(nutrientMixLoop, seedGerminateLoop)
root.order.add_edge(seedGerminateLoop, autoPlantingLoop)
root.order.add_edge(autoPlantingLoop, irrigationSetupLoop)
root.order.add_edge(irrigationSetupLoop, iotMonitoringLoop)
root.order.add_edge(iotMonitoringLoop, pestDetectionLoop)
root.order.add_edge(pestDetectionLoop, dronePollinateLoop)
root.order.add_edge(dronePollinateLoop, pesticideSprayLoop)
root.order.add_edge(pesticideSprayLoop, roboticHarvestLoop)
root.order.add_edge(roboticHarvestLoop, qualityCheckLoop)
root.order.add_edge(qualityCheckLoop, packageProductLoop)
root.order.add_edge(packageProductLoop, wasteRecycleLoop)
root.order.add_edge(wasteRecycleLoop, energyOptimizeLoop)
root.order.add_edge(energyOptimizeLoop, dataLogging)