import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Initial_Inspect = Transition(label='Initial Inspect')
Material_Test = Transition(label='Material Test')
Imaging_Scan = Transition(label='Imaging Scan')
Historical_Check = Transition(label='Historical Check')
Expert_Consult = Transition(label='Expert Consult')
Provenance_Trace = Transition(label='Provenance Trace')
Forgery_Detect = Transition(label='Forgery Detect')
Restoration_Map = Transition(label='Restoration Map')
Market_Analyze = Transition(label='Market Analyze')
Auction_Review = Transition(label='Auction Review')
Value_Assess = Transition(label='Value Assess')
Report_Draft = Transition(label='Report Draft')
Board_Review = Transition(label='Board Review')
Certification = Transition(label='Certification')
Release_Artifact = Transition(label='Release Artifact')
Chain_Custody = Transition(label='Chain Custody')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Initial_Inspect, Material_Test])
xor = OperatorPOWL(operator=Operator.XOR, children=[Imaging_Scan, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Historical_Check, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Expert_Consult, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Provenance_Trace, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Forgery_Detect, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Restoration_Map, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Market_Analyze, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Auction_Review, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Value_Assess, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Report_Draft, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Board_Review, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Certification, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Release_Artifact, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[Chain_Custody, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, loop)