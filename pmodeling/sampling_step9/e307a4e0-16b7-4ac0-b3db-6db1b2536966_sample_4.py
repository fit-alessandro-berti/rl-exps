import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
InitialAssess = Transition(label='Initial Assess')
ArtifactScan = Transition(label='Artifact Scan')
ConditionMap = Transition(label='Condition Map')
MaterialTest = Transition(label='Material Test')
CleaningPhase = Transition(label='Cleaning Phase')
StabilityCheck = Transition(label='Stability Check')
MinorRepair = Transition(label='Minor Repair')
StructuralReinforce = Transition(label='Structural Reinforce')
SurfaceRestore = Transition(label='Surface Restore')
CoatingApply = Transition(label='Coating Apply')
EthicsReview = Transition(label='Ethics Review')
ProvenanceVerify = Transition(label='Provenance Verify')
ClientUpdate = Transition(label='Client Update')
FinalReport = Transition(label='Final Report')
ArchiveStore = Transition(label='Archive Store')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[ArtifactScan, ConditionMap, MaterialTest])
xor = OperatorPOWL(operator=Operator.XOR, children=[CleaningPhase, skip])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[StabilityCheck, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[MinorRepair, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[StructuralReinforce, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[SurfaceRestore, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[CoatingApply, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[EthicsReview, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[ProvenanceVerify, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[ClientUpdate, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[FinalReport, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[ArchiveStore, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10])
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor1)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)