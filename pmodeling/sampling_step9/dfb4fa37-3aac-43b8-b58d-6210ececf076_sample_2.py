import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
Site_Analysis = Transition(label='Site Analysis')
Permit_Securing = Transition(label='Permit Securing')
Unit_Designing = Transition(label='Unit Designing')
LED_Sourcing = Transition(label='LED Sourcing')
Hydroponic_Setup = Transition(label='Hydroponic Setup')
Staff_Hiring = Transition(label='Staff Hiring')
Pilot_Cultivation = Transition(label='Pilot Cultivation')
Data_Integration = Transition(label='Data Integration')
Waste_Recycling = Transition(label='Waste Recycling')
Local_Distribution = Transition(label='Local Distribution')
Subscription_Setup = Transition(label='Subscription Setup')
IoT_Deployment = Transition(label='IoT Deployment')
Sustainability_Audit = Transition(label='Sustainability Audit')
Market_Testing = Transition(label='Market Testing')
Process_Refinement = Transition(label='Process Refinement')

# Define silent transitions
skip = SilentTransition()

# Define loop nodes
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[Pilot_Cultivation, Data_Integration])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[Waste_Recycling, Local_Distribution])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[Subscription_Setup, IoT_Deployment])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[Sustainability_Audit, Market_Testing])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[Process_Refinement])

# Define exclusive choice nodes
xor1 = OperatorPOWL(operator=Operator.XOR, children=[skip, loop1])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[skip, loop2])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[skip, loop3])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[skip, loop4])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[skip, loop5])

# Define root POWL model
root = StrictPartialOrder(nodes=[Site_Analysis, Permit_Securing, Unit_Designing, LED_Sourcing, Hydroponic_Setup, Staff_Hiring, xor1, xor2, xor3, xor4, xor5])
root.order.add_edge(Site_Analysis, Permit_Securing)
root.order.add_edge(Permit_Securing, Unit_Designing)
root.order.add_edge(Unit_Designing, LED_Sourcing)
root.order.add_edge(LED_Sourcing, Hydroponic_Setup)
root.order.add_edge(Hydroponic_Setup, Staff_Hiring)
root.order.add_edge(Staff_Hiring, xor1)
root.order.add_edge(Staff_Hiring, xor2)
root.order.add_edge(Staff_Hiring, xor3)
root.order.add_edge(Staff_Hiring, xor4)
root.order.add_edge(Staff_Hiring, xor5)
root.order.add_edge(xor1, loop1)
root.order.add_edge(xor2, loop2)
root.order.add_edge(xor3, loop3)
root.order.add_edge(xor4, loop4)
root.order.add_edge(xor5, loop5)
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4, loop4)
root.order.add_edge(loop5, loop5)
root.order.add_edge(xor1, xor1)
root.order.add_edge(xor2, xor2)
root.order.add_edge(xor3, xor3)
root.order.add_edge(xor4, xor4)
root.order.add_edge(xor5, xor5)
root.order.add_edge(loop1, loop1)
root.order.add_edge(loop2, loop2)
root.order.add_edge(loop3, loop3)
root.order.add_edge(loop4,