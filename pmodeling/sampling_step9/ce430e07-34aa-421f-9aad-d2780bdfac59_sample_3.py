import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
RiskAssess = Transition(label='Risk Assess')
SourceAlternatives = Transition(label='Source Alternatives')
SupplierAudit = Transition(label='Supplier Audit')
ContractReview = Transition(label='Contract Review')
RegulationCheck = Transition(label='Regulation Check')
InventoryScan = Transition(label='Inventory Scan')
LogisticsReroute = Transition(label='Logistics Reroute')
CustomsNotify = Transition(label='Customs Notify')
StakeholderAlert = Transition(label='Stakeholder Alert')
DataAnalyze = Transition(label='Data Analyze')
CostForecast = Transition(label='Cost Forecast')
ComplianceVerify = Transition(label='Compliance Verify')
ScenarioPlan = Transition(label='Scenario Plan')
DecisionGate = Transition(label='Decision Gate')
FeedbackLoop = Transition(label='Feedback Loop')
ReportGenerate = Transition(label='Report Generate')
MarketMonitor = Transition(label='Market Monitor')
TeamSync = Transition(label='Team Sync')
skip = SilentTransition()
risk_assess_loop = OperatorPOWL(operator=Operator.LOOP, children=[RiskAssess, SourceAlternatives])
alternative_sourcing = OperatorPOWL(operator=Operator.XOR, children=[SupplierAudit, skip])
logistics_reroute = OperatorPOWL(operator=Operator.LOOP, children=[LogisticsReroute, CustomsNotify])
stakeholder_alert = OperatorPOWL(operator=Operator.LOOP, children=[StakeholderAlert, DataAnalyze])
compliance_verify = OperatorPOWL(operator=Operator.LOOP, children=[ComplianceVerify, CostForecast])
scenario_plan = OperatorPOWL(operator=Operator.LOOP, children=[ScenarioPlan, DecisionGate])
feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[FeedbackLoop, ReportGenerate])
market_monitor = OperatorPOWL(operator=Operator.LOOP, children=[MarketMonitor, TeamSync])
root = StrictPartialOrder(nodes=[risk_assess_loop, alternative_sourcing, logistics_reroute, stakeholder_alert, compliance_verify, scenario_plan, feedback_loop, market_monitor])
root.order.add_edge(risk_assess_loop, alternative_sourcing)
root.order.add_edge(alternative_sourcing, logistics_reroute)
root.order.add_edge(logistics_reroute, stakeholder_alert)
root.order.add_edge(stakeholder_alert, compliance_verify)
root.order.add_edge(compliance_verify, scenario_plan)
root.order.add_edge(scenario_plan, feedback_loop)
root.order.add_edge(feedback_loop, market_monitor)