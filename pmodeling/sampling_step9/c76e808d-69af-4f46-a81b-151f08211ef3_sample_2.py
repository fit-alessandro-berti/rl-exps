import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions
milk_sourcing = Transition(label='Milk Sourcing')
culture_selection = Transition(label='Culture Selection')
milk_testing = Transition(label='Milk Testing')
curd_formation = Transition(label='Curd Formation')
whey_separation = Transition(label='Whey Separation')
molding_cheese = Transition(label='Molding Cheese')
salting_process = Transition(label='Salting Process')
aging_setup = Transition(label='Aging Setup')
env_monitoring = Transition(label='Env Monitoring')
flavor_profiling = Transition(label='Flavor Profiling')
packaging_design = Transition(label='Packaging Design')
blockchain_entry = Transition(label='Blockchain Entry')
quality_audit = Transition(label='Quality Audit')
retail_sync = Transition(label='Retail Sync')
transport_prep = Transition(label='Transport Prep')
delivery_tracking = Transition(label='Delivery Tracking')
customer_feedback = Transition(label='Customer Feedback')
skip = SilentTransition()

# Define loops and choices
aging_loop = OperatorPOWL(operator=Operator.LOOP, children=[aging_setup, env_monitoring, flavor_profiling])
retail_sync_loop = OperatorPOWL(operator=Operator.LOOP, children=[retail_sync, transport_prep, delivery_tracking, customer_feedback])
blockchain_entry_loop = OperatorPOWL(operator=Operator.LOOP, children=[blockchain_entry, quality_audit])
milk_sourcing_loop = OperatorPOWL(operator=Operator.LOOP, children=[milk_sourcing])
culture_selection_loop = OperatorPOWL(operator=Operator.LOOP, children=[culture_selection])
milk_testing_loop = OperatorPOWL(operator=Operator.LOOP, children=[milk_testing])
curd_formation_loop = OperatorPOWL(operator=Operator.LOOP, children=[curd_formation])
whey_separation_loop = OperatorPOWL(operator=Operator.LOOP, children=[whey_separation])
molding_cheese_loop = OperatorPOWL(operator=Operator.LOOP, children=[molding_cheese])
salting_process_loop = OperatorPOWL(operator=Operator.LOOP, children=[salting_process])
aging_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[aging_setup])
env_monitoring_loop = OperatorPOWL(operator=Operator.LOOP, children=[env_monitoring])
flavor_profiling_loop = OperatorPOWL(operator=Operator.LOOP, children=[flavor_profiling])
packaging_design_loop = OperatorPOWL(operator=Operator.LOOP, children=[packaging_design])
blockchain_entry_loop = OperatorPOWL(operator=Operator.LOOP, children=[blockchain_entry])
quality_audit_loop = OperatorPOWL(operator=Operator.LOOP, children=[quality_audit])
retail_sync_loop = OperatorPOWL(operator=Operator.LOOP, children=[retail_sync])
transport_prep_loop = OperatorPOWL(operator=Operator.LOOP, children=[transport_prep])
delivery_tracking_loop = OperatorPOWL(operator=Operator.LOOP, children=[delivery_tracking])
customer_feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[customer_feedback])

# Define XOR choices
milk_sourcing_xor = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing_loop, skip])
culture_selection_xor = OperatorPOWL(operator=Operator.XOR, children=[culture_selection_loop, skip])
milk_testing_xor = OperatorPOWL(operator=Operator.XOR, children=[milk_testing_loop, skip])
curd_formation_xor = OperatorPOWL(operator=Operator.XOR, children=[curd_formation_loop, skip])
whey_separation_xor = OperatorPOWL(operator=Operator.XOR, children=[whey_separation_loop, skip])
molding_cheese_xor = OperatorPOWL(operator=Operator.XOR, children=[molding_cheese_loop, skip])
salting_process_xor = OperatorPOWL(operator=Operator.XOR, children=[salting_process_loop, skip])
aging_setup_xor = OperatorPOWL(operator=Operator.XOR, children=[aging_setup_loop, skip])
env_monitoring_xor = OperatorPOWL(operator=Operator.XOR, children=[env_monitoring_loop, skip])
flavor_profiling_xor = OperatorPOWL(operator=Operator.XOR, children=[flavor_profiling_loop, skip])
packaging_design_xor = OperatorPOWL(operator=Operator.XOR, children=[packaging_design_loop, skip])
blockchain_entry_xor = OperatorPOWL(operator=Operator.XOR, children=[blockchain_entry_loop, skip])
quality_audit_xor = OperatorPOWL(operator=Operator.XOR, children=[quality_audit_loop, skip])
retail_sync_xor = OperatorPOWL(operator=Operator.XOR, children=[retail_sync_loop, skip])
transport_prep_xor = OperatorPOWL(operator=Operator.XOR, children=[transport_prep_loop, skip])
delivery_tracking_xor = OperatorPOWL(operator=Operator.XOR, children=[delivery_tracking_loop, skip])
customer_feedback_xor = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback_loop, skip])

# Define root
root = StrictPartialOrder(nodes=[aging_loop, retail_sync_loop, blockchain_entry_loop, milk_sourcing_xor, culture_selection_xor, milk_testing_xor, curd_formation_xor, whey_separation_xor, molding_cheese_xor, salting_process_xor, aging_setup_xor, env_monitoring_xor, flavor_profiling_xor, packaging_design_xor, blockchain_entry_xor, quality_audit_xor, retail_sync_xor, transport_prep_xor, delivery_tracking_xor, customer_feedback_xor])
root.order.add_edge(aging_loop, retail_sync_loop)
root.order.add_edge(retail_sync_loop, blockchain_entry_loop)
root.order.add_edge(blockchain_entry_loop, milk_sourcing_xor)
root.order.add_edge(milk_sourcing_xor, culture_selection_xor)
root.order.add_edge(culture_selection_xor, milk_testing_xor)
root.order.add_edge(milk_testing_xor, curd_formation_xor)
root.order.add_edge(curd_formation_xor, whey_separation_xor)
root.order.add_edge(whey_separation_xor, molding_cheese_xor)
root.order.add_edge(molding_cheese_xor, salting_process_xor)
root.order.add_edge(salting_process_xor, aging_setup_xor)
root.order.add_edge(aging_setup_xor, env_monitoring_xor)
root.order.add_edge(env_monitoring_xor, flavor_profiling_xor)
root.order.add_edge(flavor_profiling_xor, packaging_design_xor)
root.order.add_edge(packaging_design_xor, blockchain_entry_xor)
root.order.add_edge(blockchain_entry_xor, quality_audit_xor)
root.order.add_edge(quality_audit_xor, retail_sync_xor)
root.order.add_edge(retail_sync_xor, transport_prep_xor)
root.order.add_edge(transport_prep_xor, delivery_tracking_xor)
root.order.add_edge(delivery_tracking_xor, customer_feedback_xor)