import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

DroneDesign = Transition(label='Drone Design')
RegulatoryCheck = Transition(label='Regulatory Check')
NavSystem = Transition(label='Nav System')
PartnerSetup = Transition(label='Partner Setup')
OperatorTraining = Transition(label='Operator Training')
TestFlights = Transition(label='Test Flights')
WeatherReview = Transition(label='Weather Review')
RouteOptimize = Transition(label='Route Optimize')
PartsLogistics = Transition(label='Parts Logistics')
FeedbackLoop = Transition(label='Feedback Loop')
RiskAssess = Transition(label='Risk Assess')
EmergencyPlan = Transition(label='Emergency Plan')
ComplianceAudit = Transition(label='Compliance Audit')
DataSync = Transition(label='Data Sync')
ServiceLaunch = Transition(label='Service Launch')

skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[DroneDesign, RegulatoryCheck])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[NavSystem, PartnerSetup])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[OperatorTraining, TestFlights])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[WeatherReview, RouteOptimize])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[PartsLogistics, FeedbackLoop])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[RiskAssess, EmergencyPlan])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[ComplianceAudit, DataSync])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[ServiceLaunch])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[loop1, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[loop2, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[loop3, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[loop4, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[loop5, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[loop6, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[loop7, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[loop8, skip])

root = StrictPartialOrder(nodes=[xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)