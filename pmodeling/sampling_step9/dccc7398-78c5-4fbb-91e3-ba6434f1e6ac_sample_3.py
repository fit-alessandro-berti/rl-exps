import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Site_Survey = Transition(label='Site Survey')
Design_Draft = Transition(label='Design Draft')
Permit_Review = Transition(label='Permit Review')
Structure_Build = Transition(label='Structure Build')
Enviro_Setup = Transition(label='Enviro Setup')
Nutrient_Mix = Transition(label='Nutrient Mix')
Seed_Selection = Transition(label='Seed Selection')
Plant_Robots = Transition(label='Plant Robots')
Sensor_Install = Transition(label='Sensor Install')
Data_Sync = Transition(label='Data Sync')
Growth_Monitor = Transition(label='Growth Monitor')
Pest_Control = Transition(label='Pest Control')
Harvest_Plan = Transition(label='Harvest Plan')
Quality_Check = Transition(label='Quality Check')
Market_Launch = Transition(label='Market Launch')
Feedback_Loop = Transition(label='Feedback Loop')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Site_Survey, Design_Draft])
xor = OperatorPOWL(operator=Operator.XOR, children=[Enviro_Setup, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Nutrient_Mix, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Seed_Selection, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Plant_Robots, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Sensor_Install, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Data_Sync, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Growth_Monitor, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Pest_Control, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Harvest_Plan, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Quality_Check, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Market_Launch, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Feedback_Loop, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12])
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(loop, xor11)
root.order.add_edge(loop, xor12)