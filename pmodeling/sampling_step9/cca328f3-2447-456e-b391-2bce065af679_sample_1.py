import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
artifact_intake = Transition(label='Artifact Intake')
provenance_check = Transition(label='Provenance Check')
material_scan = Transition(label='Material Scan')
style_compare = Transition(label='Style Compare')
digital_capture = Transition(label='Digital Capture')
expert_review = Transition(label='Expert Review')
database_search = Transition(label='Database Search')
legal_audit = Transition(label='Legal Audit')
cultural_assess = Transition(label='Cultural Assess')
data_synthesis = Transition(label='Data Synthesis')
report_draft = Transition(label='Report Draft')
archival_store = Transition(label='Archival Store')
display_approve = Transition(label='Display Approve')
lender_notify = Transition(label='Lender Notify')
investigation_flag = Transition(label='Investigation Flag')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[artifact_intake, provenance_check])
xor = OperatorPOWL(operator=Operator.XOR, children=[material_scan, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[style_compare, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[digital_capture, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[expert_review, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[database_search, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[legal_audit, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[cultural_assess, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[data_synthesis, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[report_draft, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[archival_store, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[display_approve, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[lender_notify, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[investigation_flag, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(loop, xor11)
root.order.add_edge(loop, xor12)
root.order.add_edge(loop, xor13)