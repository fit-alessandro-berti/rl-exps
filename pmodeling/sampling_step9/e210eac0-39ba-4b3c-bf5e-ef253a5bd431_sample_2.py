import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
regulation_check = Transition(label='Regulation Check')
modular_design = Transition(label='Modular Design')
material_sourcing = Transition(label='Material Sourcing')
energy_integration = Transition(label='Energy Integration')
climate_setup = Transition(label='Climate Setup')
nutrient_mix = Transition(label='Nutrient Mix')
system_assembly = Transition(label='System Assembly')
automation_config = Transition(label='Automation Config')
crop_seeding = Transition(label='Crop Seeding')
growth_monitoring = Transition(label='Growth Monitoring')
waste_handling = Transition(label='Waste Handling')
community_meet = Transition(label='Community Meet')
data_analysis = Transition(label='Data Analysis')
feedback_loop = Transition(label='Feedback Loop')
yield_forecast = Transition(label='Yield Forecast')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[yield_forecast, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[climate_setup, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[energy_integration, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[modular_design, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[site_survey, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[regulation_check, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[material_sourcing, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[automation_config, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[crop_seeding, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[growth_monitoring, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[waste_handling, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[community_meet, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[data_analysis, skip])

loop = OperatorPOWL(operator=Operator.LOOP, children=[yield_forecast, skip])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[climate_setup, skip])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[energy_integration, skip])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[modular_design, skip])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, skip])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[regulation_check, skip])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[material_sourcing, skip])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[automation_config, skip])
loop9 = OperatorPOWL(operator=Operator.LOOP, children=[crop_seeding, skip])
loop10 = OperatorPOWL(operator=Operator.LOOP, children=[growth_monitoring, skip])
loop11 = OperatorPOWL(operator=Operator.LOOP, children=[waste_handling, skip])
loop12 = OperatorPOWL(operator=Operator.LOOP, children=[community_meet, skip])
loop13 = OperatorPOWL(operator=Operator.LOOP, children=[data_analysis, skip])

root = StrictPartialOrder(nodes=[xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, loop, loop2, loop3, loop4, loop5, loop6, loop7, loop8, loop9, loop10, loop11, loop12, loop13])
root.order.add_edge(loop, xor)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)
root.order.add_edge(loop6, xor6)
root.order.add_edge(loop7, xor7)
root.order.add_edge(loop8, xor8)
root.order.add_edge(loop9, xor9)
root.order.add_edge(loop10, xor10)
root.order.add_edge(loop11, xor11)
root.order.add_edge(loop12, xor12)
root.order.add_edge(loop13, xor13)

print(root)