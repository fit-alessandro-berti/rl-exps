import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
ClientProfiling = Transition(label='Client Profiling')
IngredientSourcing = Transition(label='Ingredient Sourcing')
QualityCheck = Transition(label='Quality Check')
BlendExperiment = Transition(label='Blend Experiment')
MaturationCycle = Transition(label='Maturation Cycle')
SensoryPanel = Transition(label='Sensory Panel')
RefinementLoop = Transition(label='Refinement Loop')
StabilityTest = Transition(label='Stability Test')
PackagingDesign = Transition(label='Packaging Design')
BatchCoordination = Transition(label='Batch Coordination')
ComplianceAudit = Transition(label='Compliance Audit')
MarketSurvey = Transition(label='Market Survey')
FeedbackReview = Transition(label='Feedback Review')
OrderFinalize = Transition(label='Order Finalize')
DistributionPlan = Transition(label='Distribution Plan')
InventoryUpdate = Transition(label='Inventory Update')

# Define silent transitions
skip = SilentTransition()

# Define the POWL model
xor1 = OperatorPOWL(operator=Operator.XOR, children=[ClientProfiling, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[IngredientSourcing, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[QualityCheck, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[BlendExperiment, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[MaturationCycle, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[SensoryPanel, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[RefinementLoop, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[StabilityTest, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[PackagingDesign, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[BatchCoordination, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[ComplianceAudit, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[MarketSurvey, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[FeedbackReview, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[OrderFinalize, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[DistributionPlan, skip])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[InventoryUpdate, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[xor1, xor2])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor3, xor4])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[xor5, xor6])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[xor7, xor8])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor9, xor10])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[xor11, xor12])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[xor13, xor14])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[xor15, xor16])

root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8])
root.order.add_edge(loop1, xor2)
root.order.add_edge(loop2, xor3)
root.order.add_edge(loop3, xor4)
root.order.add_edge(loop4, xor5)
root.order.add_edge(loop5, xor6)
root.order.add_edge(loop6, xor7)
root.order.add_edge(loop7, xor8)
root.order.add_edge(loop8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)
root.order.add_edge(xor15, xor16)
root.order.add_edge(xor16, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)
root.order.add_edge(xor15, xor16)