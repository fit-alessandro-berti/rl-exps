import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Initial_Assess = Transition(label='Initial Assess')
Condition_Scan = Transition(label='Condition Scan')
Material_Test = Transition(label='Material Test')
Historical_Check = Transition(label='Historical Check')
Provenance_Verify = Transition(label='Provenance Verify')
Parts_Sourcing = Transition(label='Parts Sourcing')
Gentle_Clean = Transition(label='Gentle Clean')
Stabilize_Item = Transition(label='Stabilize Item')
Structural_Repair = Transition(label='Structural Repair')
Surface_Finish = Transition(label='Surface Finish')
Expert_Consult = Transition(label='Expert Consult')
Archival_Review = Transition(label='Archival Review')
Ethics_Audit = Transition(label='Ethics Audit')
Quality_Inspect = Transition(label='Quality Inspect')
Photo_Document = Transition(label='Photo Document')
Packaging_Prep = Transition(label='Packaging Prep')
Report_Generate = Transition(label='Report Generate')
Certify_Provenance = Transition(label='Certify Provenance')
skip = SilentTransition()

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[Expert_Consult, Archival_Review, Ethics_Audit])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[Quality_Inspect, skip])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[Historical_Check, Provenance_Verify, Parts_Sourcing])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Gentle_Clean, skip])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[Material_Test, Condition_Scan, Initial_Assess])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Structural_Repair, skip])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[Surface_Finish, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Report_Generate, skip])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[Certify_Provenance, skip])

root = StrictPartialOrder(nodes=[loop1, xor1, loop2, xor2, loop3, xor3, loop4, xor4, loop5])
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)