import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
climate_plan = Transition(label='Climate Plan')
system_design = Transition(label='System Design')
ai_setup = Transition(label='AI Setup')
seed_sourcing = Transition(label='Seed Sourcing')
nutrient_mix = Transition(label='Nutrient Mix')
install_hydro = Transition(label='Install Hydro')
energy_audit = Transition(label='Energy Audit')
staff_training = Transition(label='Staff Training')
trial_growth = Transition(label='Trial Growth')
yield_measure = Transition(label='Yield Measure')
waste_cycle = Transition(label='Waste Cycle')
compliance_check = Transition(label='Compliance Check')
market_study = Transition(label='Market Study')
community_meet = Transition(label='Community Meet')
optimize_environment = Transition(label='Optimize Environment')

skip = SilentTransition()

site_survey_loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey])
climate_plan_xor = OperatorPOWL(operator=Operator.XOR, children=[climate_plan, skip])
system_design_xor = OperatorPOWL(operator=Operator.XOR, children=[system_design, skip])
ai_setup_xor = OperatorPOWL(operator=Operator.XOR, children=[ai_setup, skip])
seed_sourcing_xor = OperatorPOWL(operator=Operator.XOR, children=[seed_sourcing, skip])
nutrient_mix_xor = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, skip])
install_hydro_xor = OperatorPOWL(operator=Operator.XOR, children=[install_hydro, skip])
energy_audit_xor = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
staff_training_xor = OperatorPOWL(operator=Operator.XOR, children=[staff_training, skip])
trial_growth_xor = OperatorPOWL(operator=Operator.XOR, children=[trial_growth, skip])
yield_measure_xor = OperatorPOWL(operator=Operator.XOR, children=[yield_measure, skip])
waste_cycle_xor = OperatorPOWL(operator=Operator.XOR, children=[waste_cycle, skip])
compliance_check_xor = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, skip])
market_study_xor = OperatorPOWL(operator=Operator.XOR, children=[market_study, skip])
community_meet_xor = OperatorPOWL(operator=Operator.XOR, children=[community_meet, skip])
optimize_environment_xor = OperatorPOWL(operator=Operator.XOR, children=[optimize_environment, skip])

root = StrictPartialOrder(nodes=[site_survey_loop, climate_plan_xor, system_design_xor, ai_setup_xor, seed_sourcing_xor, nutrient_mix_xor, install_hydro_xor, energy_audit_xor, staff_training_xor, trial_growth_xor, yield_measure_xor, waste_cycle_xor, compliance_check_xor, market_study_xor, community_meet_xor, optimize_environment_xor])
root.order.add_edge(site_survey_loop, climate_plan_xor)
root.order.add_edge(site_survey_loop, system_design_xor)
root.order.add_edge(climate_plan_xor, ai_setup_xor)
root.order.add_edge(system_design_xor, ai_setup_xor)
root.order.add_edge(climate_plan_xor, seed_sourcing_xor)
root.order.add_edge(system_design_xor, seed_sourcing_xor)
root.order.add_edge(climate_plan_xor, nutrient_mix_xor)
root.order.add_edge(system_design_xor, nutrient_mix_xor)
root.order.add_edge(climate_plan_xor, install_hydro_xor)
root.order.add_edge(system_design_xor, install_hydro_xor)
root.order.add_edge(climate_plan_xor, energy_audit_xor)
root.order.add_edge(system_design_xor, energy_audit_xor)
root.order.add_edge(climate_plan_xor, staff_training_xor)
root.order.add_edge(system_design_xor, staff_training_xor)
root.order.add_edge(climate_plan_xor, trial_growth_xor)
root.order.add_edge(system_design_xor, trial_growth_xor)
root.order.add_edge(climate_plan_xor, yield_measure_xor)
root.order.add_edge(system_design_xor, yield_measure_xor)
root.order.add_edge(climate_plan_xor, waste_cycle_xor)
root.order.add_edge(system_design_xor, waste_cycle_xor)
root.order.add_edge(climate_plan_xor, compliance_check_xor)
root.order.add_edge(system_design_xor, compliance_check_xor)
root.order.add_edge(climate_plan_xor, market_study_xor)
root.order.add_edge(system_design_xor, market_study_xor)
root.order.add_edge(climate_plan_xor, community_meet_xor)
root.order.add_edge(system_design_xor, community_meet_xor)
root.order.add_edge(climate_plan_xor, optimize_environment_xor)
root.order.add_edge(system_design_xor, optimize_environment_xor)

print(root)