import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteAnalysis = Transition(label='Site Analysis')
ClimateSetup = Transition(label='Climate Setup')
NutrientMix = Transition(label='Nutrient Mix')
SeedGerminate = Transition(label='Seed Germinate')
AutoPlanting = Transition(label='Auto Planting')
IrrigationSetup = Transition(label='Irrigation Setup')
IoTMonitoring = Transition(label='IoT Monitoring')
PestDetection = Transition(label='Pest Detection')
DronePollinate = Transition(label='Drone Pollinate')
PesticideSpray = Transition(label='Pesticide Spray')
RoboticHarvest = Transition(label='Robotic Harvest')
QualityCheck = Transition(label='Quality Check')
PackageProduct = Transition(label='Package Product')
WasteRecycle = Transition(label='Waste Recycle')
EnergyOptimize = Transition(label='Energy Optimize')
DataLogging = Transition(label='Data Logging')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[SiteAnalysis, ClimateSetup])
xor = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[SeedGerminate, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[AutoPlanting, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[IrrigationSetup, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[IoTMonitoring, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[PestDetection, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[DronePollinate, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[PesticideSpray, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[RoboticHarvest, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[QualityCheck, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[PackageProduct, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[WasteRecycle, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[EnergyOptimize, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[DataLogging, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)