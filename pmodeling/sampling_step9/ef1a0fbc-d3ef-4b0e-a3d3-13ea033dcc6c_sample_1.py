import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
milk_sourcing = Transition(label='Milk Sourcing')
farm_selection = Transition(label='Farm Selection')
quality_testing = Transition(label='Quality Testing')
milk_pasturize = Transition(label='Milk Pasteurize')
starter_culture = Transition(label='Starter Culture')
coagulation = Transition(label='Coagulation')
curd_cutting = Transition(label='Curd Cutting')
whey_draining = Transition(label='Whey Draining')
mold_inoculate = Transition(label='Mold Inoculate')
aging_control = Transition(label='Aging Control')
flavor_tasting = Transition(label='Flavor Tasting')
packaging_design = Transition(label='Packaging Design')
label_approval = Transition(label='Label Approval')
inventory_audit = Transition(label='Inventory Audit')
order_fulfill = Transition(label='Order Fulfill')
retail_shipping = Transition(label='Retail Shipping')
skip = SilentTransition()

# Define process structure
farm_selection_to_quality_testing = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, farm_selection])
quality_testing_to_pasturize = OperatorPOWL(operator=Operator.XOR, children=[quality_testing, skip])
pasturize_to_starter_culture = OperatorPOWL(operator=Operator.XOR, children=[milk_pasturize, skip])
starter_culture_to_coagulation = OperatorPOWL(operator=Operator.XOR, children=[starter_culture, skip])
coagulation_to_curd_cutting = OperatorPOWL(operator=Operator.XOR, children=[coagulation, skip])
curd_cutting_to_whey_draining = OperatorPOWL(operator=Operator.XOR, children=[curd_cutting, skip])
whey_draining_to_mold_inoculate = OperatorPOWL(operator=Operator.XOR, children=[whey_draining, skip])
mold_inoculate_to_aging_control = OperatorPOWL(operator=Operator.XOR, children=[mold_inoculate, skip])
aging_control_to_flavor_tasting = OperatorPOWL(operator=Operator.XOR, children=[aging_control, skip])
flavor_tasting_to_packaging_design = OperatorPOWL(operator=Operator.XOR, children=[flavor_tasting, skip])
packaging_design_to_label_approval = OperatorPOWL(operator=Operator.XOR, children=[packaging_design, skip])
label_approval_to_inventory_audit = OperatorPOWL(operator=Operator.XOR, children=[label_approval, skip])
inventory_audit_to_order_fulfill = OperatorPOWL(operator=Operator.XOR, children=[inventory_audit, skip])
order_fulfill_to_retail_shipping = OperatorPOWL(operator=Operator.XOR, children=[order_fulfill, skip])

# Define partial order
root = StrictPartialOrder(nodes=[farm_selection_to_quality_testing, quality_testing_to_pasturize, pasturize_to_starter_culture, starter_culture_to_coagulation, coagulation_to_curd_cutting, curd_cutting_to_whey_draining, whey_draining_to_mold_inoculate, mold_inoculate_to_aging_control, aging_control_to_flavor_tasting, flavor_tasting_to_packaging_design, packaging_design_to_label_approval, label_approval_to_inventory_audit, inventory_audit_to_order_fulfill, order_fulfill_to_retail_shipping])
root.order.add_edge(farm_selection_to_quality_testing, quality_testing_to_pasturize)
root.order.add_edge(quality_testing_to_pasturize, pasturize_to_starter_culture)
root.order.add_edge(pasturize_to_starter_culture, starter_culture_to_coagulation)
root.order.add_edge(starter_culture_to_coagulation, coagulation_to_curd_cutting)
root.order.add_edge(coagulation_to_curd_cutting, curd_cutting_to_whey_draining)
root.order.add_edge(curd_cutting_to_whey_draining, whey_draining_to_mold_inoculate)
root.order.add_edge(whey_draining_to_mold_inoculate, mold_inoculate_to_aging_control)
root.order.add_edge(mold_inoculate_to_aging_control, aging_control_to_flavor_tasting)
root.order.add_edge(aging_control_to_flavor_tasting, flavor_tasting_to_packaging_design)
root.order.add_edge(flavor_tasting_to_packaging_design, packaging_design_to_label_approval)
root.order.add_edge(packaging_design_to_label_approval, label_approval_to_inventory_audit)
root.order.add_edge(label_approval_to_inventory_audit, inventory_audit_to_order_fulfill)
root.order.add_edge(inventory_audit_to_order_fulfill, order_fulfill_to_retail_shipping)