import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

ProvenanceCheck = Transition(label='Provenance Check')
MaterialScan = Transition(label='Material Scan')
ContextReview = Transition(label='Context Review')
ExpertConsult = Transition(label='Expert Consult')
ImageCapture = Transition(label='Image Capture')
ConditionTest = Transition(label='Condition Test')
ForgeryRisk = Transition(label='Forgery Risk')
RegistryCrosscheck = Transition(label='Registry Crosscheck')
LegalVerify = Transition(label='Legal Verify')
EthicsReview = Transition(label='Ethics Review')
ReportDraft = Transition(label='Report Draft')
CertificateIssue = Transition(label='Certificate Issue')
DigitalArchive = Transition(label='Digital Archive')
TransferSetup = Transition(label='Transfer Setup')
FinalApproval = Transition(label='Final Approval')

skip = SilentTransition()
provenance_loop = OperatorPOWL(operator=Operator.LOOP, children=[ProvenanceCheck, skip])
material_loop = OperatorPOWL(operator=Operator.LOOP, children=[MaterialScan, skip])
context_loop = OperatorPOWL(operator=Operator.LOOP, children=[ContextReview, skip])
expert_loop = OperatorPOWL(operator=Operator.LOOP, children=[ExpertConsult, skip])
image_loop = OperatorPOWL(operator=Operator.LOOP, children=[ImageCapture, skip])
condition_loop = OperatorPOWL(operator=Operator.LOOP, children=[ConditionTest, skip])
risk_loop = OperatorPOWL(operator=Operator.LOOP, children=[ForgeryRisk, skip])
registry_loop = OperatorPOWL(operator=Operator.LOOP, children=[RegistryCrosscheck, skip])
legal_loop = OperatorPOWL(operator=Operator.LOOP, children=[LegalVerify, skip])
ethics_loop = OperatorPOWL(operator=Operator.LOOP, children=[EthicsReview, skip])
report_loop = OperatorPOWL(operator=Operator.LOOP, children=[ReportDraft, skip])
certificate_loop = OperatorPOWL(operator=Operator.LOOP, children=[CertificateIssue, skip])
archive_loop = OperatorPOWL(operator=Operator.LOOP, children=[DigitalArchive, skip])
setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[TransferSetup, skip])
approval_loop = OperatorPOWL(operator=Operator.LOOP, children=[FinalApproval, skip])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[report_loop, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[certificate_loop, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[archive_loop, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[setup_loop, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[approval_loop, skip])

root = StrictPartialOrder(nodes=[provenance_loop, material_loop, context_loop, expert_loop, image_loop, condition_loop, risk_loop, registry_loop, legal_loop, ethics_loop, xor1, xor2, xor3, xor4, xor5])
root.order.add_edge(provenance_loop, material_loop)
root.order.add_edge(material_loop, context_loop)
root.order.add_edge(context_loop, expert_loop)
root.order.add_edge(expert_loop, image_loop)
root.order.add_edge(image_loop, condition_loop)
root.order.add_edge(condition_loop, risk_loop)
root.order.add_edge(risk_loop, registry_loop)
root.order.add_edge(registry_loop, legal_loop)
root.order.add_edge(legal_loop, ethics_loop)
root.order.add_edge(ethics_loop, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, certificate_loop)
root.order.add_edge(certificate_loop, archive_loop)
root.order.add_edge(archive_loop, setup_loop)
root.order.add_edge(setup_loop, approval_loop)
root.order.add_edge(approval_loop, FinalApproval)