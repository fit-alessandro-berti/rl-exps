import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

InitialAssess = Transition(label='Initial Assess')
DisassembleParts = Transition(label='Disassemble Parts')
UltrasonicClean = Transition(label='Ultrasonic Clean')
InspectComponents = Transition(label='Inspect Components')
FabricateGears = Transition(label='Fabricate Gears')
DialRestoration = Transition(label='Dial Restoration')
RepaintMarkers = Transition(label='Repaint Markers')
ReassembleMovement = Transition(label='Reassemble Movement')
LubricateBearings = Transition(label='Lubricate Bearings')
CalibrateTiming = Transition(label='Calibrate Timing')
PolishCase = Transition(label='Polish Case')
ReCaseWatch = Transition(label='Re-case Watch')
QualityTesting = Transition(label='Quality Testing')
DocumentProcess = Transition(label='Document Process')
PackageProduct = Transition(label='Package Product')

skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[DisassembleParts, UltrasonicClean, InspectComponents])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[FabricateGears])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[DialRestoration, RepaintMarkers])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[ReassembleMovement, LubricateBearings])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[CalibrateTiming])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[PolishCase])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[ReCaseWatch])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[QualityTesting])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[DocumentProcess])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[PackageProduct])

root = StrictPartialOrder(nodes=[InitialAssess, loop1, loop2, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(InitialAssess, loop1)
root.order.add_edge(loop1, loop2)
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop2, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor4, xor6)
root.order.add_edge(xor5, xor7)
root.order.add_edge(xor6, xor8)