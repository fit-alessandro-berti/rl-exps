import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
client_brief = Transition(label='Client Brief')
design_draft = Transition(label='Design Draft')
component_order = Transition(label='Component Order')
firmware_build = Transition(label='Firmware Build')
pcb_assembly = Transition(label='PCB Assembly')
sensor_install = Transition(label='Sensor Install')
motor_mount = Transition(label='Motor Mount')
battery_test = Transition(label='Battery Test')
ai_module = Transition(label='AI Module')
system_integrate = Transition(label='System Integrate')
flight_simulate = Transition(label='Flight Simulate')
stress_test = Transition(label='Stress Test')
compliance_check = Transition(label='Compliance Check')
quality_audit = Transition(label='Quality Audit')
package_drone = Transition(label='Package Drone')
delivery_plan = Transition(label='Delivery Plan')

skip = SilentTransition()

loop_component_order = OperatorPOWL(operator=Operator.LOOP, children=[component_order])
loop_firmware_build = OperatorPOWL(operator=Operator.LOOP, children=[firmware_build])
loop_pcb_assembly = OperatorPOWL(operator=Operator.LOOP, children=[pcb_assembly])
loop_sensor_install = OperatorPOWL(operator=Operator.LOOP, children=[sensor_install])
loop_motor_mount = OperatorPOWL(operator=Operator.LOOP, children=[motor_mount])
loop_battery_test = OperatorPOWL(operator=Operator.LOOP, children=[battery_test])
loop_ai_module = OperatorPOWL(operator=Operator.LOOP, children=[ai_module])
loop_system_integrate = OperatorPOWL(operator=Operator.LOOP, children=[system_integrate])
loop_flight_simulate = OperatorPOWL(operator=Operator.LOOP, children=[flight_simulate])
loop_stress_test = OperatorPOWL(operator=Operator.LOOP, children=[stress_test])
loop_compliance_check = OperatorPOWL(operator=Operator.LOOP, children=[compliance_check])
loop_quality_audit = OperatorPOWL(operator=Operator.LOOP, children=[quality_audit])
loop_package_drone = OperatorPOWL(operator=Operator.LOOP, children=[package_drone])
loop_delivery_plan = OperatorPOWL(operator=Operator.LOOP, children=[delivery_plan])

xor_component_order = OperatorPOWL(operator=Operator.XOR, children=[loop_component_order, skip])
xor_firmware_build = OperatorPOWL(operator=Operator.XOR, children=[loop_firmware_build, skip])
xor_pcb_assembly = OperatorPOWL(operator=Operator.XOR, children=[loop_pcb_assembly, skip])
xor_sensor_install = OperatorPOWL(operator=Operator.XOR, children=[loop_sensor_install, skip])
xor_motor_mount = OperatorPOWL(operator=Operator.XOR, children=[loop_motor_mount, skip])
xor_battery_test = OperatorPOWL(operator=Operator.XOR, children=[loop_battery_test, skip])
xor_ai_module = OperatorPOWL(operator=Operator.XOR, children=[loop_ai_module, skip])
xor_system_integrate = OperatorPOWL(operator=Operator.XOR, children=[loop_system_integrate, skip])
xor_flight_simulate = OperatorPOWL(operator=Operator.XOR, children=[loop_flight_simulate, skip])
xor_stress_test = OperatorPOWL(operator=Operator.XOR, children=[loop_stress_test, skip])
xor_compliance_check = OperatorPOWL(operator=Operator.XOR, children=[loop_compliance_check, skip])
xor_quality_audit = OperatorPOWL(operator=Operator.XOR, children=[loop_quality_audit, skip])
xor_package_drone = OperatorPOWL(operator=Operator.XOR, children=[loop_package_drone, skip])
xor_delivery_plan = OperatorPOWL(operator=Operator.XOR, children=[loop_delivery_plan, skip])

root = StrictPartialOrder(nodes=[client_brief, design_draft, xor_component_order, xor_firmware_build, xor_pcb_assembly, xor_sensor_install, xor_motor_mount, xor_battery_test, xor_ai_module, xor_system_integrate, xor_flight_simulate, xor_stress_test, xor_compliance_check, xor_quality_audit, xor_package_drone, xor_delivery_plan])
root.order.add_edge(client_brief, design_draft)
root.order.add_edge(design_draft, xor_component_order)
root.order.add_edge(design_draft, xor_firmware_build)
root.order.add_edge(design_draft, xor_pcb_assembly)
root.order.add_edge(design_draft, xor_sensor_install)
root.order.add_edge(design_draft, xor_motor_mount)
root.order.add_edge(design_draft, xor_battery_test)
root.order.add_edge(design_draft, xor_ai_module)
root.order.add_edge(design_draft, xor_system_integrate)
root.order.add_edge(design_draft, xor_flight_simulate)
root.order.add_edge(design_draft, xor_stress_test)
root.order.add_edge(design_draft, xor_compliance_check)
root.order.add_edge(design_draft, xor_quality_audit)
root.order.add_edge(design_draft, xor_package_drone)
root.order.add_edge(design_draft, xor_delivery_plan)

# Print the POWL model
print(root)