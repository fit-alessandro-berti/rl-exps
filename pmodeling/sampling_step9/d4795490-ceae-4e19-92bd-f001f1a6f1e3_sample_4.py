import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

farm_sourcing = Transition(label='Farm Sourcing')
lot_selection = Transition(label='Lot Selection')
bean_sorting = Transition(label='Bean Sorting')
fermentation = Transition(label='Fermentation')
drying_process = Transition(label='Drying Process')
quality_control = Transition(label='Quality Control')
chemical_testing = Transition(label='Chemical Testing')
sensory_analysis = Transition(label='Sensory Analysis')
roast_profiling = Transition(label='Roast Profiling')
eco_packaging = Transition(label='Eco Packaging')
traceability_qr = Transition(label='Traceability QR')
cold_transport = Transition(label='Cold Transport')
env_monitoring = Transition(label='Env Monitoring')
customer_feedback = Transition(label='Customer Feedback')
subscription_adjust = Transition(label='Subscription Adjust')

skip = SilentTransition()

loop_farming = OperatorPOWL(operator=Operator.LOOP, children=[farm_sourcing])
loop_sorting = OperatorPOWL(operator=Operator.LOOP, children=[bean_sorting])
loop_fermentation = OperatorPOWL(operator=Operator.LOOP, children=[fermentation])
loop_drying = OperatorPOWL(operator=Operator.LOOP, children=[drying_process])
loop_quality = OperatorPOWL(operator=Operator.LOOP, children=[quality_control])
loop_testing = OperatorPOWL(operator=Operator.LOOP, children=[chemical_testing])
loop_analysis = OperatorPOWL(operator=Operator.LOOP, children=[sensory_analysis])
loop_roast = OperatorPOWL(operator=Operator.LOOP, children=[roast_profiling])
loop_packaging = OperatorPOWL(operator=Operator.LOOP, children=[eco_packaging])
loop_traceability = OperatorPOWL(operator=Operator.LOOP, children=[traceability_qr])
loop_transport = OperatorPOWL(operator=Operator.LOOP, children=[cold_transport])
loop_monitoring = OperatorPOWL(operator=Operator.LOOP, children=[env_monitoring])
loop_feedback = OperatorPOWL(operator=Operator.LOOP, children=[customer_feedback])
loop_subscription = OperatorPOWL(operator=Operator.LOOP, children=[subscription_adjust])

xor_farming = OperatorPOWL(operator=Operator.XOR, children=[loop_farming, skip])
xor_sorting = OperatorPOWL(operator=Operator.XOR, children=[loop_sorting, skip])
xor_fermentation = OperatorPOWL(operator=Operator.XOR, children=[loop_fermentation, skip])
xor_drying = OperatorPOWL(operator=Operator.XOR, children=[loop_drying, skip])
xor_quality = OperatorPOWL(operator=Operator.XOR, children=[loop_quality, skip])
xor_testing = OperatorPOWL(operator=Operator.XOR, children=[loop_testing, skip])
xor_analysis = OperatorPOWL(operator=Operator.XOR, children=[loop_analysis, skip])
xor_roast = OperatorPOWL(operator=Operator.XOR, children=[loop_roast, skip])
xor_packaging = OperatorPOWL(operator=Operator.XOR, children=[loop_packaging, skip])
xor_traceability = OperatorPOWL(operator=Operator.XOR, children=[loop_traceability, skip])
xor_transport = OperatorPOWL(operator=Operator.XOR, children=[loop_transport, skip])
xor_monitoring = OperatorPOWL(operator=Operator.XOR, children=[loop_monitoring, skip])
xor_feedback = OperatorPOWL(operator=Operator.XOR, children=[loop_feedback, skip])
xor_subscription = OperatorPOWL(operator=Operator.XOR, children=[loop_subscription, skip])

root = StrictPartialOrder(nodes=[xor_farming, xor_sorting, xor_fermentation, xor_drying, xor_quality, xor_testing, xor_analysis, xor_roast, xor_packaging, xor_traceability, xor_transport, xor_monitoring, xor_feedback, xor_subscription])
root.order.add_edge(xor_farming, xor_sorting)
root.order.add_edge(xor_sorting, xor_fermentation)
root.order.add_edge(xor_fermentation, xor_drying)
root.order.add_edge(xor_drying, xor_quality)
root.order.add_edge(xor_quality, xor_testing)
root.order.add_edge(xor_testing, xor_analysis)
root.order.add_edge(xor_analysis, xor_roast)
root.order.add_edge(xor_roast, xor_packaging)
root.order.add_edge(xor_packaging, xor_traceability)
root.order.add_edge(xor_traceability, xor_transport)
root.order.add_edge(xor_transport, xor_monitoring)
root.order.add_edge(xor_monitoring, xor_feedback)
root.order.add_edge(xor_feedback, xor_subscription)