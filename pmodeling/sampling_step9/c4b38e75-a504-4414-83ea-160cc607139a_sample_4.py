import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Site_Survey = Transition(label='Site Survey')
Design_Modules = Transition(label='Design Modules')
Install_Sensors = Transition(label='Install Sensors')
Calibrate_Climate = Transition(label='Calibrate Climate')
Select_Seeds = Transition(label='Select Seeds')
Optimize_Nutrients = Transition(label='Optimize Nutrients')
Deploy_Robots = Transition(label='Deploy Robots')
Monitor_Growth = Transition(label='Monitor Growth')
Detect_Pests = Transition(label='Detect Pests')
Analyze_Data = Transition(label='Analyze Data')
Harvest_Crops = Transition(label='Harvest Crops')
Customize_Pack = Transition(label='Customize Pack')
Recycle_Waste = Transition(label='Recycle Waste')
Audit_Energy = Transition(label='Audit Energy')
Align_Demand = Transition(label='Align Demand')
skip = SilentTransition()
site_survey_loop = OperatorPOWL(operator=Operator.LOOP, children=[Site_Survey])
design_modules_loop = OperatorPOWL(operator=Operator.LOOP, children=[Design_Modules])
install_sensors_loop = OperatorPOWL(operator=Operator.LOOP, children=[Install_Sensors])
calibrate_climate_loop = OperatorPOWL(operator=Operator.LOOP, children=[Calibrate_Climate])
select_seeds_loop = OperatorPOWL(operator=Operator.LOOP, children=[Select_Seeds])
optimize_nutrients_loop = OperatorPOWL(operator=Operator.LOOP, children=[Optimize_Nutrients])
deploy_robots_loop = OperatorPOWL(operator=Operator.LOOP, children=[Deploy_Robots])
monitor_growth_loop = OperatorPOWL(operator=Operator.LOOP, children=[Monitor_Growth])
detect_pests_loop = OperatorPOWL(operator=Operator.LOOP, children=[Detect_Pests])
analyze_data_loop = OperatorPOWL(operator=Operator.LOOP, children=[Analyze_Data])
harvest_crops_loop = OperatorPOWL(operator=Operator.LOOP, children=[Harvest_Crops])
customize_pack_loop = OperatorPOWL(operator=Operator.LOOP, children=[Customize_Pack])
recycle_waste_loop = OperatorPOWL(operator=Operator.LOOP, children=[Recycle_Waste])
audit_energy_loop = OperatorPOWL(operator=Operator.LOOP, children=[Audit_Energy])
align_demand_loop = OperatorPOWL(operator=Operator.LOOP, children=[Align_Demand])
root = StrictPartialOrder(nodes=[site_survey_loop, design_modules_loop, install_sensors_loop, calibrate_climate_loop, select_seeds_loop, optimize_nutrients_loop, deploy_robots_loop, monitor_growth_loop, detect_pests_loop, analyze_data_loop, harvest_crops_loop, customize_pack_loop, recycle_waste_loop, audit_energy_loop, align_demand_loop])
root.order.add_edge(site_survey_loop, design_modules_loop)
root.order.add_edge(site_survey_loop, install_sensors_loop)
root.order.add_edge(site_survey_loop, calibrate_climate_loop)
root.order.add_edge(design_modules_loop, select_seeds_loop)
root.order.add_edge(design_modules_loop, optimize_nutrients_loop)
root.order.add_edge(design_modules_loop, deploy_robots_loop)
root.order.add_edge(install_sensors_loop, monitor_growth_loop)
root.order.add_edge(install_sensors_loop, detect_pests_loop)
root.order.add_edge(install_sensors_loop, analyze_data_loop)
root.order.add_edge(deploy_robots_loop, harvest_crops_loop)
root.order.add_edge(deploy_robots_loop, customize_pack_loop)
root.order.add_edge(deploy_robots_loop, recycle_waste_loop)
root.order.add_edge(deploy_robots_loop, audit_energy_loop)
root.order.add_edge(deploy_robots_loop, align_demand_loop)