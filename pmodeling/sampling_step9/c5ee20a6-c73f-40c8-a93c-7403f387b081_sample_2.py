import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

InitialAssess = Transition(label='Initial Assess')
ConditionScan = Transition(label='Condition Scan')
MaterialTest = Transition(label='Material Test')
HistoricalCheck = Transition(label='Historical Check')
ProvenanceVerify = Transition(label='Provenance Verify')
PartsSourcing = Transition(label='Parts Sourcing')
GentleClean = Transition(label='Gentle Clean')
StabilizeItem = Transition(label='Stabilize Item')
StructuralRepair = Transition(label='Structural Repair')
SurfaceFinish = Transition(label='Surface Finish')
ExpertConsult = Transition(label='Expert Consult')
ArchivalReview = Transition(label='Archival Review')
EthicsAudit = Transition(label='Ethics Audit')
QualityInspect = Transition(label='Quality Inspect')
PhotoDocument = Transition(label='Photo Document')
PackagingPrep = Transition(label='Packaging Prep')
ReportGenerate = Transition(label='Report Generate')
CertifyProvenance = Transition(label='Certify Provenance')
skip = SilentTransition()

xor1 = OperatorPOWL(operator=Operator.XOR, children=[HistoricalCheck, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[ProvenanceVerify, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[EthicsAudit, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[ExpertConsult, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[ArchivalReview, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[ConditionScan, MaterialTest, xor1])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[GentleClean, StabilizeItem, xor2])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[StructuralRepair, SurfaceFinish, xor3])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[QualityInspect, PhotoDocument, xor4])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[PackagingPrep, ReportGenerate, xor5])

root = StrictPartialOrder(nodes=[InitialAssess, loop1, loop2, loop3, loop4, loop5, CertifyProvenance])
root.order.add_edge(InitialAssess, loop1)
root.order.add_edge(InitialAssess, loop2)
root.order.add_edge(InitialAssess, loop3)
root.order.add_edge(InitialAssess, loop4)
root.order.add_edge(InitialAssess, loop5)
root.order.add_edge(loop1, loop2)
root.order.add_edge(loop1, loop3)
root.order.add_edge(loop1, loop4)
root.order.add_edge(loop1, loop5)
root.order.add_edge(loop2, loop3)
root.order.add_edge(loop2, loop4)
root.order.add_edge(loop2, loop5)
root.order.add_edge(loop3, loop4)
root.order.add_edge(loop3, loop5)
root.order.add_edge(loop4, loop5)
root.order.add_edge(loop5, CertifyProvenance)