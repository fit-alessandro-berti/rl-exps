import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Site_Select = Transition(label='Site Select')
Design_Layout = Transition(label='Design Layout')
Sensor_Integrate = Transition(label='Sensor Integrate')
Crop_Choose = Transition(label='Crop Choose')
Soil_Prepare = Transition(label='Soil Prepare')
Irrigation_Setup = Transition(label='Irrigation Setup')
Pest_Control = Transition(label='Pest Control')
Lighting_Install = Transition(label='Lighting Install')
Staff_Train = Transition(label='Staff Train')
Compliance_Check = Transition(label='Compliance Check')
Market_Analyze = Transition(label='Market Analyze')
Package_Design = Transition(label='Package Design')
Logistics_Plan = Transition(label='Logistics Plan')
Data_Analyze = Transition(label='Data Analyze')
Feedback_Loop = Transition(label='Feedback Loop')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Site_Select, Design_Layout])
xor = OperatorPOWL(operator=Operator.XOR, children=[Sensor_Integrate, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Crop_Choose, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Soil_Prepare, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Irrigation_Setup, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Pest_Control, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Lighting_Install, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Staff_Train, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Compliance_Check, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Market_Analyze, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Package_Design, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Logistics_Plan, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Data_Analyze, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Feedback_Loop, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, loop)