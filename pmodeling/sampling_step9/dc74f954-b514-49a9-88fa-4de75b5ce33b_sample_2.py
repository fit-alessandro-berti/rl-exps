import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
design_layout = Transition(label='Design Layout')
permit_filing = Transition(label='Permit Filing')
module_build = Transition(label='Module Build')
system_install = Transition(label='System Install')
climate_setup = Transition(label='Climate Setup')
lighting_configure = Transition(label='Lighting Configure')
irrigation_setup = Transition(label='Irrigation Setup')
nutrient_mix = Transition(label='Nutrient Mix')
pest_check = Transition(label='Pest Check')
sensor_calibrate = Transition(label='Sensor Calibrate')
data_integration = Transition(label='Data Integration')
crop_planting = Transition(label='Crop Planting')
growth_monitor = Transition(label='Growth Monitor')
yield_analyze = Transition(label='Yield Analyze')
waste_manage = Transition(label='Waste Manage')
energy_audit = Transition(label='Energy Audit')

skip = SilentTransition()
loop_site_survey = OperatorPOWL(operator=Operator.LOOP, children=[site_survey])
loop_design_layout = OperatorPOWL(operator=Operator.LOOP, children=[design_layout])
loop_permit_filing = OperatorPOWL(operator=Operator.LOOP, children=[permit_filing])
loop_module_build = OperatorPOWL(operator=Operator.LOOP, children=[module_build])
loop_system_install = OperatorPOWL(operator=Operator.LOOP, children=[system_install])
loop_climate_setup = OperatorPOWL(operator=Operator.LOOP, children=[climate_setup])
loop_lighting_configure = OperatorPOWL(operator=Operator.LOOP, children=[lighting_configure])
loop_irrigation_setup = OperatorPOWL(operator=Operator.LOOP, children=[irrigation_setup])
loop_nutrient_mix = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_mix])
loop_pest_check = OperatorPOWL(operator=Operator.LOOP, children=[pest_check])
loop_sensor_calibrate = OperatorPOWL(operator=Operator.LOOP, children=[sensor_calibrate])
loop_data_integration = OperatorPOWL(operator=Operator.LOOP, children=[data_integration])
loop_crop_planting = OperatorPOWL(operator=Operator.LOOP, children=[crop_planting])
loop_growth_monitor = OperatorPOWL(operator=Operator.LOOP, children=[growth_monitor])
loop_yield_analyze = OperatorPOWL(operator=Operator.LOOP, children=[yield_analyze])
loop_waste_manage = OperatorPOWL(operator=Operator.LOOP, children=[waste_manage])
loop_energy_audit = OperatorPOWL(operator=Operator.LOOP, children=[energy_audit])

xor_site_survey = OperatorPOWL(operator=Operator.XOR, children=[loop_site_survey, skip])
xor_design_layout = OperatorPOWL(operator=Operator.XOR, children=[loop_design_layout, skip])
xor_permit_filing = OperatorPOWL(operator=Operator.XOR, children=[loop_permit_filing, skip])
xor_module_build = OperatorPOWL(operator=Operator.XOR, children=[loop_module_build, skip])
xor_system_install = OperatorPOWL(operator=Operator.XOR, children=[loop_system_install, skip])
xor_climate_setup = OperatorPOWL(operator=Operator.XOR, children=[loop_climate_setup, skip])
xor_lighting_configure = OperatorPOWL(operator=Operator.XOR, children=[loop_lighting_configure, skip])
xor_irrigation_setup = OperatorPOWL(operator=Operator.XOR, children=[loop_irrigation_setup, skip])
xor_nutrient_mix = OperatorPOWL(operator=Operator.XOR, children=[loop_nutrient_mix, skip])
xor_pest_check = OperatorPOWL(operator=Operator.XOR, children=[loop_pest_check, skip])
xor_sensor_calibrate = OperatorPOWL(operator=Operator.XOR, children=[loop_sensor_calibrate, skip])
xor_data_integration = OperatorPOWL(operator=Operator.XOR, children=[loop_data_integration, skip])
xor_crop_planting = OperatorPOWL(operator=Operator.XOR, children=[loop_crop_planting, skip])
xor_growth_monitor = OperatorPOWL(operator=Operator.XOR, children=[loop_growth_monitor, skip])
xor_yield_analyze = OperatorPOWL(operator=Operator.XOR, children=[loop_yield_analyze, skip])
xor_waste_manage = OperatorPOWL(operator=Operator.XOR, children=[loop_waste_manage, skip])
xor_energy_audit = OperatorPOWL(operator=Operator.XOR, children=[loop_energy_audit, skip])

root = StrictPartialOrder(nodes=[xor_site_survey, xor_design_layout, xor_permit_filing, xor_module_build, xor_system_install, xor_climate_setup, xor_lighting_configure, xor_irrigation_setup, xor_nutrient_mix, xor_pest_check, xor_sensor_calibrate, xor_data_integration, xor_crop_planting, xor_growth_monitor, xor_yield_analyze, xor_waste_manage, xor_energy_audit])
root.order.add_edge(xor_site_survey, xor_design_layout)
root.order.add_edge(xor_design_layout, xor_permit_filing)
root.order.add_edge(xor_permit_filing, xor_module_build)
root.order.add_edge(xor_module_build, xor_system_install)
root.order.add_edge(xor_system_install, xor_climate_setup)
root.order.add_edge(xor_climate_setup, xor_lighting_configure)
root.order.add_edge(xor_lighting_configure, xor_irrigation_setup)
root.order.add_edge(xor_irrigation_setup, xor_nutrient_mix)
root.order.add_edge(xor_nutrient_mix, xor_pest_check)
root.order.add_edge(xor_pest_check, xor_sensor_calibrate)
root.order.add_edge(xor_sensor_calibrate, xor_data_integration)
root.order.add_edge(xor_data_integration, xor_crop_planting)
root.order.add_edge(xor_crop_planting, xor_growth_monitor)
root.order.add_edge(xor_growth_monitor, xor_yield_analyze)
root.order.add_edge(xor_yield_analyze, xor_waste_manage)
root.order.add_edge(xor_waste_manage, xor_energy_audit)