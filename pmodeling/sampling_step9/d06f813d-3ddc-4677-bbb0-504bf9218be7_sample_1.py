import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

provenance_check = Transition(label='Provenance Check')
specimen_sampling = Transition(label='Specimen Sampling')
spectroscopy_test = Transition(label='Spectroscopy Test')
radiocarbon_date = Transition(label='Radiocarbon Date')
material_analysis = Transition(label='Material Analysis')
forensic_review = Transition(label='Forensic Review')
expert_consult = Transition(label='Expert Consult')
legal_verify = Transition(label='Legal Verify')
ownership_audit = Transition(label='Ownership Audit')
risk_assess = Transition(label='Risk Assess')
insurance_quote = Transition(label='Insurance Quote')
condition_report = Transition(label='Condition Report')
documentation = Transition(label='Documentation')
committee_review = Transition(label='Committee Review')
final_approval = Transition(label='Final Approval')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[specimen_sampling, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[spectroscopy_test, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[radiocarbon_date, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[material_analysis, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[forensic_review, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[expert_consult, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[legal_verify, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[ownership_audit, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[risk_assess, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[insurance_quote, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[condition_report, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[documentation, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[committee_review, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[final_approval, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[xor])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor2])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[xor3])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[xor4])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor5])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[xor6])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[xor7])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[xor8])
loop9 = OperatorPOWL(operator=Operator.LOOP, children=[xor9])
loop10 = OperatorPOWL(operator=Operator.LOOP, children=[xor10])
loop11 = OperatorPOWL(operator=Operator.LOOP, children=[xor11])
loop12 = OperatorPOWL(operator=Operator.LOOP, children=[xor12])
loop13 = OperatorPOWL(operator=Operator.LOOP, children=[xor13])
loop14 = OperatorPOWL(operator=Operator.LOOP, children=[xor14])
loop15 = OperatorPOWL(operator=Operator.LOOP, children=[xor15])

root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8, loop9, loop10, loop11, loop12, loop13, loop14, loop15])
root.order.add_edge(loop1, xor)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)
root.order.add_edge(loop6, xor6)
root.order.add_edge(loop7, xor7)
root.order.add_edge(loop8, xor8)
root.order.add_edge(loop9, xor9)
root.order.add_edge(loop10, xor10)
root.order.add_edge(loop11, xor11)
root.order.add_edge(loop12, xor12)
root.order.add_edge(loop13, xor13)
root.order.add_edge(loop14, xor14)
root.order.add_edge(loop15, xor15)