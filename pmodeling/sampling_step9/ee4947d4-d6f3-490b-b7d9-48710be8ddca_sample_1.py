import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

data_capture = Transition(label='Data Capture')
fingerprint_art = Transition(label='Fingerprint Art')
record_input = Transition(label='Record Input')
historical_check = Transition(label='Historical Check')
stakeholder_vote = Transition(label='Stakeholder Vote')
consensus_validate = Transition(label='Consensus Validate')
timestamp_entry = Transition(label='Timestamp Entry')
ledger_update = Transition(label='Ledger Update')
ai_pattern_scan = Transition(label='AI PatternScan')
flag_anomaly = Transition(label='Flag Anomaly')
dispute_submit = Transition(label='Dispute Submit')
panel_review = Transition(label='Panel Review')
arbitrate_case = Transition(label='Arbitrate Case')
trade_monitor = Transition(label='Trade Monitor')
feedback_loop = Transition(label='Feedback Loop')
insurance_sync = Transition(label='Insurance Sync')
collector_notify = Transition(label='Collector Notify')

skip = SilentTransition()

data_capture_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_capture])
fingerprint_art_loop = OperatorPOWL(operator=Operator.LOOP, children=[fingerprint_art])
record_input_loop = OperatorPOWL(operator=Operator.LOOP, children=[record_input])
historical_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[historical_check])
stakeholder_vote_loop = OperatorPOWL(operator=Operator.LOOP, children=[stakeholder_vote])
consensus_validate_loop = OperatorPOWL(operator=Operator.LOOP, children=[consensus_validate])
timestamp_entry_loop = OperatorPOWL(operator=Operator.LOOP, children=[timestamp_entry])
ledger_update_loop = OperatorPOWL(operator=Operator.LOOP, children=[ledger_update])
ai_pattern_scan_loop = OperatorPOWL(operator=Operator.LOOP, children=[ai_pattern_scan])
flag_anomaly_loop = OperatorPOWL(operator=Operator.LOOP, children=[flag_anomaly])
dispute_submit_loop = OperatorPOWL(operator=Operator.LOOP, children=[dispute_submit])
panel_review_loop = OperatorPOWL(operator=Operator.LOOP, children=[panel_review])
arbitrate_case_loop = OperatorPOWL(operator=Operator.LOOP, children=[arbitrate_case])
trade_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[trade_monitor])
feedback_loop_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop])
insurance_sync_loop = OperatorPOWL(operator=Operator.LOOP, children=[insurance_sync])
collector_notify_loop = OperatorPOWL(operator=Operator.LOOP, children=[collector_notify])

xor = OperatorPOWL(operator=Operator.XOR, children=[historical_check_loop, skip])

root = StrictPartialOrder(nodes=[data_capture_loop, fingerprint_art_loop, record_input_loop, historical_check_loop, stakeholder_vote_loop, consensus_validate_loop, timestamp_entry_loop, ledger_update_loop, ai_pattern_scan_loop, flag_anomaly_loop, dispute_submit_loop, panel_review_loop, arbitrate_case_loop, trade_monitor_loop, feedback_loop_loop, insurance_sync_loop, collector_notify_loop])
root.order.add_edge(data_capture_loop, fingerprint_art_loop)
root.order.add_edge(fingerprint_art_loop, record_input_loop)
root.order.add_edge(record_input_loop, historical_check_loop)
root.order.add_edge(historical_check_loop, stakeholder_vote_loop)
root.order.add_edge(stakeholder_vote_loop, consensus_validate_loop)
root.order.add_edge(consensus_validate_loop, timestamp_entry_loop)
root.order.add_edge(timestamp_entry_loop, ledger_update_loop)
root.order.add_edge(ledger_update_loop, ai_pattern_scan_loop)
root.order.add_edge(ai_pattern_scan_loop, flag_anomaly_loop)
root.order.add_edge(flag_anomaly_loop, dispute_submit_loop)
root.order.add_edge(dispute_submit_loop, panel_review_loop)
root.order.add_edge(panel_review_loop, arbitrate_case_loop)
root.order.add_edge(arbitrate_case_loop, trade_monitor_loop)
root.order.add_edge(trade_monitor_loop, feedback_loop_loop)
root.order.add_edge(feedback_loop_loop, insurance_sync_loop)
root.order.add_edge(insurance_sync_loop, collector_notify_loop)