import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Site_Analysis = Transition(label='Site Analysis')
Design_Layout = Transition(label='Design Layout')
Module_Assembly = Transition(label='Module Assembly')
Climate_Setup = Transition(label='Climate Setup')
Sensor_Install = Transition(label='Sensor Install')
Water_Testing = Transition(label='Water Testing')
Nutrient_Mix = Transition(label='Nutrient Mix')
Seed_Selection = Transition(label='Seed Selection')
Planting_Phase = Transition(label='Planting Phase')
Growth_Monitor = Transition(label='Growth Monitor')
Pest_Control = Transition(label='Pest Control')
Harvest_Plan = Transition(label='Harvest Plan')
Yield_Audit = Transition(label='Yield Audit')
Packaging_Prep = Transition(label='Packaging Prep')
Market_Delivery = Transition(label='Market Delivery')
Waste_Recycling = Transition(label='Waste Recycling')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Site_Analysis, Design_Layout])
xor = OperatorPOWL(operator=Operator.XOR, children=[Module_Assembly, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Climate_Setup, Sensor_Install])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Water_Testing, Nutrient_Mix])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Seed_Selection, Planting_Phase])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Growth_Monitor, Pest_Control])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Harvest_Plan, Yield_Audit])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Packaging_Prep, Market_Delivery])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Waste_Recycling, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, loop)