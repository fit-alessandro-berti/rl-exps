import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
fleet_design = Transition(label='Fleet Design')
permit_request = Transition(label='Permit Request')
regulation_review = Transition(label='Regulation Review')
stakeholder_meet = Transition(label='Stakeholder Meet')
route_mapping = Transition(label='Route Mapping')
traffic_sync = Transition(label='Traffic Sync')
drone_assembly = Transition(label='Drone Assembly')
software_setup = Transition(label='Software Setup')
test_flight = Transition(label='Test Flight')
data_integration = Transition(label='Data Integration')
compliance_audit = Transition(label='Compliance Audit')
emergency_plan = Transition(label='Emergency Plan')
launch_prep = Transition(label='Launch Prep')
feedback_loop = Transition(label='Feedback Loop')
performance_tune = Transition(label='Performance Tune')
scale_strategy = Transition(label='Scale Strategy')
skip = SilentTransition()

site_survey_choice = OperatorPOWL(operator=Operator.XOR, children=[site_survey, skip])
fleet_design_choice = OperatorPOWL(operator=Operator.XOR, children=[fleet_design, skip])
permit_request_choice = OperatorPOWL(operator=Operator.XOR, children=[permit_request, skip])
regulation_review_choice = OperatorPOWL(operator=Operator.XOR, children=[regulation_review, skip])
stakeholder_meet_choice = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_meet, skip])
route_mapping_choice = OperatorPOWL(operator=Operator.XOR, children=[route_mapping, skip])
traffic_sync_choice = OperatorPOWL(operator=Operator.XOR, children=[traffic_sync, skip])
drone_assembly_choice = OperatorPOWL(operator=Operator.XOR, children=[drone_assembly, skip])
software_setup_choice = OperatorPOWL(operator=Operator.XOR, children=[software_setup, skip])
test_flight_choice = OperatorPOWL(operator=Operator.XOR, children=[test_flight, skip])
data_integration_choice = OperatorPOWL(operator=Operator.XOR, children=[data_integration, skip])
compliance_audit_choice = OperatorPOWL(operator=Operator.XOR, children=[compliance_audit, skip])
emergency_plan_choice = OperatorPOWL(operator=Operator.XOR, children=[emergency_plan, skip])
launch_prep_choice = OperatorPOWL(operator=Operator.XOR, children=[launch_prep, skip])
feedback_loop_choice = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, skip])
performance_tune_choice = OperatorPOWL(operator=Operator.XOR, children=[performance_tune, skip])
scale_strategy_choice = OperatorPOWL(operator=Operator.XOR, children=[scale_strategy, skip])

loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey_choice, fleet_design_choice, permit_request_choice, regulation_review_choice, stakeholder_meet_choice, route_mapping_choice, traffic_sync_choice, drone_assembly_choice, software_setup_choice, test_flight_choice, data_integration_choice, compliance_audit_choice, emergency_plan_choice, launch_prep_choice, feedback_loop_choice, performance_tune_choice, scale_strategy_choice])

root = StrictPartialOrder(nodes=[loop])
root.order.add_edge(loop, site_survey_choice)
root.order.add_edge(loop, fleet_design_choice)
root.order.add_edge(loop, permit_request_choice)
root.order.add_edge(loop, regulation_review_choice)
root.order.add_edge(loop, stakeholder_meet_choice)
root.order.add_edge(loop, route_mapping_choice)
root.order.add_edge(loop, traffic_sync_choice)
root.order.add_edge(loop, drone_assembly_choice)
root.order.add_edge(loop, software_setup_choice)
root.order.add_edge(loop, test_flight_choice)
root.order.add_edge(loop, data_integration_choice)
root.order.add_edge(loop, compliance_audit_choice)
root.order.add_edge(loop, emergency_plan_choice)
root.order.add_edge(loop, launch_prep_choice)
root.order.add_edge(loop, feedback_loop_choice)
root.order.add_edge(loop, performance_tune_choice)
root.order.add_edge(loop, scale_strategy_choice)