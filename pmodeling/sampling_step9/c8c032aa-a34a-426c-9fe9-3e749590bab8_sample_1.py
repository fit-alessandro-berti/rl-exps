import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions
light_sourcing = Transition(label='Light Sourcing')
nutrient_order = Transition(label='Nutrient Order')
climate_setup = Transition(label='Climate Setup')
growth_planning = Transition(label='Growth Planning')
seed_planting = Transition(label='Seed Planting')
irrigation_check = Transition(label='Irrigation Check')
pest_monitoring = Transition(label='Pest Monitoring')
energy_tracking = Transition(label='Energy Tracking')
quality_testing = Transition(label='Quality Testing')
data_analysis = Transition(label='Data Analysis')
equipment_repair = Transition(label='Equipment Repair')
packaging_prep = Transition(label='Packaging Prep')
inventory_update = Transition(label='Inventory Update')
delivery_scheduling = Transition(label='Delivery Scheduling')
customer_feedback = Transition(label='Customer Feedback')
market_forecast = Transition(label='Market Forecast')

# Define silent transitions
skip = SilentTransition()

# Define loops
loop_light_sourcing = OperatorPOWL(operator=Operator.LOOP, children=[light_sourcing])
loop_nutrient_order = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_order])
loop_climate_setup = OperatorPOWL(operator=Operator.LOOP, children=[climate_setup])
loop_growth_planning = OperatorPOWL(operator=Operator.LOOP, children=[growth_planning])
loop_seed_planting = OperatorPOWL(operator=Operator.LOOP, children=[seed_planting])
loop_irrigation_check = OperatorPOWL(operator=Operator.LOOP, children=[irrigation_check])
loop_pest_monitoring = OperatorPOWL(operator=Operator.LOOP, children=[pest_monitoring])
loop_energy_tracking = OperatorPOWL(operator=Operator.LOOP, children=[energy_tracking])
loop_quality_testing = OperatorPOWL(operator=Operator.LOOP, children=[quality_testing])
loop_data_analysis = OperatorPOWL(operator=Operator.LOOP, children=[data_analysis])
loop_equipment_repair = OperatorPOWL(operator=Operator.LOOP, children=[equipment_repair])
loop_packaging_prep = OperatorPOWL(operator=Operator.LOOP, children=[packaging_prep])
loop_inventory_update = OperatorPOWL(operator=Operator.LOOP, children=[inventory_update])
loop_delivery_scheduling = OperatorPOWL(operator=Operator.LOOP, children=[delivery_scheduling])
loop_customer_feedback = OperatorPOWL(operator=Operator.LOOP, children=[customer_feedback])
loop_market_forecast = OperatorPOWL(operator=Operator.LOOP, children=[market_forecast])

# Define XORs
xor_light_sourcing = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_light_sourcing])
xor_nutrient_order = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_nutrient_order])
xor_climate_setup = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_climate_setup])
xor_growth_planning = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_growth_planning])
xor_seed_planting = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_seed_planting])
xor_irrigation_check = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_irrigation_check])
xor_pest_monitoring = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_pest_monitoring])
xor_energy_tracking = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_energy_tracking])
xor_quality_testing = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_quality_testing])
xor_data_analysis = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_data_analysis])
xor_equipment_repair = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_equipment_repair])
xor_packaging_prep = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_packaging_prep])
xor_inventory_update = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_inventory_update])
xor_delivery_scheduling = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_delivery_scheduling])
xor_customer_feedback = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_customer_feedback])
xor_market_forecast = OperatorPOWL(operator=Operator.XOR, children=[skip, loop_market_forecast])

# Define root
root = StrictPartialOrder(nodes=[xor_light_sourcing, xor_nutrient_order, xor_climate_setup, xor_growth_planning, xor_seed_planting, xor_irrigation_check, xor_pest_monitoring, xor_energy_tracking, xor_quality_testing, xor_data_analysis, xor_equipment_repair, xor_packaging_prep, xor_inventory_update, xor_delivery_scheduling, xor_customer_feedback, xor_market_forecast])
root.order.add_edge(xor_light_sourcing, loop_light_sourcing)
root.order.add_edge(xor_nutrient_order, loop_nutrient_order)
root.order.add_edge(xor_climate_setup, loop_climate_setup)
root.order.add_edge(xor_growth_planning, loop_growth_planning)
root.order.add_edge(xor_seed_planting, loop_seed_planting)
root.order.add_edge(xor_irrigation_check, loop_irrigation_check)
root.order.add_edge(xor_pest_monitoring, loop_pest_monitoring)
root.order.add_edge(xor_energy_tracking, loop_energy_tracking)
root.order.add_edge(xor_quality_testing, loop_quality_testing)
root.order.add_edge(xor_data_analysis, loop_data_analysis)
root.order.add_edge(xor_equipment_repair, loop_equipment_repair)
root.order.add_edge(xor_packaging_prep, loop_packaging_prep)
root.order.add_edge(xor_inventory_update, loop_inventory_update)
root.order.add_edge(xor_delivery_scheduling, loop_delivery_scheduling)
root.order.add_edge(xor_customer_feedback, loop_customer_feedback)
root.order.add_edge(xor_market_forecast, loop_market_forecast)