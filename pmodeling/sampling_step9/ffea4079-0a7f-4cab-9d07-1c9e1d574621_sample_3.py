import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
A = Transition(label='Scenario Setup')
B = Transition(label='Resource Mapping')
C = Transition(label='Team Briefing')
D = Transition(label='Tech Deployment')
E = Transition(label='Data Sync')
F = Transition(label='Comm Setup')
G = Transition(label='Live Monitoring')
H = Transition(label='Variable Adjust')
I = Transition(label='Incident Injection')
J = Transition(label='Response Tracking')
K = Transition(label='Interlock Check')
L = Transition(label='Real-time Feedback')
M = Transition(label='Debrief Session')
N = Transition(label='Outcome Analysis')
O = Transition(label='Report Generation')
P = Transition(label='Improvement Plan')

# Define silent activities
S1 = SilentTransition()
S2 = SilentTransition()
S3 = SilentTransition()
S4 = SilentTransition()
S5 = SilentTransition()

# Define operators
xor1 = OperatorPOWL(operator=Operator.XOR, children=[S1, A])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[B, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[C, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[D, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[E, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[F, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[G, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[H, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[I, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[J, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[K, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[L, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[M, xor12])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[N, xor13])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[O, xor14])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[P, xor15])

# Define root
root = StrictPartialOrder(nodes=[xor16])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)
root.order.add_edge(xor15, xor16)