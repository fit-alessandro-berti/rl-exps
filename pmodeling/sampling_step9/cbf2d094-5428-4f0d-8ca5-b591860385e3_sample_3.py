import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Seed_Select = Transition(label='Seed Select')
Nutrient_Mix = Transition(label='Nutrient Mix')
Climate_Adjust = Transition(label='Climate Adjust')
Planting_Robotic = Transition(label='Planting Robotic')
Growth_Monitor = Transition(label='Growth Monitor')
Pest_Control = Transition(label='Pest Control')
Water_Recycle = Transition(label='Water Recycle')
Light_Optimize = Transition(label='Light Optimize')
Growth_Analyze = Transition(label='Growth Analyze')
Harvest_Sync = Transition(label='Harvest Sync')
Sterilize_Crop = Transition(label='Sterilize Crop')
Package_Fresh = Transition(label='Package Fresh')
Demand_Forecast = Transition(label='Demand Forecast')
Delivery_Plan = Transition(label='Delivery Plan')
Data_Feedback = Transition(label='Data Feedback')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Planting_Robotic, Growth_Analyze])
xor = OperatorPOWL(operator=Operator.XOR, children=[Growth_Monitor, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Pest_Control, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Water_Recycle, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Light_Optimize, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Harvest_Sync, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Sterilize_Crop, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Package_Fresh, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Demand_Forecast, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Delivery_Plan, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Data_Feedback, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10])
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)