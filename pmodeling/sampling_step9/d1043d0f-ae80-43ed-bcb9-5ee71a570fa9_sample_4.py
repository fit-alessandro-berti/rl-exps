import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SiteSurvey = Transition(label='Site Survey')
EnvAnalysis = Transition(label='Env Analysis')
ModuleDesign = Transition(label='Module Design')
SeedSelection = Transition(label='Seed Selection')
NutrientMix = Transition(label='Nutrient Mix')
ClimateSetup = Transition(label='Climate Setup')
LEDInstall = Transition(label='LED Install')
SensorDeploy = Transition(label='Sensor Deploy')
PestControl = Transition(label='Pest Control')
WasteRecycle = Transition(label='Waste Recycle')
HydroTest = Transition(label='Hydro Test')
StaffTrain = Transition(label='Staff Train')
YieldForecast = Transition(label='Yield Forecast')
MarketPlan = Transition(label='Market Plan')
DataReview = Transition(label='Data Review')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[SiteSurvey, EnvAnalysis])
xor = OperatorPOWL(operator=Operator.XOR, children=[ModuleDesign, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[SeedSelection, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[NutrientMix, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[ClimateSetup, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[LEDInstall, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[SensorDeploy, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[PestControl, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[WasteRecycle, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[HydroTest, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[StaffTrain, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[YieldForecast, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[MarketPlan, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[DataReview, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)