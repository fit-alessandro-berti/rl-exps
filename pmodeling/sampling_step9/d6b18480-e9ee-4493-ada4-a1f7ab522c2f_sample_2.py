import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
MaterialSourcing = Transition(label='Material Sourcing')
ForagerDispatch = Transition(label='Forager Dispatch')
AuthenticityCheck = Transition(label='Authenticity Check')
BatchScheduling = Transition(label='Batch Scheduling')
ArtisanAllocation = Transition(label='Artisan Allocation')
CraftAssembly = Transition(label='Craft Assembly')
QualityInspection = Transition(label='Quality Inspection')
BlockchainUpdate = Transition(label='Blockchain Update')
DemandForecast = Transition(label='Demand Forecast')
PriceAdjustment = Transition(label='Price Adjustment')
ComplianceReview = Transition(label='Compliance Review')
LogisticsPlanning = Transition(label='Logistics Planning')
DistributorSync = Transition(label='Distributor Sync')
CustomerFeedback = Transition(label='Customer Feedback')
ProductRefinement = Transition(label='Product Refinement')
ReputationAudit = Transition(label='Reputation Audit')
SeasonalReview = Transition(label='Seasonal Review')
skip = SilentTransition()
authenticity_loop = OperatorPOWL(operator=Operator.LOOP, children=[AuthenticityCheck, BlockchainUpdate])
scheduling_loop = OperatorPOWL(operator=Operator.LOOP, children=[BatchScheduling, ArtisanAllocation])
crafting_loop = OperatorPOWL(operator=Operator.LOOP, children=[CraftAssembly, QualityInspection])
logistics_loop = OperatorPOWL(operator=Operator.LOOP, children=[LogisticsPlanning, DistributorSync])
feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[CustomerFeedback, ProductRefinement])
audit_loop = OperatorPOWL(operator=Operator.LOOP, children=[ReputationAudit, SeasonalReview])
root = StrictPartialOrder(nodes=[authenticity_loop, scheduling_loop, crafting_loop, logistics_loop, feedback_loop, audit_loop])
root.order.add_edge(authenticity_loop, scheduling_loop)
root.order.add_edge(scheduling_loop, crafting_loop)
root.order.add_edge(crafting_loop, logistics_loop)
root.order.add_edge(logistics_loop, feedback_loop)
root.order.add_edge(feedback_loop, audit_loop)