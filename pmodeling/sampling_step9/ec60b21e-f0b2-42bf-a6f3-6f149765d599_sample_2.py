import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
modular_design = Transition(label='Modular Design')
system_build = Transition(label='System Build')
env_control = Transition(label='Env Control')
seed_selection = Transition(label='Seed Selection')
nutrient_mix = Transition(label='Nutrient Mix')
planting_setup = Transition(label='Planting Setup')
growth_monitor = Transition(label='Growth Monitor')
pest_control = Transition(label='Pest Control')
water_cycle = Transition(label='Water Cycle')
data_capture = Transition(label='Data Capture')
yield_forecast = Transition(label='Yield Forecast')
waste_reuse = Transition(label='Waste Reuse')
stakeholder_meet = Transition(label='Stakeholder Meet')
compliance_check = Transition(label='Compliance Check')
supply_sync = Transition(label='Supply Sync')
skip = SilentTransition()

site_survey_loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey])
modular_design_loop = OperatorPOWL(operator=Operator.LOOP, children=[modular_design])
system_build_loop = OperatorPOWL(operator=Operator.LOOP, children=[system_build])
env_control_loop = OperatorPOWL(operator=Operator.LOOP, children=[env_control])
seed_selection_loop = OperatorPOWL(operator=Operator.LOOP, children=[seed_selection])
nutrient_mix_loop = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_mix])
planting_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[planting_setup])
growth_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[growth_monitor])
pest_control_loop = OperatorPOWL(operator=Operator.LOOP, children=[pest_control])
water_cycle_loop = OperatorPOWL(operator=Operator.LOOP, children=[water_cycle])
data_capture_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_capture])
yield_forecast_loop = OperatorPOWL(operator=Operator.LOOP, children=[yield_forecast])
waste_reuse_loop = OperatorPOWL(operator=Operator.LOOP, children=[waste_reuse])
stakeholder_meet_loop = OperatorPOWL(operator=Operator.LOOP, children=[stakeholder_meet])
compliance_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[compliance_check])
supply_sync_loop = OperatorPOWL(operator=Operator.LOOP, children=[supply_sync])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[env_control_loop, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[seed_selection_loop, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[planting_setup_loop, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor_loop, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[pest_control_loop, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[water_cycle_loop, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[data_capture_loop, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[yield_forecast_loop, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[waste_reuse_loop, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_meet_loop, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check_loop, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[supply_sync_loop, skip])

root = StrictPartialOrder(nodes=[site_survey_loop, modular_design_loop, system_build_loop, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12])
root.order.add_edge(site_survey_loop, modular_design_loop)
root.order.add_edge(modular_design_loop, system_build_loop)
root.order.add_edge(system_build_loop, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, skip)