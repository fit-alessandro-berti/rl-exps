import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Milk_Sourcing = Transition(label='Milk Sourcing')
Culture_Prep = Transition(label='Culture Prep')
Milk_Pasteurize = Transition(label='Milk Pasteurize')
Coagulation = Transition(label='Coagulation')
Curd_Cutting = Transition(label='Curd Cutting')
Whey_Draining = Transition(label='Whey Draining')
Hand_Molding = Transition(label='Hand Molding')
Pressing = Transition(label='Pressing')
Salting = Transition(label='Salting')
Rind_Treatment = Transition(label='Rind Treatment')
Aging_Setup = Transition(label='Aging Setup')
Microclimate_Control = Transition(label='Microclimate Control')
Flavor_Profiling = Transition(label='Flavor Profiling')
Quality_Check = Transition(label='Quality Check')
Sensory_Review = Transition(label='Sensory Review')
Texture_Inspect = Transition(label='Texture Inspect')
Eco_Packaging = Transition(label='Eco Packaging')
Batch_Labeling = Transition(label='Batch Labeling')
Blockchain_Log = Transition(label='Blockchain Log')
Niche_Shipping = Transition(label='Niche Shipping')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Aging_Setup, Microclimate_Control])
xor = OperatorPOWL(operator=Operator.XOR, children=[Rind_Treatment, skip])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[Salting, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Pressing, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Curd_Cutting, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Whey_Draining, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Coagulation, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Milk_Pasteurize, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Culture_Prep, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Milk_Sourcing, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Eco_Packaging, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Batch_Labeling, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Blockchain_Log, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Niche_Shipping, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Quality_Check, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[Sensory_Review, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[Texture_Inspect, skip])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[Flavor_Profiling, skip])
root = StrictPartialOrder(nodes=[xor16, xor15, xor14, xor13, xor12, xor11, xor10, xor9, xor8, xor7, xor6, xor5, xor4, xor3, xor2, xor, loop])
root.order.add_edge(xor16, xor15)
root.order.add_edge(xor15, xor14)
root.order.add_edge(xor14, xor13)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor)
root.order.add_edge(xor, loop)