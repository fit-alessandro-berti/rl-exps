import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
ArtifactResearch = Transition(label='Artifact Research')
OwnershipVerify = Transition(label='Ownership Verify')
StakeholderMeet = Transition(label='Stakeholder Meet')
LegalReview = Transition(label='Legal Review')
DiplomaticContact = Transition(label='Diplomatic Contact')
ConditionReport = Transition(label='Condition Report')
TransportPlan = Transition(label='Transport Plan')
InsuranceSetup = Transition(label='Insurance Setup')
CustomsClear = Transition(label='Customs Clear')
SecurePackaging = Transition(label='Secure Packaging')
ShippingMonitor = Transition(label='Shipping Monitor')
CommunityBrief = Transition(label='Community Brief')
ArrivalInspect = Transition(label='Arrival Inspect')
ExhibitPrepare = Transition(label='Exhibit Prepare')
PublicRelease = Transition(label='Public Release')
skip = SilentTransition()
artifact_research_loop = OperatorPOWL(operator=Operator.LOOP, children=[ArtifactResearch])
ownership_verify_loop = OperatorPOWL(operator=Operator.LOOP, children=[OwnershipVerify])
stakeholder_meet_loop = OperatorPOWL(operator=Operator.LOOP, children=[StakeholderMeet])
legal_review_loop = OperatorPOWL(operator=Operator.LOOP, children=[LegalReview])
diplomatic_contact_loop = OperatorPOWL(operator=Operator.LOOP, children=[DiplomaticContact])
condition_report_loop = OperatorPOWL(operator=Operator.LOOP, children=[ConditionReport])
transport_plan_loop = OperatorPOWL(operator=Operator.LOOP, children=[TransportPlan])
insurance_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[InsuranceSetup])
customs_clear_loop = OperatorPOWL(operator=Operator.LOOP, children=[CustomsClear])
secure_packaging_loop = OperatorPOWL(operator=Operator.LOOP, children=[SecurePackaging])
shipping_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[ShippingMonitor])
community_brief_loop = OperatorPOWL(operator=Operator.LOOP, children=[CommunityBrief])
arrival_inspect_loop = OperatorPOWL(operator=Operator.LOOP, children=[ArrivalInspect])
exhibit_prepare_loop = OperatorPOWL(operator=Operator.LOOP, children=[ExhibitPrepare])
public_release_loop = OperatorPOWL(operator=Operator.LOOP, children=[PublicRelease])
xor = OperatorPOWL(operator=Operator.XOR, children=[artifact_research_loop, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[ownership_verify_loop, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_meet_loop, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[legal_review_loop, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[diplomatic_contact_loop, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[condition_report_loop, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[transport_plan_loop, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[insurance_setup_loop, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[customs_clear_loop, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[secure_packaging_loop, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[shipping_monitor_loop, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[community_brief_loop, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[arrival_inspect_loop, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[exhibit_prepare_loop, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[public_release_loop, skip])
root = StrictPartialOrder(nodes=[xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15])
root.order.add_edge(xor, xor2)
root.order.add_edge(xor, xor3)
root.order.add_edge(xor, xor4)
root.order.add_edge(xor, xor5)
root.order.add_edge(xor, xor6)
root.order.add_edge(xor, xor7)
root.order.add_edge(xor, xor8)
root.order.add_edge(xor, xor9)
root.order.add_edge(xor, xor10)
root.order.add_edge(xor, xor11)
root.order.add_edge(xor, xor12)
root.order.add_edge(xor, xor13)
root.order.add_edge(xor, xor14)
root.order.add_edge(xor, xor15)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor2, xor6)
root.order.add_edge(xor2, xor7)
root.order.add_edge(xor2, xor8)
root.order.add_edge(xor2, xor9)
root.order.add_edge(xor2, xor10)
root.order.add_edge(xor2, xor11)
root.order.add_edge(xor2, xor12)
root.order.add_edge(xor2, xor13)
root.order.add_edge(xor2, xor14)
root.order.add_edge(xor2, xor15)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor3, xor6)
root.order.add_edge(xor3, xor7)
root.order.add_edge(xor3, xor8)
root.order.add_edge(xor3, xor9)
root.order.add_edge(xor3, xor10)
root.order.add_edge(xor3, xor11)
root.order.add_edge(xor3, xor12)
root.order.add_edge(xor3, xor13)
root.order.add_edge(xor3, xor14)
root.order.add_edge(xor3, xor15)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor4, xor6)
root.order.add_edge(xor4, xor7)
root.order.add_edge(xor4, xor8)
root.order.add_edge(xor4, xor9)
root.order.add_edge(xor4, xor10)
root.order.add_edge(xor4, xor11)
root.order.add_edge(xor4, xor12)
root.order.add_edge(xor4, xor13)
root.order.add_edge(xor4, xor14)
root.order.add_edge(xor4, xor15)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor5, xor7)
root.order.add_edge(xor5, xor8)
root.order.add_edge(xor5, xor9)
root.order.add_edge(xor5, xor10)
root.order.add_edge(xor5, xor11)
root.order.add_edge(xor5, xor12)
root.order.add_edge(xor5, xor13)
root.order.add_edge(xor5, xor14)
root.order.add_edge(xor5, xor15)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor6, xor8)
root.order.add_edge(xor6, xor9)
root.order.add_edge(xor6, xor10)
root.order.add_edge(xor6, xor11)
root.order.add_edge(xor6, xor12)
root.order.add_edge(xor6, xor13)
root.order.add_edge(xor6, xor14)
root.order.add_edge(xor6, xor15)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor7, xor9)
root.order.add_edge(xor7, xor10)
root.order.add_edge(xor7, xor11)
root.order.add_edge(xor7, xor12)
root.order.add_edge(xor7, xor13)
root.order.add_edge(xor7, xor14)
root.order.add_edge(xor7, xor15)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor8, xor10)
root.order.add_edge(xor8, xor11)
root.order.add_edge(xor8, xor12)
root.order.add_edge(xor8, xor13)
root.order.add_edge(xor8, xor14)
root.order.add_edge(xor8, xor15)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor9, xor11)
root.order.add_edge(xor9, xor12)
root.order.add_edge(xor9, xor13)
root.order.add_edge(xor9, xor14)
root.order.add_edge(xor9, xor15)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor10, xor12)
root.order.add_edge(xor10, xor13)
root.order.add_edge(xor10, xor14)
root.order.add_edge(xor10, xor15)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor11, xor13)
root.order.add_edge(xor11, xor14)
root.order.add_edge(xor11, xor15)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor12, xor14)
root.order.add_edge(xor12, xor15)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor13, xor15)
root.order.add_edge(xor14, xor15)