import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
design_layout = Transition(label='Design Layout')
install_modules = Transition(label='Install Modules')
calibrate_climate = Transition(label='Calibrate Climate')
prepare_nutrients = Transition(label='Prepare Nutrients')
select_seeds = Transition(label='Select Seeds')
start_germination = Transition(label='Start Germination')
deploy_sensors = Transition(label='Deploy Sensors')
monitor_growth = Transition(label='Monitor Growth')
manage_pests = Transition(label='Manage Pests')
schedule_harvest = Transition(label='Schedule Harvest')
process_waste = Transition(label='Process Waste')
optimize_energy = Transition(label='Optimize Energy')
conduct_training = Transition(label='Conduct Training')
update_records = Transition(label='Update Records')
review_performance = Transition(label='Review Performance')

skip = SilentTransition()
loop_survey = OperatorPOWL(operator=Operator.LOOP, children=[site_survey])
loop_design = OperatorPOWL(operator=Operator.LOOP, children=[design_layout])
loop_install = OperatorPOWL(operator=Operator.LOOP, children=[install_modules])
loop_calibrate = OperatorPOWL(operator=Operator.LOOP, children=[calibrate_climate])
loop_nutrients = OperatorPOWL(operator=Operator.LOOP, children=[prepare_nutrients])
loop_seeds = OperatorPOWL(operator=Operator.LOOP, children=[select_seeds])
loop_germination = OperatorPOWL(operator=Operator.LOOP, children=[start_germination])
loop_sensors = OperatorPOWL(operator=Operator.LOOP, children=[deploy_sensors])
loop_growth = OperatorPOWL(operator=Operator.LOOP, children=[monitor_growth])
loop_pests = OperatorPOWL(operator=Operator.LOOP, children=[manage_pests])
loop_harvest = OperatorPOWL(operator=Operator.LOOP, children=[schedule_harvest])
loop_waste = OperatorPOWL(operator=Operator.LOOP, children=[process_waste])
loop_energy = OperatorPOWL(operator=Operator.LOOP, children=[optimize_energy])
loop_training = OperatorPOWL(operator=Operator.LOOP, children=[conduct_training])
loop_records = OperatorPOWL(operator=Operator.LOOP, children=[update_records])
loop_performance = OperatorPOWL(operator=Operator.LOOP, children=[review_performance])

xor_survey = OperatorPOWL(operator=Operator.XOR, children=[loop_survey, skip])
xor_design = OperatorPOWL(operator=Operator.XOR, children=[loop_design, skip])
xor_install = OperatorPOWL(operator=Operator.XOR, children=[loop_install, skip])
xor_calibrate = OperatorPOWL(operator=Operator.XOR, children=[loop_calibrate, skip])
xor_nutrients = OperatorPOWL(operator=Operator.XOR, children=[loop_nutrients, skip])
xor_seeds = OperatorPOWL(operator=Operator.XOR, children=[loop_seeds, skip])
xor_germination = OperatorPOWL(operator=Operator.XOR, children=[loop_germination, skip])
xor_sensors = OperatorPOWL(operator=Operator.XOR, children=[loop_sensors, skip])
xor_growth = OperatorPOWL(operator=Operator.XOR, children=[loop_growth, skip])
xor_pests = OperatorPOWL(operator=Operator.XOR, children=[loop_pests, skip])
xor_harvest = OperatorPOWL(operator=Operator.XOR, children=[loop_harvest, skip])
xor_waste = OperatorPOWL(operator=Operator.XOR, children=[loop_waste, skip])
xor_energy = OperatorPOWL(operator=Operator.XOR, children=[loop_energy, skip])
xor_training = OperatorPOWL(operator=Operator.XOR, children=[loop_training, skip])
xor_records = OperatorPOWL(operator=Operator.XOR, children=[loop_records, skip])
xor_performance = OperatorPOWL(operator=Operator.XOR, children=[loop_performance, skip])

root = StrictPartialOrder(nodes=[xor_survey, xor_design, xor_install, xor_calibrate, xor_nutrients, xor_seeds, xor_germination, xor_sensors, xor_growth, xor_pests, xor_harvest, xor_waste, xor_energy, xor_training, xor_records, xor_performance])
root.order.add_edge(xor_survey, xor_design)
root.order.add_edge(xor_design, xor_install)
root.order.add_edge(xor_install, xor_calibrate)
root.order.add_edge(xor_calibrate, xor_nutrients)
root.order.add_edge(xor_nutrients, xor_seeds)
root.order.add_edge(xor_seeds, xor_germination)
root.order.add_edge(xor_germination, xor_sensors)
root.order.add_edge(xor_sensors, xor_growth)
root.order.add_edge(xor_growth, xor_pests)
root.order.add_edge(xor_pests, xor_harvest)
root.order.add_edge(xor_harvest, xor_waste)
root.order.add_edge(xor_waste, xor_energy)
root.order.add_edge(xor_energy, xor_training)
root.order.add_edge(xor_training, xor_records)
root.order.add_edge(xor_records, xor_performance)