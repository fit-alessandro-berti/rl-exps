import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
milk_sourcing = Transition(label='Milk Sourcing')
culture_selection = Transition(label='Culture Selection')
milk_testing = Transition(label='Milk Testing')
fermentation_start = Transition(label='Fermentation Start')
temperature_control = Transition(label='Temperature Control')
pH_monitoring = Transition(label='pH Monitoring')
curd_cutting = Transition(label='Curd Cutting')
whey_draining = Transition(label='Whey Draining')
molding_cheese = Transition(label='Molding Cheese')
salting_process = Transition(label='Salting Process')
aging_setup = Transition(label='Aging Setup')
quality_check = Transition(label='Quality Check')
packaging_prep = Transition(label='Packaging Prep')
label_design = Transition(label='Label Design')
distribution_plan = Transition(label='Distribution Plan')
retail_delivery = Transition(label='Retail Delivery')
customer_feedback = Transition(label='Customer Feedback')

# Define the silent transition (skip)
skip = SilentTransition()

# Define the POWL model
loop_fermentation = OperatorPOWL(operator=Operator.LOOP, children=[fermentation_start, pH_monitoring, curd_cutting, whey_draining, molding_cheese, salting_process, quality_check])
loop_aging = OperatorPOWL(operator=Operator.LOOP, children=[aging_setup])
xor_sourcing = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, skip])
xor_culture = OperatorPOWL(operator=Operator.XOR, children=[culture_selection, skip])
xor_testing = OperatorPOWL(operator=Operator.XOR, children=[milk_testing, skip])
xor_temperature = OperatorPOWL(operator=Operator.XOR, children=[temperature_control, skip])
xor_pH = OperatorPOWL(operator=Operator.XOR, children=[pH_monitoring, skip])
xor_curd = OperatorPOWL(operator=Operator.XOR, children=[curd_cutting, skip])
xor_whey = OperatorPOWL(operator=Operator.XOR, children=[whey_draining, skip])
xor_molding = OperatorPOWL(operator=Operator.XOR, children=[molding_cheese, skip])
xor_salting = OperatorPOWL(operator=Operator.XOR, children=[salting_process, skip])
xor_quality = OperatorPOWL(operator=Operator.XOR, children=[quality_check, skip])
xor_packaging = OperatorPOWL(operator=Operator.XOR, children=[packaging_prep, skip])
xor_label = OperatorPOWL(operator=Operator.XOR, children=[label_design, skip])
xor_distribution = OperatorPOWL(operator=Operator.XOR, children=[distribution_plan, skip])
xor_retail = OperatorPOWL(operator=Operator.XOR, children=[retail_delivery, skip])
xor_feedback = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, skip])

# Create the root of the POWL model
root = StrictPartialOrder(nodes=[xor_sourcing, xor_culture, xor_testing, xor_temperature, xor_pH, xor_curd, xor_whey, xor_molding, xor_salting, xor_quality, xor_packaging, xor_label, xor_distribution, xor_retail, xor_feedback, loop_fermentation, loop_aging])
root.order.add_edge(xor_sourcing, loop_fermentation)
root.order.add_edge(xor_culture, loop_fermentation)
root.order.add_edge(xor_testing, loop_fermentation)
root.order.add_edge(xor_temperature, loop_fermentation)
root.order.add_edge(xor_pH, loop_fermentation)
root.order.add_edge(xor_curd, loop_fermentation)
root.order.add_edge(xor_whey, loop_fermentation)
root.order.add_edge(xor_molding, loop_fermentation)
root.order.add_edge(xor_salting, loop_fermentation)
root.order.add_edge(xor_quality, loop_fermentation)
root.order.add_edge(xor_packaging, loop_fermentation)
root.order.add_edge(xor_label, loop_fermentation)
root.order.add_edge(xor_distribution, loop_fermentation)
root.order.add_edge(xor_retail, loop_fermentation)
root.order.add_edge(xor_feedback, loop_fermentation)
root.order.add_edge(loop_fermentation, xor_retail)
root.order.add_edge(loop_fermentation, xor_feedback)
root.order.add_edge(xor_retail, xor_distribution)
root.order.add_edge(xor_distribution, xor_feedback)

# Print the POWL model
print(root)