import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
design_layout = Transition(label='Design Layout')
install_lighting = Transition(label='Install Lighting')
setup_hydroponics = Transition(label='Setup Hydroponics')
calibrate_sensors = Transition(label='Calibrate Sensors')
select_crops = Transition(label='Select Crops')
mix_nutrients = Transition(label='Mix Nutrients')
deploy_iot = Transition(label='Deploy IoT')
energy_audit = Transition(label='Energy Audit')
train_staff = Transition(label='Train Staff')
pest_control = Transition(label='Pest Control')
legal_review = Transition(label='Legal Review')
market_analysis = Transition(label='Market Analysis')
plan_logistics = Transition(label='Plan Logistics')
yield_review = Transition(label='Yield Review')

skip = SilentTransition()

site_survey_choice = OperatorPOWL(operator=Operator.XOR, children=[site_survey, skip])
design_layout_choice = OperatorPOWL(operator=Operator.XOR, children=[design_layout, skip])
install_lighting_choice = OperatorPOWL(operator=Operator.XOR, children=[install_lighting, skip])
setup_hydroponics_choice = OperatorPOWL(operator=Operator.XOR, children=[setup_hydroponics, skip])
calibrate_sensors_choice = OperatorPOWL(operator=Operator.XOR, children=[calibrate_sensors, skip])
select_crops_choice = OperatorPOWL(operator=Operator.XOR, children=[select_crops, skip])
mix_nutrients_choice = OperatorPOWL(operator=Operator.XOR, children=[mix_nutrients, skip])
deploy_iot_choice = OperatorPOWL(operator=Operator.XOR, children=[deploy_iot, skip])
energy_audit_choice = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
train_staff_choice = OperatorPOWL(operator=Operator.XOR, children=[train_staff, skip])
pest_control_choice = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
legal_review_choice = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
market_analysis_choice = OperatorPOWL(operator=Operator.XOR, children=[market_analysis, skip])
plan_logistics_choice = OperatorPOWL(operator=Operator.XOR, children=[plan_logistics, skip])
yield_review_choice = OperatorPOWL(operator=Operator.XOR, children=[yield_review, skip])

root = StrictPartialOrder(nodes=[site_survey_choice, design_layout_choice, install_lighting_choice, setup_hydroponics_choice, calibrate_sensors_choice, select_crops_choice, mix_nutrients_choice, deploy_iot_choice, energy_audit_choice, train_staff_choice, pest_control_choice, legal_review_choice, market_analysis_choice, plan_logistics_choice, yield_review_choice])
root.order.add_edge(site_survey_choice, design_layout_choice)
root.order.add_edge(design_layout_choice, install_lighting_choice)
root.order.add_edge(install_lighting_choice, setup_hydroponics_choice)
root.order.add_edge(setup_hydroponics_choice, calibrate_sensors_choice)
root.order.add_edge(calibrate_sensors_choice, select_crops_choice)
root.order.add_edge(select_crops_choice, mix_nutrients_choice)
root.order.add_edge(mix_nutrients_choice, deploy_iot_choice)
root.order.add_edge(deploy_iot_choice, energy_audit_choice)
root.order.add_edge(energy_audit_choice, train_staff_choice)
root.order.add_edge(train_staff_choice, pest_control_choice)
root.order.add_edge(pest_control_choice, legal_review_choice)
root.order.add_edge(legal_review_choice, market_analysis_choice)
root.order.add_edge(market_analysis_choice, plan_logistics_choice)
root.order.add_edge(plan_logistics_choice, yield_review_choice)