import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

seed_sourcing = Transition(label='Seed Sourcing')
germination_check = Transition(label='Germination Check')
nutrient_mix = Transition(label='Nutrient Mix')
automated_planting = Transition(label='Automated Planting')
climate_control = Transition(label='Climate Control')
crop_scanning = Transition(label='Crop Scanning')
pest_monitoring = Transition(label='Pest Monitoring')
growth_analysis = Transition(label='Growth Analysis')
robotic_harvest = Transition(label='Robotic Harvest')
quality_sort = Transition(label='Quality Sort')
eco_packaging = Transition(label='Eco Packaging')
blockchain_track = Transition(label='Blockchain Track')
route_planning = Transition(label='Route Planning')
feedback_collect = Transition(label='Feedback Collect')
waste_recycling = Transition(label='Waste Recycling')
data_analytics = Transition(label='Data Analytics')
demand_forecast = Transition(label='Demand Forecast')
maintenance_alert = Transition(label='Maintenance Alert')

skip = SilentTransition()

seed_sourcing_choice = OperatorPOWL(operator=Operator.XOR, children=[seed_sourcing, skip])
germination_check_choice = OperatorPOWL(operator=Operator.XOR, children=[germination_check, skip])
nutrient_mix_choice = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, skip])
automated_planting_choice = OperatorPOWL(operator=Operator.XOR, children=[automated_planting, skip])
climate_control_choice = OperatorPOWL(operator=Operator.XOR, children=[climate_control, skip])
crop_scanning_choice = OperatorPOWL(operator=Operator.XOR, children=[crop_scanning, skip])
pest_monitoring_choice = OperatorPOWL(operator=Operator.XOR, children=[pest_monitoring, skip])
growth_analysis_choice = OperatorPOWL(operator=Operator.XOR, children=[growth_analysis, skip])
robotic_harvest_choice = OperatorPOWL(operator=Operator.XOR, children=[robotic_harvest, skip])
quality_sort_choice = OperatorPOWL(operator=Operator.XOR, children=[quality_sort, skip])
eco_packaging_choice = OperatorPOWL(operator=Operator.XOR, children=[eco_packaging, skip])
blockchain_track_choice = OperatorPOWL(operator=Operator.XOR, children=[blockchain_track, skip])
route_planning_choice = OperatorPOWL(operator=Operator.XOR, children=[route_planning, skip])
feedback_collect_choice = OperatorPOWL(operator=Operator.XOR, children=[feedback_collect, skip])
waste_recycling_choice = OperatorPOWL(operator=Operator.XOR, children=[waste_recycling, skip])
data_analytics_choice = OperatorPOWL(operator=Operator.XOR, children=[data_analytics, skip])
demand_forecast_choice = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, skip])
maintenance_alert_choice = OperatorPOWL(operator=Operator.XOR, children=[maintenance_alert, skip])

root = StrictPartialOrder(nodes=[seed_sourcing_choice, germination_check_choice, nutrient_mix_choice, automated_planting_choice, climate_control_choice, crop_scanning_choice, pest_monitoring_choice, growth_analysis_choice, robotic_harvest_choice, quality_sort_choice, eco_packaging_choice, blockchain_track_choice, route_planning_choice, feedback_collect_choice, waste_recycling_choice, data_analytics_choice, demand_forecast_choice, maintenance_alert_choice])
root.order.add_edge(seed_sourcing_choice, germination_check_choice)
root.order.add_edge(germination_check_choice, nutrient_mix_choice)
root.order.add_edge(nutrient_mix_choice, automated_planting_choice)
root.order.add_edge(automated_planting_choice, climate_control_choice)
root.order.add_edge(climate_control_choice, crop_scanning_choice)
root.order.add_edge(crop_scanning_choice, pest_monitoring_choice)
root.order.add_edge(pest_monitoring_choice, growth_analysis_choice)
root.order.add_edge(growth_analysis_choice, robotic_harvest_choice)
root.order.add_edge(robotic_harvest_choice, quality_sort_choice)
root.order.add_edge(quality_sort_choice, eco_packaging_choice)
root.order.add_edge(eco_packaging_choice, blockchain_track_choice)
root.order.add_edge(blockchain_track_choice, route_planning_choice)
root.order.add_edge(route_planning_choice, feedback_collect_choice)
root.order.add_edge(feedback_collect_choice, waste_recycling_choice)
root.order.add_edge(waste_recycling_choice, data_analytics_choice)
root.order.add_edge(data_analytics_choice, demand_forecast_choice)
root.order.add_edge(demand_forecast_choice, maintenance_alert_choice)