import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

user_signup = Transition(label='User Signup')
preference_set = Transition(label='Preference Set')
meal_select = Transition(label='Meal Select')
schedule_delivery = Transition(label='Schedule Delivery')
supplier_match = Transition(label='Supplier Match')
inventory_check = Transition(label='Inventory Check')
ingredient_order = Transition(label='Ingredient Order')
quality_inspect = Transition(label='Quality Inspect')
meal_pack = Transition(label='Meal Pack')
route_plan = Transition(label='Route Plan')
dispatch_kit = Transition(label='Dispatch Kit')
delivery_track = Transition(label='Delivery Track')
feedback_collect = Transition(label='Feedback Collect')
data_analyze = Transition(label='Data Analyze')
plan_optimize = Transition(label='Plan Optimize')

skip = SilentTransition()

xor1 = OperatorPOWL(operator=Operator.XOR, children=[preference_set, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[meal_select, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[schedule_delivery, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[supplier_match, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[inventory_check, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[ingredient_order, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[quality_inspect, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[meal_pack, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[route_plan, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[dispatch_kit, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[delivery_track, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[feedback_collect, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[data_analyze, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[plan_optimize, skip])

root = StrictPartialOrder(nodes=[user_signup, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14])
root.order.add_edge(user_signup, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)