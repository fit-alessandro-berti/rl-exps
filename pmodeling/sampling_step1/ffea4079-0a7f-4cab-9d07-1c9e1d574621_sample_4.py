import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions (activities)
scenario_setup = Transition(label='Scenario Setup')
resource_mapping = Transition(label='Resource Mapping')
team_briefing = Transition(label='Team Briefing')
tech_deployment = Transition(label='Tech Deployment')
data_sync = Transition(label='Data Sync')
comm_setup = Transition(label='Comm Setup')
live_monitoring = Transition(label='Live Monitoring')
variable_adjust = Transition(label='Variable Adjust')
incident_injection = Transition(label='Incident Injection')
response_tracking = Transition(label='Response Tracking')
interlock_check = Transition(label='Interlock Check')
real_time_feedback = Transition(label='Real-time Feedback')
debrief_session = Transition(label='Debrief Session')
outcome_analysis = Transition(label='Outcome Analysis')
report_generation = Transition(label='Report Generation')
improvement_plan = Transition(label='Improvement Plan')

# Define the POWL model
root = StrictPartialOrder(nodes=[scenario_setup, resource_mapping, team_briefing, tech_deployment, data_sync, comm_setup, live_monitoring, variable_adjust, incident_injection, response_tracking, interlock_check, real_time_feedback, debrief_session, outcome_analysis, report_generation, improvement_plan])

# Define the dependencies between activities
root.order.add_edge(scenario_setup, resource_mapping)
root.order.add_edge(scenario_setup, team_briefing)
root.order.add_edge(scenario_setup, tech_deployment)
root.order.add_edge(scenario_setup, data_sync)
root.order.add_edge(scenario_setup, comm_setup)
root.order.add_edge(resource_mapping, live_monitoring)
root.order.add_edge(resource_mapping, variable_adjust)
root.order.add_edge(resource_mapping, incident_injection)
root.order.add_edge(resource_mapping, response_tracking)
root.order.add_edge(resource_mapping, interlock_check)
root.order.add_edge(resource_mapping, real_time_feedback)
root.order.add_edge(resource_mapping, debrief_session)
root.order.add_edge(resource_mapping, outcome_analysis)
root.order.add_edge(resource_mapping, report_generation)
root.order.add_edge(resource_mapping, improvement_plan)
root.order.add_edge(live_monitoring, variable_adjust)
root.order.add_edge(live_monitoring, incident_injection)
root.order.add_edge(live_monitoring, response_tracking)
root.order.add_edge(live_monitoring, interlock_check)
root.order.add_edge(live_monitoring, real_time_feedback)
root.order.add_edge(live_monitoring, debrief_session)
root.order.add_edge(live_monitoring, outcome_analysis)
root.order.add_edge(live_monitoring, report_generation)
root.order.add_edge(live_monitoring, improvement_plan)
root.order.add_edge(variable_adjust, incident_injection)
root.order.add_edge(variable_adjust, response_tracking)
root.order.add_edge(variable_adjust, interlock_check)
root.order.add_edge(variable_adjust, real_time_feedback)
root.order.add_edge(variable_adjust, debrief_session)
root.order.add_edge(variable_adjust, outcome_analysis)
root.order.add_edge(variable_adjust, report_generation)
root.order.add_edge(variable_adjust, improvement_plan)
root.order.add_edge(incident_injection, response_tracking)
root.order.add_edge(incident_injection, interlock_check)
root.order.add_edge(incident_injection, real_time_feedback)
root.order.add_edge(incident_injection, debrief_session)
root.order.add_edge(incident_injection, outcome_analysis)
root.order.add_edge(incident_injection, report_generation)
root.order.add_edge(incident_injection, improvement_plan)
root.order.add_edge(response_tracking, interlock_check)
root.order.add_edge(response_tracking, real_time_feedback)
root.order.add_edge(response_tracking, debrief_session)
root.order.add_edge(response_tracking, outcome_analysis)
root.order.add_edge(response_tracking, report_generation)
root.order.add_edge(response_tracking, improvement_plan)
root.order.add_edge(interlock_check, real_time_feedback)
root.order.add_edge(interlock_check, debrief_session)
root.order.add_edge(interlock_check, outcome_analysis)
root.order.add_edge(interlock_check, report_generation)
root.order.add_edge(interlock_check, improvement_plan)
root.order.add_edge(real_time_feedback, debrief_session)
root.order.add_edge(real_time_feedback, outcome_analysis)
root.order.add_edge(real_time_feedback, report_generation)
root.order.add_edge(real_time_feedback, improvement_plan)
root.order.add_edge(debrief_session, outcome_analysis)
root.order.add_edge(debrief_session, report_generation)
root.order.add_edge(debrief_session, improvement_plan)
root.order.add_edge(outcome_analysis, report_generation)
root.order.add_edge(outcome_analysis, improvement_plan)
root.order.add_edge(report_generation, improvement_plan)

print(root)