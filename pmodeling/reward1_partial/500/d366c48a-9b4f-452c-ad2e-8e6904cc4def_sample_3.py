import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
climate_scan = Transition(label='Climate Scan')
module_setup = Transition(label='Module Setup')
crop_choice = Transition(label='Crop Choice')
nutrient_feed = Transition(label='Nutrient Feed')
pest_control = Transition(label='Pest Control')
energy_audit = Transition(label='Energy Audit')
waste_cycle = Transition(label='Waste Cycle')
growth_track = Transition(label='Growth Track')
demand_plan = Transition(label='Demand Plan')
community_link = Transition(label='Community Link')
regulation_check = Transition(label='Regulation Check')
supply_sync = Transition(label='Supply Sync')
system_upgrade = Transition(label='System Upgrade')
data_backup = Transition(label='Data Backup')

skip = SilentTransition()

site_survey_xor = OperatorPOWL(operator=Operator.XOR, children=[climate_scan, skip])
module_setup_xor = OperatorPOWL(operator=Operator.XOR, children=[module_setup, skip])
crop_choice_xor = OperatorPOWL(operator=Operator.XOR, children=[crop_choice, skip])
nutrient_feed_xor = OperatorPOWL(operator=Operator.XOR, children=[nutrient_feed, skip])
pest_control_xor = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
energy_audit_xor = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
waste_cycle_xor = OperatorPOWL(operator=Operator.XOR, children=[waste_cycle, skip])
growth_track_xor = OperatorPOWL(operator=Operator.XOR, children=[growth_track, skip])
demand_plan_xor = OperatorPOWL(operator=Operator.XOR, children=[demand_plan, skip])
community_link_xor = OperatorPOWL(operator=Operator.XOR, children=[community_link, skip])
regulation_check_xor = OperatorPOWL(operator=Operator.XOR, children=[regulation_check, skip])
supply_sync_xor = OperatorPOWL(operator=Operator.XOR, children=[supply_sync, skip])
system_upgrade_xor = OperatorPOWL(operator=Operator.XOR, children=[system_upgrade, skip])
data_backup_xor = OperatorPOWL(operator=Operator.XOR, children=[data_backup, skip])

root = StrictPartialOrder(nodes=[
    site_survey, climate_scan, module_setup, crop_choice, nutrient_feed, pest_control, energy_audit, waste_cycle, growth_track, demand_plan, community_link, regulation_check, supply_sync, system_upgrade, data_backup
])
root.order.add_edge(site_survey, site_survey_xor)
root.order.add_edge(climate_scan, module_setup_xor)
root.order.add_edge(module_setup, crop_choice_xor)
root.order.add_edge(crop_choice, nutrient_feed_xor)
root.order.add_edge(nutrient_feed, pest_control_xor)
root.order.add_edge(pest_control, energy_audit_xor)
root.order.add_edge(energy_audit, waste_cycle_xor)
root.order.add_edge(waste_cycle, growth_track_xor)
root.order.add_edge(growth_track, demand_plan_xor)
root.order.add_edge(demand_plan, community_link_xor)
root.order.add_edge(community_link, regulation_check_xor)
root.order.add_edge(regulation_check, supply_sync_xor)
root.order.add_edge(supply_sync, system_upgrade_xor)
root.order.add_edge(system_upgrade, data_backup_xor)