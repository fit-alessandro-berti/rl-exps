from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
root = StrictPartialOrder()

# Define activities
client_onboard = Transition(label='Client Onboard')
needs_assess = Transition(label='Needs Assess')
drone_config = Transition(label='Drone Config')
route_program = Transition(label='Route Program')
compliance_check = Transition(label='Compliance Check')
insurance_verify = Transition(label='Insurance Verify')
lease_contract = Transition(label='Lease Contract')
fleet_deploy = Transition(label='Fleet Deploy')
monitor_setup = Transition(label='Monitor Setup')
usage_track = Transition(label='Usage Track')
maintenance_plan = Transition(label='Maintenance Plan')
incident_manage = Transition(label='Incident Manage')
billing_process = Transition(label='Billing Process')
performance_report = Transition(label='Performance Report')
contract_renew = Transition(label='Contract Renew')
price_adjust = Transition(label='Price Adjust')
feedback_collect = Transition(label='Feedback Collect')

# Define the sequence of activities
client_onboard_to_needs_assess = OperatorPOWL(operator=Operator.SEQUENCE, children=[client_onboard, needs_assess])
needs_assess_to_drone_config = OperatorPOWL(operator=Operator.SEQUENCE, children=[needs_assess, drone_config])
drone_config_to_route_program = OperatorPOWL(operator=Operator.SEQUENCE, children=[drone_config, route_program])
route_program_to_compliance_check = OperatorPOWL(operator=Operator.SEQUENCE, children=[route_program, compliance_check])
compliance_check_to_insurance_verify = OperatorPOWL(operator=Operator.SEQUENCE, children=[compliance_check, insurance_verify])
insurance_verify_to_lease_contract = OperatorPOWL(operator=Operator.SEQUENCE, children=[insurance_verify, lease_contract])
lease_contract_to_fleet_deploy = OperatorPOWL(operator=Operator.SEQUENCE, children=[lease_contract, fleet_deploy])
fleet_deploy_to_monitor_setup = OperatorPOWL(operator=Operator.SEQUENCE, children=[fleet_deploy, monitor_setup])
monitor_setup_to_usage_track = OperatorPOWL(operator=Operator.SEQUENCE, children=[monitor_setup, usage_track])
usage_track_to_maintenance_plan = OperatorPOWL(operator=Operator.SEQUENCE, children=[usage_track, maintenance_plan])
maintenance_plan_to_incident_manage = OperatorPOWL(operator=Operator.SEQUENCE, children=[maintenance_plan, incident_manage])
incident_manage_to_billing_process = OperatorPOWL(operator=Operator.SEQUENCE, children=[incident_manage, billing_process])
billing_process_to_performance_report = OperatorPOWL(operator=Operator.SEQUENCE, children=[billing_process, performance_report])
performance_report_to_contract_renew = OperatorPOWL(operator=Operator.SEQUENCE, children=[performance_report, contract_renew])
contract_renew_to_price_adjust = OperatorPOWL(operator=Operator.SEQUENCE, children=[contract_renew, price_adjust])
price_adjust_to_feedback_collect = OperatorPOWL(operator=Operator.SEQUENCE, children=[price_adjust, feedback_collect])

# Add the sequence of activities to the POWL model
root.add_node(client_onboard_to_needs_assess)
root.add_node(needs_assess_to_drone_config)
root.add_node(drone_config_to_route_program)
root.add_node(route_program_to_compliance_check)
root.add_node(compliance_check_to_insurance_verify)
root.add_node(insurance_verify_to_lease_contract)
root.add_node(lease_contract_to_fleet_deploy)
root.add_node(fleet_deploy_to_monitor_setup)
root.add_node(monitor_setup_to_usage_track)
root.add_node(usage_track_to_maintenance_plan)
root.add_node(maintenance_plan_to_incident_manage)
root.add_node(incident_manage_to_billing_process)
root.add_node(billing_process_to_performance_report)
root.add_node(performance_report_to_contract_renew)
root.add_node(contract_renew_to_price_adjust)
root.add_node(price_adjust_to_feedback_collect)

# Set the order of execution
root.set_order(client_onboard_to_needs_assess, needs_assess_to_drone_config)
root.set_order(needs_assess_to_drone_config, drone_config_to_route_program)
root.set_order(drone_config_to_route_program, route_program_to_compliance_check)
root.set_order(route_program_to_compliance_check, compliance_check_to_insurance_verify)
root.set_order(compliance_check_to_insurance_verify, insurance_verify_to_lease_contract)
root.set_order(insurance_verify_to_lease_contract, lease_contract_to_fleet_deploy)
root.set_order(lease_contract_to_fleet_deploy, fleet_deploy_to_monitor_setup)
root.set_order(fleet_deploy_to_monitor_setup, monitor_setup_to_usage_track)
root.set_order(monitor_setup_to_usage_track, usage_track_to_maintenance_plan)
root.set_order(usage_track_to_maintenance_plan, maintenance_plan_to_incident_manage)
root.set_order(maintenance_plan_to_incident_manage, incident_manage_to_billing_process)
root.set_order(incident_manage_to_billing_process, billing_process_to_performance_report)
root.set_order(billing_process_to_performance_report, performance_report_to_contract_renew)
root.set_order(performance_report_to_contract_renew, contract_renew_to_price_adjust)
root.set_order(contract_renew_to_price_adjust, price_adjust_to_feedback_collect)

# Print the final POWL model
print(root)