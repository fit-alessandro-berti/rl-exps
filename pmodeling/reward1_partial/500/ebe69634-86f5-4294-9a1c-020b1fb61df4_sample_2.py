import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
client_intake = Transition(label='Client Intake')
needs_analysis = Transition(label='Needs Analysis')
developer_match = Transition(label='Developer Match')
expert_vetting = Transition(label='Expert Vetting')
prototype_build = Transition(label='Prototype Build')
feedback_loop = Transition(label='Feedback Loop')
model_refinement = Transition(label='Model Refinement')
license_draft = Transition(label='License Draft')
ip_negotiation = Transition(label='IP Negotiation')
contract_sign = Transition(label='Contract Sign')
deployment_prep = Transition(label='Deployment Prep')
go_live = Transition(label='Go Live')
monitor_model = Transition(label='Monitor Model')
optimize_ai = Transition(label='Optimize AI')
support_handoff = Transition(label='Support Handoff')
compliance_check = Transition(label='Compliance Check')
final_review = Transition(label='Final Review')

# Define the process tree
client_intake_to_needs_analysis = OperatorPOWL(operator=Operator.SEQUENCE, children=[client_intake, needs_analysis])
needs_analysis_to_developer_match = OperatorPOWL(operator=Operator.SEQUENCE, children=[needs_analysis, developer_match])
developer_match_to_expert_vetting = OperatorPOWL(operator=Operator.SEQUENCE, children=[developer_match, expert_vetting])
expert_vetting_to_prototype_build = OperatorPOWL(operator=Operator.SEQUENCE, children=[expert_vetting, prototype_build])
prototype_build_to_feedback_loop = OperatorPOWL(operator=Operator.SEQUENCE, children=[prototype_build, feedback_loop])
feedback_loop_to_model_refinement = OperatorPOWL(operator=Operator.SEQUENCE, children=[feedback_loop, model_refinement])
model_refinement_to_license_draft = OperatorPOWL(operator=Operator.SEQUENCE, children=[model_refinement, license_draft])
license_draft_to_ip_negotiation = OperatorPOWL(operator=Operator.SEQUENCE, children=[license_draft, ip_negotiation])
ip_negotiation_to_contract_sign = OperatorPOWL(operator=Operator.SEQUENCE, children=[ip_negotiation, contract_sign])
contract_sign_to_deployment_prep = OperatorPOWL(operator=Operator.SEQUENCE, children=[contract_sign, deployment_prep])
deployment_prep_to_go_live = OperatorPOWL(operator=Operator.SEQUENCE, children=[deployment_prep, go_live])
go_live_to_monitor_model = OperatorPOWL(operator=Operator.SEQUENCE, children=[go_live, monitor_model])
monitor_model_to_optimize_ai = OperatorPOWL(operator=Operator.SEQUENCE, children=[monitor_model, optimize_ai])
optimize_ai_to_support_handoff = OperatorPOWL(operator=Operator.SEQUENCE, children=[optimize_ai, support_handoff])
support_handoff_to_compliance_check = OperatorPOWL(operator=Operator.SEQUENCE, children=[support_handoff, compliance_check])
compliance_check_to_final_review = OperatorPOWL(operator=Operator.SEQUENCE, children=[compliance_check, final_review])

# Define the partial order
root = StrictPartialOrder(nodes=[client_intake, needs_analysis, developer_match, expert_vetting, prototype_build, feedback_loop, model_refinement, license_draft, ip_negotiation, contract_sign, deployment_prep, go_live, monitor_model, optimize_ai, support_handoff, compliance_check, final_review])
root.order.add_edge(client_intake, needs_analysis)
root.order.add_edge(needs_analysis, developer_match)
root.order.add_edge(developer_match, expert_vetting)
root.order.add_edge(expert_vetting, prototype_build)
root.order.add_edge(prototype_build, feedback_loop)
root.order.add_edge(feedback_loop, model_refinement)
root.order.add_edge(model_refinement, license_draft)
root.order.add_edge(license_draft, ip_negotiation)
root.order.add_edge(ip_negotiation, contract_sign)
root.order.add_edge(contract_sign, deployment_prep)
root.order.add_edge(deployment_prep, go_live)
root.order.add_edge(go_live, monitor_model)
root.order.add_edge(monitor_model, optimize_ai)
root.order.add_edge(optimize_ai, support_handoff)
root.order.add_edge(support_handoff, compliance_check)
root.order.add_edge(compliance_check, final_review)