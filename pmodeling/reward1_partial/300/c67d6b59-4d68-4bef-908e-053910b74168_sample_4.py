from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# Define the POWL model for the process
client_meet = Transition(label='Client Meet')
design_draft = Transition(label='Design Draft')
vendor_select = Transition(label='Vendor Select')
component_order = Transition(label='Component Order')
parts_inspect = Transition(label='Parts Inspect')
frame_build = Transition(label='Frame Build')
wiring_setup = Transition(label='Wiring Setup')
software_load = Transition(label='Software Load')
flight_sim = Transition(label='Flight Sim')
quality_test = Transition(label='Quality Test')
feedback_review = Transition(label='Feedback Review')
adjust_design = Transition(label='Adjust Design')
compliance_check = Transition(label='Compliance Check')
packaging_prep = Transition(label='Packaging Prep')
final_demo = Transition(label='Final Demo')
ship_drone = Transition(label='Ship Drone')

# Define the control flow operators
xor = OperatorPOWL(operator=Operator.XOR, children=[design_draft, vendor_select])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[component_order, parts_inspect])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[frame_build, wiring_setup])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[software_load, flight_sim])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[quality_test, feedback_review])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[adjust_design, compliance_check])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[packaging_prep, final_demo])
loop = OperatorPOWL(operator=Operator.LOOP, children=[ship_drone])

# Define the partial order
root = StrictPartialOrder(nodes=[client_meet, xor, xor2, xor3, xor4, xor5, xor6, xor7, loop])

# Add dependencies between nodes
root.order.add_edge(client_meet, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root.order.add_edge(loop, xor7)
root.order.add_edge(xor7, loop)
root