import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
seed_selection = Transition(label='Seed Selection')
nutrient_setup = Transition(label='Nutrient Setup')
growth_monitoring = Transition(label='Growth Monitoring')
climate_adjust = Transition(label='Climate Adjust')
pest_control = Transition(label='Pest Control')
water_recirculate = Transition(label='Water Recirculate')
light_calibration = Transition(label='Light Calibration')
robotic_harvest = Transition(label='Robotic Harvest')
quality_inspect = Transition(label='Quality Inspect')
waste_process = Transition(label='Waste Process')
energy_reuse = Transition(label='Energy Reuse')
inventory_update = Transition(label='Inventory Update')
demand_forecast = Transition(label='Demand Forecast')
order_dispatch = Transition(label='Order Dispatch')
community_event = Transition(label='Community Event')
feedback_collect = Transition(label='Feedback Collect')
data_analyze = Transition(label='Data Analyze')

# Define the control-flow operators
xor1 = OperatorPOWL(operator=Operator.XOR, children=[pest_control, water_recirculate])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[light_calibration, inventory_update])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[quality_inspect, waste_process])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[energy_reuse, data_analyze])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, order_dispatch])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[community_event, feedback_collect])

# Define the loop
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[growth_monitoring, xor1])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[climate_adjust, xor2])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[robotic_harvest, xor3])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[waste_process, xor4])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[energy_reuse, xor5])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[demand_forecast, xor6])

# Define the root POWL model
root = StrictPartialOrder(nodes=[seed_selection, nutrient_setup, loop1, loop2, loop3, loop4, loop5, loop6, xor5, xor6])
root.order.add_edge(seed_selection, nutrient_setup)
root.order.add_edge(nutrient_setup, loop1)
root.order.add_edge(loop1, growth_monitoring)
root.order.add_edge(growth_monitoring, xor1)
root.order.add_edge(xor1, pest_control)
root.order.add_edge(xor1, water_recirculate)
root.order.add_edge(loop2, climate_adjust)
root.order.add_edge(climate_adjust, xor2)
root.order.add_edge(xor2, light_calibration)
root.order.add_edge(xor2, inventory_update)
root.order.add_edge(loop3, robotic_harvest)
root.order.add_edge(robotic_harvest, xor3)
root.order.add_edge(xor3, quality_inspect)
root.order.add_edge(xor3, waste_process)
root.order.add_edge(loop4, waste_process)
root.order.add_edge(waste_process, xor4)
root.order.add_edge(xor4, energy_reuse)
root.order.add_edge(xor4, data_analyze)
root.order.add_edge(loop5, energy_reuse)
root.order.add_edge(energy_reuse, xor5)
root.order.add_edge(xor5, demand_forecast)
root.order.add_edge(xor5, order_dispatch)
root.order.add_edge(loop6, community_event)
root.order.add_edge(community_event, xor6)
root.order.add_edge(xor6, feedback_collect)
root.order.add_edge(xor6, data_analyze)