from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
sourcing = Transition(label='Material Sourcing')
vetting = Transition(label='Supplier Vetting')
design_review = Transition(label='Design Review')
prototype_build = Transition(label='Prototype Build')
quality_audit = Transition(label='Quality Audit')
batch_scheduling = Transition(label='Batch Scheduling')
handcrafting = Transition(label='Handcrafting')
packaging_design = Transition(label='Packaging Design')
custom_labeling = Transition(label='Custom Labeling')
sustainability_check = Transition(label='Sustainability Check')
inventory_sync = Transition(label='Inventory Sync')
market_analysis = Transition(label='Market Analysis')
order_aggregation = Transition(label='Order Aggregation')
distribution_plan = Transition(label='Distribution Plan')
customer_feedback = Transition(label='Customer Feedback')

# Define loop nodes
sourcing_loop = OperatorPOWL(operator=Operator.LOOP, children=[sourcing, vetting])
vetting_loop = OperatorPOWL(operator=Operator.LOOP, children=[vetting, design_review])
design_loop = OperatorPOWL(operator=Operator.LOOP, children=[design_review, prototype_build])
prototype_loop = OperatorPOWL(operator=Operator.LOOP, children=[prototype_build, quality_audit])
quality_loop = OperatorPOWL(operator=Operator.LOOP, children=[quality_audit, batch_scheduling])
batch_loop = OperatorPOWL(operator=Operator.LOOP, children=[batch_scheduling, handcrafting])
handcrafting_loop = OperatorPOWL(operator=Operator.LOOP, children=[handcrafting, packaging_design])
packaging_loop = OperatorPOWL(operator=Operator.LOOP, children=[packaging_design, custom_labeling])
custom_loop = OperatorPOWL(operator=Operator.LOOP, children=[custom_labeling, sustainability_check])
sustainability_loop = OperatorPOWL(operator=Operator.LOOP, children=[sustainability_check, inventory_sync])
inventory_loop = OperatorPOWL(operator=Operator.LOOP, children=[inventory_sync, market_analysis])
market_loop = OperatorPOWL(operator=Operator.LOOP, children=[market_analysis, order_aggregation])
order_loop = OperatorPOWL(operator=Operator.LOOP, children=[order_aggregation, distribution_plan])
distribution_loop = OperatorPOWL(operator=Operator.LOOP, children=[distribution_plan, customer_feedback])

# Define partial order
root = StrictPartialOrder(nodes=[sourcing_loop, vetting_loop, design_loop, prototype_loop, quality_loop, batch_loop, handcrafting_loop, packaging_loop, custom_loop, sustainability_loop, inventory_loop, market_loop, order_loop, distribution_loop])
root.order.add_edge(sourcing_loop, vetting_loop)
root.order.add_edge(vetting_loop, design_review)
root.order.add_edge(design_loop, prototype_build)
root.order.add_edge(prototype_loop, quality_audit)
root.order.add_edge(quality_loop, batch_scheduling)
root.order.add_edge(batch_loop, handcrafting)
root.order.add_edge(handcrafting_loop, packaging_design)
root.order.add_edge(packaging_loop, custom_labeling)
root.order.add_edge(custom_loop, sustainability_check)
root.order.add_edge(sustainability_loop, inventory_sync)
root.order.add_edge(inventory_loop, market_analysis)
root.order.add_edge(market_loop, order_aggregation)
root.order.add_edge(order_loop, distribution_plan)
root.order.add_edge(distribution_loop, customer_feedback)