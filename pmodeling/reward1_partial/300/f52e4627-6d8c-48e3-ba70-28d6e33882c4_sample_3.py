import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

farm_visit = Transition(label='Farm Visit')
quality_cupping = Transition(label='Quality Cupping')
sustainability_audit = Transition(label='Sustainability Audit')
contract_draft = Transition(label='Contract Draft')
price_negotiate = Transition(label='Price Negotiate')
sample_testing = Transition(label='Sample Testing')
shipment_plan = Transition(label='Shipment Plan')
customs_clear = Transition(label='Customs Clear')
inventory_update = Transition(label='Inventory Update')
supplier_review = Transition(label='Supplier Review')
risk_assess = Transition(label='Risk Assess')
forecast_adjust = Transition(label='Forecast Adjust')
payment_process = Transition(label='Payment Process')
relationship_call = Transition(label='Relationship Call')
traceability_log = Transition(label='Traceability Log')
market_research = Transition(label='Market Research')
compliance_check = Transition(label='Compliance Check')

xor1 = OperatorPOWL(operator=Operator.XOR, children=[sustainability_audit, sample_testing])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[inventory_update, supplier_review])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[risk_assess, forecast_adjust])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[payment_process, relationship_call])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[traceability_log, market_research])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, contract_draft])

root = StrictPartialOrder(nodes=[farm_visit, quality_cupping, xor1, xor2, xor3, xor4, xor5, xor6])
root.order.add_edge(farm_visit, quality_cupping)
root.order.add_edge(quality_cupping, xor1)
root.order.add_edge(quality_cupping, xor2)
root.order.add_edge(quality_cupping, xor3)
root.order.add_edge(quality_cupping, xor4)
root.order.add_edge(quality_cupping, xor5)
root.order.add_edge(quality_cupping, xor6)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor1, xor4)
root.order.add_edge(xor1, xor5)
root.order.add_edge(xor1, xor6)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor2, xor6)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor3, xor6)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor4, xor6)
root.order.add_edge(xor5, xor6)

print(root)