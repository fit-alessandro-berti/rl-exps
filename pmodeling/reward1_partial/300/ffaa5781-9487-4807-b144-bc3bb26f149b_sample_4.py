import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

provenance_check = Transition(label='Provenance Check')
radiocarbon_test = Transition(label='Radiocarbon Test')
material_analysis = Transition(label='Material Analysis')
microscopic_scan = Transition(label='Microscopic Scan')
expert_review = Transition(label='Expert Review')
context_validation = Transition(label='Context Validation')
legal_audit = Transition(label='Legal Audit')
export_verify = Transition(label='Export Verify')
digital_imaging = Transition(label='Digital Imaging')
three_d_modeling = Transition(label='3D Modeling')
consensus_meeting = Transition(label='Consensus Meeting')
final_approval = Transition(label='Final Approval')
catalog_entry = Transition(label='Catalog Entry')
virtual_setup = Transition(label='Virtual Setup')
archival_backup = Transition(label='Archival Backup')

skip = SilentTransition()

provenance_loop = OperatorPOWL(operator=Operator.LOOP, children=[provenance_check])
radiocarbon_loop = OperatorPOWL(operator=Operator.LOOP, children=[radiocarbon_test])
material_loop = OperatorPOWL(operator=Operator.LOOP, children=[material_analysis])
microscopic_loop = OperatorPOWL(operator=Operator.LOOP, children=[microscopic_scan])
expert_loop = OperatorPOWL(operator=Operator.LOOP, children=[expert_review])
context_loop = OperatorPOWL(operator=Operator.LOOP, children=[context_validation])
legal_loop = OperatorPOWL(operator=Operator.LOOP, children=[legal_audit])
export_loop = OperatorPOWL(operator=Operator.LOOP, children=[export_verify])
digital_loop = OperatorPOWL(operator=Operator.LOOP, children=[digital_imaging])
three_d_loop = OperatorPOWL(operator=Operator.LOOP, children=[three_d_modeling])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[legal_loop, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[export_loop, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[context_loop, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[expert_loop, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[microscopic_loop, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[material_loop, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[radiocarbon_loop, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[provenance_loop, skip])

root = StrictPartialOrder(nodes=[
    provenance_loop, radiocarbon_loop, material_loop, microscopic_loop, expert_loop, context_loop, legal_loop, export_loop, digital_loop, three_d_loop, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, consensus_meeting, final_approval, catalog_entry, virtual_setup, archival_backup
])
root.order.add_edge(provenance_loop, radiocarbon_loop)
root.order.add_edge(radiocarbon_loop, material_loop)
root.order.add_edge(material_loop, microscopic_loop)
root.order.add_edge(microscopic_loop, expert_loop)
root.order.add_edge(expert_loop, context_loop)
root.order.add_edge(context_loop, legal_loop)
root.order.add_edge(legal_loop, export_loop)
root.order.add_edge(export_loop, digital_loop)
root.order.add_edge(digital_loop, three_d_loop)
root.order.add_edge(three_d_loop, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, consensus_meeting)
root.order.add_edge(consensus_meeting, final_approval)
root.order.add_edge(final_approval, catalog_entry)
root.order.add_edge(catalog_entry, virtual_setup)
root.order.add_edge(virtual_setup, archival_backup)