import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

milk_selection = Transition(label='Milk Selection')
quality_testing = Transition(label='Quality Testing')
milk_pasteurize = Transition(label='Milk Pasteurize')
cheese_crafting = Transition(label='Cheese Crafting')
controlled_aging = Transition(label='Controlled Aging')
sensory_review = Transition(label='Sensory Review')
custom_packaging = Transition(label='Custom Packaging')
label_printing = Transition(label='Label Printing')
export_licensing = Transition(label='Export Licensing')
documentation_prep = Transition(label='Documentation Prep')
customs_clearance = Transition(label='Customs Clearance')
cold_shipping = Transition(label='Cold Shipping')
delivery_tracking = Transition(label='Delivery Tracking')
feedback_review = Transition(label='Feedback Review')
market_analysis = Transition(label='Market Analysis')

xor1 = OperatorPOWL(operator=Operator.XOR, children=[milk_pasteurize, milk_selection])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[quality_testing, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[cheese_crafting, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[controlled_aging, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[sensory_review, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[custom_packaging, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[label_printing, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[export_licensing, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[documentation_prep, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[customs_clearance, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[cold_shipping, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[delivery_tracking, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[feedback_review, xor12])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[market_analysis, xor13])

root = StrictPartialOrder(nodes=[xor14])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)