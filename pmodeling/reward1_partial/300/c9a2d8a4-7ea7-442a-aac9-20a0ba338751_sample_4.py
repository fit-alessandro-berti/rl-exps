from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

initiate_audit = Transition(label='Initiate Audit')
gather_documents = Transition(label='Gather Documents')
verify_suppliers = Transition(label='Verify Suppliers')
screen_transactions = Transition(label='Screen Transactions')
classify_products = Transition(label='Classify Products')
assess_risks = Transition(label='Assess Risks')
check_sanctions = Transition(label='Check Sanctions')
review_tariffs = Transition(label='Review Tariffs')
cross_verify_data = Transition(label='Cross-Verify Data')
conduct_interviews = Transition(label='Conduct Interviews')
analyze_reports = Transition(label='Analyze Reports')
identify_gaps = Transition(label='Identify Gaps')
recommend_actions = Transition(label='Recommend Actions')
implement_changes = Transition(label='Implement Changes')
monitor_compliance = Transition(label='Monitor Compliance')
finalize_report = Transition(label='Finalize Report')

choice1 = OperatorPOWL(operator=Operator.XOR, children=[verify_suppliers, screen_transactions])
choice2 = OperatorPOWL(operator=Operator.XOR, children=[classify_products, assess_risks])
choice3 = OperatorPOWL(operator=Operator.XOR, children=[check_sanctions, review_tariffs])
choice4 = OperatorPOWL(operator=Operator.XOR, children=[cross_verify_data, conduct_interviews])
choice5 = OperatorPOWL(operator=Operator.XOR, children=[analyze_reports, identify_gaps])
choice6 = OperatorPOWL(operator=Operator.XOR, children=[recommend_actions, implement_changes])
choice7 = OperatorPOWL(operator=Operator.XOR, children=[monitor_compliance, finalize_report])

root = StrictPartialOrder(nodes=[initiate_audit, gather_documents, choice1, choice2, choice3, choice4, choice5, choice6, choice7])
root.order.add_edge(initiate_audit, gather_documents)
root.order.add_edge(gather_documents, choice1)
root.order.add_edge(choice1, choice2)
root.order.add_edge(choice2, choice3)
root.order.add_edge(choice3, choice4)
root.order.add_edge(choice4, choice5)
root.order.add_edge(choice5, choice6)
root.order.add_edge(choice6, choice7)