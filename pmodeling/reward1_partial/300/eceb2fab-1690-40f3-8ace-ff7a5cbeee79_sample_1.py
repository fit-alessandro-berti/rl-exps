import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions
provenance_check = Transition(label='Provenance Check')
condition_scan = Transition(label='Condition Scan')
material_test = Transition(label='Material Test')
disassembly = Transition(label='Disassembly')
surface_clean = Transition(label='Surface Clean')
structural_repair = Transition(label='Structural Repair')
reconstruction = Transition(label='Reconstruction')
finish_match = Transition(label='Finish Match')
stabilize_parts = Transition(label='Stabilize Parts')
documentation = Transition(label='Documentation')
quality_audit = Transition(label='Quality Audit')
valuation = Transition(label='Valuation')
market_analysis = Transition(label='Market Analysis')
target_outreach = Transition(label='Target Outreach')
delivery_prep = Transition(label='Delivery Prep')
client_feedback = Transition(label='Client Feedback')

# Define operators
xor = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, condition_scan])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[material_test, xor])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[disassembly, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[surface_clean, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[structural_repair, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[reconstruction, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[finish_match, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[stabilize_parts, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[documentation, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[quality_audit, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[valuation, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[market_analysis, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[target_outreach, xor12])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[delivery_prep, xor13])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[client_feedback, xor14])

# Define root
root = StrictPartialOrder(nodes=[xor15])
root.order.add_edge(xor15, xor14)
root.order.add_edge(xor14, xor13)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor)
root.order.add_edge(xor, provenance_check)