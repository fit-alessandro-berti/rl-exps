import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL nodes
milk_sourcing = Transition(label='Milk Sourcing')
culture_blending = Transition(label='Culture Blending')
pasteurize = Transition(label='Milk Pasteurize')
curd_cutting = Transition(label='Curd Cutting')
whey_drain = Transition(label='Whey Drain')
mold_inoculate = Transition(label='Mold Inoculate')
press_cheese = Transition(label='Press Cheese')
salt_brine = Transition(label='Salt Brine')
age_monitor = Transition(label='Age Monitor')
quality_test = Transition(label='Quality Test')
packaging_prep = Transition(label='Packaging Prep')
label_design = Transition(label='Label Design')
order_allocation = Transition(label='Order Allocation')
transport_arrange = Transition(label='Transport Arrange')
retail_sync = Transition(label='Retail Sync')
customer_review = Transition(label='Customer Review')
feedback_analyze = Transition(label='Feedback Analyze')

# Define the POWL operators
xor = OperatorPOWL(operator=Operator.XOR, children=[culture_blending, milk_sourcing])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[pasteurize, xor])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[curd_cutting, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[whey_drain, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[mold_inoculate, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[press_cheese, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[salt_brine, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[age_monitor, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[quality_test, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[packaging_prep, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[label_design, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[order_allocation, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[transport_arrange, xor12])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[retail_sync, xor13])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[customer_review, xor14])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[feedback_analyze, xor15])

# Define the POWL root
root = StrictPartialOrder(nodes=[xor16])
root.order.add_edge(xor16, xor15)
root.order.add_edge(xor15, xor14)
root.order.add_edge(xor14, xor13)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor)
root.order.add_edge(xor, milk_sourcing)

print(root)