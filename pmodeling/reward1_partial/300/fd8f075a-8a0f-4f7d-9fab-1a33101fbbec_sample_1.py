import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
permit_filing = Transition(label='Permit Filing')
structure_prep = Transition(label='Structure Prep')
system_install = Transition(label='System Install')
nutrient_mix = Transition(label='Nutrient Mix')
sensor_setup = Transition(label='Sensor Setup')
ai_calibration = Transition(label='AI Calibration')
seed_sourcing = Transition(label='Seed Sourcing')
staff_training = Transition(label='Staff Training')
energy_connect = Transition(label='Energy Connect')
water_cycle = Transition(label='Water Cycle')
growth_monitor = Transition(label='Growth Monitor')
waste_audit = Transition(label='Waste Audit')
community_meet = Transition(label='Community Meet')
data_review = Transition(label='Data Review')
yield_forecast = Transition(label='Yield Forecast')

skip = SilentTransition()

site_survey_to_permit_filing = OperatorPOWL(operator=Operator.XOR, children=[site_survey, permit_filing])
permit_filing_to_structure_prep = OperatorPOWL(operator=Operator.XOR, children=[permit_filing, structure_prep])
structure_prep_to_system_install = OperatorPOWL(operator=Operator.XOR, children=[structure_prep, system_install])
system_install_to_nutrient_mix = OperatorPOWL(operator=Operator.XOR, children=[system_install, nutrient_mix])
nutrient_mix_to_sensor_setup = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, sensor_setup])
sensor_setup_to_ai_calibration = OperatorPOWL(operator=Operator.XOR, children=[sensor_setup, ai_calibration])
ai_calibration_to_seed_sourcing = OperatorPOWL(operator=Operator.XOR, children=[ai_calibration, seed_sourcing])
seed_sourcing_to_staff_training = OperatorPOWL(operator=Operator.XOR, children=[seed_sourcing, staff_training])
staff_training_to_energy_connect = OperatorPOWL(operator=Operator.XOR, children=[staff_training, energy_connect])
energy_connect_to_water_cycle = OperatorPOWL(operator=Operator.XOR, children=[energy_connect, water_cycle])
water_cycle_to_growth_monitor = OperatorPOWL(operator=Operator.XOR, children=[water_cycle, growth_monitor])
growth_monitor_to_waste_audit = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor, waste_audit])
waste_audit_to_community_meet = OperatorPOWL(operator=Operator.XOR, children=[waste_audit, community_meet])
community_meet_to_data_review = OperatorPOWL(operator=Operator.XOR, children=[community_meet, data_review])
data_review_to_yield_forecast = OperatorPOWL(operator=Operator.XOR, children=[data_review, yield_forecast])

root = StrictPartialOrder(nodes=[site_survey_to_permit_filing, permit_filing_to_structure_prep, structure_prep_to_system_install, system_install_to_nutrient_mix, nutrient_mix_to_sensor_setup, sensor_setup_to_ai_calibration, ai_calibration_to_seed_sourcing, seed_sourcing_to_staff_training, staff_training_to_energy_connect, energy_connect_to_water_cycle, water_cycle_to_growth_monitor, growth_monitor_to_waste_audit, waste_audit_to_community_meet, community_meet_to_data_review, data_review_to_yield_forecast])

root.order.add_edge(site_survey_to_permit_filing, permit_filing_to_structure_prep)
root.order.add_edge(permit_filing_to_structure_prep, structure_prep_to_system_install)
root.order.add_edge(structure_prep_to_system_install, system_install_to_nutrient_mix)
root.order.add_edge(system_install_to_nutrient_mix, nutrient_mix_to_sensor_setup)
root.order.add_edge(nutrient_mix_to_sensor_setup, sensor_setup_to_ai_calibration)
root.order.add_edge(sensor_setup_to_ai_calibration, ai_calibration_to_seed_sourcing)
root.order.add_edge(ai_calibration_to_seed_sourcing, seed_sourcing_to_staff_training)
root.order.add_edge(seed_sourcing_to_staff_training, staff_training_to_energy_connect)
root.order.add_edge(staff_training_to_energy_connect, energy_connect_to_water_cycle)
root.order.add_edge(energy_connect_to_water_cycle, water_cycle_to_growth_monitor)
root.order.add_edge(water_cycle_to_growth_monitor, growth_monitor_to_waste_audit)
root.order.add_edge(growth_monitor_to_waste_audit, waste_audit_to_community_meet)
root.order.add_edge(waste_audit_to_community_meet, community_meet_to_data_review)
root.order.add_edge(community_meet_to_data_review, data_review_to_yield_forecast)

print(root)