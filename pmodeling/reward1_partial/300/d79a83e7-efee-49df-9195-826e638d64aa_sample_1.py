import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
env_assessment = Transition(label='Env Assessment')
reg_compliance = Transition(label='Reg Compliance')
modular_setup = Transition(label='Modular Setup')
crop_selection = Transition(label='Crop Selection')
iot_integration = Transition(label='IoT Integration')
nutrient_flow = Transition(label='Nutrient Flow')
light_calibration = Transition(label='Light Calibration')
staff_training = Transition(label='Staff Training')
pest_control = Transition(label='Pest Control')
market_strategy = Transition(label='Market Strategy')
logistics_plan = Transition(label='Logistics Plan')
yield_analysis = Transition(label='Yield Analysis')
data_review = Transition(label='Data Review')
community_engage = Transition(label='Community Engage')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
xor_1 = OperatorPOWL(operator=Operator.XOR, children=[light_calibration, skip])
xor_2 = OperatorPOWL(operator=Operator.XOR, children=[staff_training, skip])
xor_3 = OperatorPOWL(operator=Operator.XOR, children=[iot_integration, skip])
xor_4 = OperatorPOWL(operator=Operator.XOR, children=[modular_setup, skip])
xor_5 = OperatorPOWL(operator=Operator.XOR, children=[market_strategy, skip])
xor_6 = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, skip])
xor_7 = OperatorPOWL(operator=Operator.XOR, children=[data_review, skip])
xor_8 = OperatorPOWL(operator=Operator.XOR, children=[community_engage, skip])
xor_9 = OperatorPOWL(operator=Operator.XOR, children=[yield_analysis, skip])
xor_10 = OperatorPOWL(operator=Operator.XOR, children=[env_assessment, skip])
xor_11 = OperatorPOWL(operator=Operator.XOR, children=[reg_compliance, skip])
xor_12 = OperatorPOWL(operator=Operator.XOR, children=[site_survey, skip])

root = StrictPartialOrder(nodes=[xor_12, xor_11, xor_10, xor_9, xor_8, xor_7, xor_6, xor_5, xor_4, xor_3, xor_2, xor, site_survey, env_assessment, reg_compliance, modular_setup, crop_selection, iot_integration, nutrient_flow, light_calibration, staff_training, pest_control, market_strategy, logistics_plan, yield_analysis, data_review, community_engage])
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_10)
root.order.add_edge(xor_10, xor_9)
root.order.add_edge(xor_9, xor_8)
root.order.add_edge(xor_8, xor_7)
root.order.add_edge(xor_7, xor_6)
root.order.add_edge(xor_6, xor_5)
root.order.add_edge(xor_5, xor_4)
root.order.add_edge(xor_4, xor_3)
root.order.add_edge(xor_3, xor_2)
root.order.add_edge(xor_2, xor)
root.order.add_edge(xor_12, xor_11)
root.order.add_edge(xor_11, xor_