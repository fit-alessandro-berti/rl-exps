import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
Milk_Sourcing = Transition(label='Milk Sourcing')
Culture_Preparation = Transition(label='Culture Prep')
Milk_Pasteurize = Transition(label='Milk Pasteurize')
Coagulation = Transition(label='Coagulation')
Curd_Cutting = Transition(label='Curd Cutting')
Whey_Draining = Transition(label='Whey Draining')
Hand_Molding = Transition(label='Hand Molding')
Pressing = Transition(label='Pressing')
Salting = Transition(label='Salting')
Rind_Treatment = Transition(label='Rind Treatment')
Aging_Setup = Transition(label='Aging Setup')
Microclimate_Control = Transition(label='Microclimate Control')
Flavor_Profiling = Transition(label='Flavor Profiling')
Quality_Check = Transition(label='Quality Check')
Sensory_Review = Transition(label='Sensory Review')
Texture_Inspect = Transition(label='Texture Inspect')
Eco_Packaging = Transition(label='Eco Packaging')
Batch_Labeling = Transition(label='Batch Labeling')
Blockchain_Log = Transition(label='Blockchain Log')
Niche_Shipping = Transition(label='Niche Shipping')

# Define the control flow
milk_sourcing = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Sourcing])
culture_prep = OperatorPOWL(operator=Operator.LOOP, children=[Culture_Preparation])
milk_pasteurize = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Pasteurize])
coagulation = OperatorPOWL(operator=Operator.LOOP, children=[Coagulation])
curd_cutting = OperatorPOWL(operator=Operator.LOOP, children=[Curd_Cutting])
whey_draining = OperatorPOWL(operator=Operator.LOOP, children=[Whey_Draining])
hand_molding = OperatorPOWL(operator=Operator.LOOP, children=[Hand_Molding])
pressing = OperatorPOWL(operator=Operator.LOOP, children=[Pressing])
salting = OperatorPOWL(operator=Operator.LOOP, children=[Salting])
rind_treatment = OperatorPOWL(operator=Operator.LOOP, children=[Rind_Treatment])
aging_setup = OperatorPOWL(operator=Operator.LOOP, children=[Aging_Setup])
microclimate_control = OperatorPOWL(operator=Operator.LOOP, children=[Microclimate_Control])
flavor_profiling = OperatorPOWL(operator=Operator.LOOP, children=[Flavor_Profiling])
quality_check = OperatorPOWL(operator=Operator.LOOP, children=[Quality_Check])
sensory_review = OperatorPOWL(operator=Operator.LOOP, children=[Sensory_Review])
texture_inspect = OperatorPOWL(operator=Operator.LOOP, children=[Texture_Inspect])
eco_packaging = OperatorPOWL(operator=Operator.LOOP, children=[Eco_Packaging])
batch_labeling = OperatorPOWL(operator=Operator.LOOP, children=[Batch_Labeling])
blockchain_log = OperatorPOWL(operator=Operator.LOOP, children=[Blockchain_Log])
niche_shipping = OperatorPOWL(operator=Operator.LOOP, children=[Niche_Shipping])

# Define the partial order
root = StrictPartialOrder(nodes=[milk_sourcing, culture_prep, milk_pasteurize, coagulation, curd_cutting, whey_draining, hand_molding, pressing, salting, rind_treatment, aging_setup, microclimate_control, flavor_profiling, quality_check, sensory_review, texture_inspect, eco_packaging, batch_labeling, blockchain_log, niche_shipping])
root.order.add_edge(milk_sourcing, culture_prep)
root.order.add_edge(culture_prep, milk_pasteurize)
root.order.add_edge(milk_pasteurize, coagulation)
root.order.add_edge(coagulation, curd_cutting)
root.order.add_edge(curd_cutting, whey_draining)
root.order.add_edge(whey_draining, hand_molding)
root.order.add_edge(hand_molding, pressing)
root.order.add_edge(pressing, salting)
root.order.add_edge(salting, rind_treatment)
root.order.add_edge(rind_treatment, aging_setup)
root.order.add_edge(aging_setup, microclimate_control)
root.order.add_edge(microclimate_control, flavor_profiling)
root.order.add_edge(flavor_profiling, quality_check)
root.order.add_edge(quality_check, sensory_review)
root.order.add_edge(sensory_review, texture_inspect)
root.order.add_edge(texture_inspect, eco_packaging)
root.order.add_edge(eco_packaging, batch_labeling)
root.order.add_edge(batch_labeling, blockchain_log)
root.order.add_edge(blockchain_log, niche_shipping)

print(root)