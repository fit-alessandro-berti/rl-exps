from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# Define activities
visual_inspect = Transition(label='Visual Inspect')
document_gather = Transition(label='Document Gather')
material_test = Transition(label='Material Test')
pigment_analyze = Transition(label='Pigment Analyze')
style_compare = Transition(label='Style Compare')
provenance_trace = Transition(label='Provenance Trace')
data_crosscheck = Transition(label='Data Crosscheck')
infrared_scan = Transition(label='Infrared Scan')
xray_fluoresce = Transition(label='Xray Fluoresce')
expert_consult = Transition(label='Expert Consult')
forgery_detect = Transition(label='Forgery Detect')
report_draft = Transition(label='Report Draft')
stakeholder_review = Transition(label='Stakeholder Review')
final_approval = Transition(label='Final Approval')
archive_store = Transition(label='Archive Store')

# Define operators
xor = OperatorPOWL(operator=Operator.XOR, children=[provenance_trace, expert_consult])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[data_crosscheck, infrared_scan])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[xray_fluoresce, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[style_compare, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[material_test, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[pigment_analyze, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[visual_inspect, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[document_gather, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[forgery_detect, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[report_draft, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_review, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[final_approval, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[archive_store, xor12])

# Define root
root = StrictPartialOrder(nodes=[xor13])
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor)
root.order.add_edge(xor, xor13)

print(root)