from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

concept_ideation = Transition(label='Concept Ideation')
sponsor_alignment = Transition(label='Sponsor Alignment')
participant_signup = Transition(label='Participant SignUp')
team_formation = Transition(label='Team Formation')
workshop_setup = Transition(label='Workshop Setup')
workshop_delivery = Transition(label='Workshop Delivery')
progress_monitor = Transition(label='Progress Monitor')
live_support = Transition(label='Live Support')
feedback_loop = Transition(label='Feedback Loop')
submission_check = Transition(label='Submission Check')
plagiarism_scan = Transition(label='Plagiarism Scan')
jury_evaluation = Transition(label='Jury Evaluation')
result_compilation = Transition(label='Result Compilation')
winner_announcement = Transition(label='Winner Announcement')
post_analytics = Transition(label='Post Analytics')

concept_ideation_to_sponsor_alignment = OperatorPOWL(operator=Operator.XOR, children=[concept_ideation, sponsor_alignment])
sponsor_alignment_to_participant_signup = OperatorPOWL(operator=Operator.XOR, children=[sponsor_alignment, participant_signup])
participant_signup_to_team_formation = OperatorPOWL(operator=Operator.XOR, children=[participant_signup, team_formation])
team_formation_to_workshop_setup = OperatorPOWL(operator=Operator.XOR, children=[team_formation, workshop_setup])
workshop_setup_to_workshop_delivery = OperatorPOWL(operator=Operator.XOR, children=[workshop_setup, workshop_delivery])
workshop_delivery_to_progress_monitor = OperatorPOWL(operator=Operator.XOR, children=[workshop_delivery, progress_monitor])
progress_monitor_to_live_support = OperatorPOWL(operator=Operator.XOR, children=[progress_monitor, live_support])
live_support_to_feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[live_support, feedback_loop])
feedback_loop_to_submission_check = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, submission_check])
submission_check_to_plagiarism_scan = OperatorPOWL(operator=Operator.XOR, children=[submission_check, plagiarism_scan])
plagiarism_scan_to_jury_evaluation = OperatorPOWL(operator=Operator.XOR, children=[plagiarism_scan, jury_evaluation])
jury_evaluation_to_result_compilation = OperatorPOWL(operator=Operator.XOR, children=[jury_evaluation, result_compilation])
result_compilation_to_winner_announcement = OperatorPOWL(operator=Operator.XOR, children=[result_compilation, winner_announcement])
winner_announcement_to_post_analytics = OperatorPOWL(operator=Operator.XOR, children=[winner_announcement, post_analytics])

root = StrictPartialOrder(nodes=[concept_ideation_to_sponsor_alignment, sponsor_alignment_to_participant_signup, participant_signup_to_team_formation, team_formation_to_workshop_setup, workshop_setup_to_workshop_delivery, workshop_delivery_to_progress_monitor, progress_monitor_to_live_support, live_support_to_feedback_loop, feedback_loop_to_submission_check, submission_check_to_plagiarism_scan, plagiarism_scan_to_jury_evaluation, jury_evaluation_to_result_compilation, result_compilation_to_winner_announcement, winner_announcement_to_post_analytics])
root.order.add_edge(concept_ideation_to_sponsor_alignment, sponsor_alignment_to_participant_signup)
root.order.add_edge(sponsor_alignment_to_participant_signup, participant_signup_to_team_formation)
root.order.add_edge(participant_signup_to_team_formation, team_formation_to_workshop_setup)
root.order.add_edge(team_formation_to_workshop_setup, workshop_setup_to_workshop_delivery)
root.order.add_edge(workshop_setup_to_workshop_delivery, workshop_delivery_to_progress_monitor)
root.order.add_edge(workshop_delivery_to_progress_monitor, progress_monitor_to_live_support)
root.order.add_edge(progress_monitor_to_live_support, live_support_to_feedback_loop)
root.order.add_edge(live_support_to_feedback_loop, feedback_loop_to_submission_check)
root.order.add_edge(feedback_loop_to_submission_check, submission_check_to_plagiarism_scan)
root.order.add_edge(submission_check_to_plagiarism_scan, plagiarism_scan_to_jury_evaluation)
root.order.add_edge(plagiarism_scan_to_jury_evaluation, jury_evaluation_to_result_compilation)
root.order.add_edge(jury_evaluation_to_result_compilation, result_compilation_to_winner_announcement)
root.order.add_edge(result_compilation_to_winner_announcement, winner_announcement_to_post_analytics)

print(root)