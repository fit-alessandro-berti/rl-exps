import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

concept_ideation = Transition(label='Concept Ideation')
sponsor_alignment = Transition(label='Sponsor Alignment')
participant_sign_up = Transition(label='Participant SignUp')
team_formation = Transition(label='Team Formation')
workshop_setup = Transition(label='Workshop Setup')
workshop_delivery = Transition(label='Workshop Delivery')
progress_monitor = Transition(label='Progress Monitor')
live_support = Transition(label='Live Support')
feedback_loop = Transition(label='Feedback Loop')
submission_check = Transition(label='Submission Check')
plagiarism_scan = Transition(label='Plagiarism Scan')
jury_evaluation = Transition(label='Jury Evaluation')
result_compilation = Transition(label='Result Compilation')
winner_announcement = Transition(label='Winner Announcement')
post_analytics = Transition(label='Post Analytics')

skip = SilentTransition()

xor1 = OperatorPOWL(operator=Operator.XOR, children=[sponsor_alignment, participant_sign_up])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[team_formation, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[workshop_setup, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[workshop_delivery, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[progress_monitor, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[live_support, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[submission_check, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[plagiarism_scan, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[jury_evaluation, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[result_compilation, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[winner_announcement, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[xor1, xor2])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor3, xor4])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[xor5, xor6])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[xor7, xor8])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor9, xor10])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[xor11, xor12])

root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5, loop6])
root.order.add_edge(loop1, xor2)
root.order.add_edge(loop2, xor3)
root.order.add_edge(loop3, xor4)
root.order.add_edge(loop4, xor5)
root.order.add_edge(loop5, xor6)
root.order.add_edge(loop6, xor7)
root.order.add_edge(xor2, xor8)
root.order.add_edge(xor3, xor9)
root.order.add_edge(xor4, xor10)
root.order.add_edge(xor5, xor11)
root.order.add_edge(xor6, xor12)
root.order.add_edge(xor8, xor11)
root.order.add_edge(xor9, xor12)