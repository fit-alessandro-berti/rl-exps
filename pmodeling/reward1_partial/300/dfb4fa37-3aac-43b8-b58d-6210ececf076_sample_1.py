import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_analysis = Transition(label='Site Analysis')
permit_securing = Transition(label='Permit Securing')
unit_designing = Transition(label='Unit Designing')
led_sourcing = Transition(label='LED Sourcing')
hydroponic_setup = Transition(label='Hydroponic Setup')
staff_hiring = Transition(label='Staff Hiring')
pilot_cultivation = Transition(label='Pilot Cultivation')
data_integration = Transition(label='Data Integration')
waste_recycling = Transition(label='Waste Recycling')
local_distribution = Transition(label='Local Distribution')
subscription_setup = Transition(label='Subscription Setup')
iot_deployment = Transition(label='IoT Deployment')
sustainability_audit = Transition(label='Sustainability Audit')
market_testing = Transition(label='Market Testing')
process_refinement = Transition(label='Process Refinement')

skip = SilentTransition()

# Step-by-step process
site_analysis_next = OperatorPOWL(operator=Operator.XOR, children=[permit_securing, skip])
permit_securing_next = OperatorPOWL(operator=Operator.XOR, children=[unit_designing, skip])
unit_designing_next = OperatorPOWL(operator=Operator.XOR, children=[led_sourcing, skip])
led_sourcing_next = OperatorPOWL(operator=Operator.XOR, children=[hydroponic_setup, skip])
hydroponic_setup_next = OperatorPOWL(operator=Operator.XOR, children=[staff_hiring, skip])
staff_hiring_next = OperatorPOWL(operator=Operator.XOR, children=[pilot_cultivation, skip])
pilot_cultivation_next = OperatorPOWL(operator=Operator.XOR, children=[data_integration, skip])
data_integration_next = OperatorPOWL(operator=Operator.XOR, children=[waste_recycling, skip])
waste_recycling_next = OperatorPOWL(operator=Operator.XOR, children=[local_distribution, skip])
local_distribution_next = OperatorPOWL(operator=Operator.XOR, children=[subscription_setup, skip])
subscription_setup_next = OperatorPOWL(operator=Operator.XOR, children=[iot_deployment, skip])
iot_deployment_next = OperatorPOWL(operator=Operator.XOR, children=[sustainability_audit, skip])
sustainability_audit_next = OperatorPOWL(operator=Operator.XOR, children=[market_testing, skip])
market_testing_next = OperatorPOWL(operator=Operator.XOR, children=[process_refinement, skip])

root = StrictPartialOrder(nodes=[site_analysis, permit_securing, unit_designing, led_sourcing, hydroponic_setup, staff_hiring, pilot_cultivation, data_integration, waste_recycling, local_distribution, subscription_setup, iot_deployment, sustainability_audit, market_testing, process_refinement])
root.order.add_edge(site_analysis, permit_securing_next)
root.order.add_edge(permit_securing, unit_designing_next)
root.order.add_edge(unit_designing, led_sourcing_next)
root.order.add_edge(led_sourcing, hydroponic_setup_next)
root.order.add_edge(hydroponic_setup, staff_hiring_next)
root.order.add_edge(staff_hiring, pilot_cultivation_next)
root.order.add_edge(pilot_cultivation, data_integration_next)
root.order.add_edge(data_integration, waste_recycling_next)
root.order.add_edge(waste_recycling, local_distribution_next)
root.order.add_edge(local_distribution, subscription_setup_next)
root.order.add_edge(subscription_setup, iot_deployment_next)
root.order.add_edge(iot_deployment, sustainability_audit_next)
root.order.add_edge(sustainability_audit, market_testing_next)
root.order.add_edge(market_testing, process_refinement_next)