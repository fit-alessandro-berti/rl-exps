from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

quantum_init = Transition(label='Quantum Init')
data_ingest = Transition(label='Data Ingest')
ai_forecast = Transition(label='AI Forecast')
inventory_sync = Transition(label='Inventory Sync')
procurement_plan = Transition(label='Procurement Plan')
production_align = Transition(label='Production Align')
distribution_map = Transition(label='Distribution Map')
iot_monitor = Transition(label='IoT Monitor')
risk_assess = Transition(label='Risk Assess')
maintenance_alert = Transition(label='Maintenance Alert')
quantum_compute = Transition(label='Quantum Compute')
feedback_loop = Transition(label='Feedback Loop')
schedule_adjust = Transition(label='Schedule Adjust')
demand_update = Transition(label='Demand Update')
delivery_track = Transition(label='Delivery Track')
compliance_check = Transition(label='Compliance Check')

xor1 = OperatorPOWL(operator=Operator.XOR, children=[inventory_sync, procurement_plan])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[production_align, distribution_map])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[iot_monitor, risk_assess])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[maintenance_alert, quantum_compute])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, schedule_adjust])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[demand_update, delivery_track])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, quantum_compute])

root = StrictPartialOrder(nodes=[quantum_init, data_ingest, ai_forecast, xor1, xor2, xor3, xor4, xor5, xor6, xor7])
root.order.add_edge(quantum_init, data_ingest)
root.order.add_edge(data_ingest, ai_forecast)
root.order.add_edge(ai_forecast, xor1)
root.order.add_edge(ai_forecast, xor2)
root.order.add_edge(ai_forecast, xor3)
root.order.add_edge(ai_forecast, xor4)
root.order.add_edge(ai_forecast, xor5)
root.order.add_edge(ai_forecast, xor6)
root.order.add_edge(ai_forecast, xor7)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor1, xor4)
root.order.add_edge(xor1, xor5)
root.order.add_edge(xor1, xor6)
root.order.add_edge(xor1, xor7)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor2, xor6)
root.order.add_edge(xor2, xor7)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor3, xor6)
root.order.add_edge(xor3, xor7)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor4, xor6)
root.order.add_edge(xor4, xor7)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor5, xor7)
root.order.add_edge(xor6, xor7)