import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

ingredient_sourcing = Transition(label='Ingredient Sourcing')
sample_testing = Transition(label='Sample Testing')
oil_extraction = Transition(label='Oil Extraction')
blend_formulation = Transition(label='Blend Formulation')
quality_control = Transition(label='Quality Control')
aging_process = Transition(label='Aging Process')
allergen_check = Transition(label='Allergen Check')
market_research = Transition(label='Market Research')
bottle_design = Transition(label='Bottle Design')
label_approval = Transition(label='Label Approval')
packaging_setup = Transition(label='Packaging Setup')
batch_mixing = Transition(label='Batch Mixing')
scent_profiling = Transition(label='Scent Profiling')
client_feedback = Transition(label='Client Feedback')
release_scheduling = Transition(label='Release Scheduling')
regulatory_review = Transition(label='Regulatory Review')
sales_training = Transition(label='Sales Training')

skip = SilentTransition()

sample_testing_choice = OperatorPOWL(operator=Operator.XOR, children=[ingredient_sourcing, sample_testing])
oil_extraction_choice = OperatorPOWL(operator=Operator.XOR, children=[sample_testing, oil_extraction])
blend_formulation_choice = OperatorPOWL(operator=Operator.XOR, children=[oil_extraction, blend_formulation])
quality_control_choice = OperatorPOWL(operator=Operator.XOR, children=[blend_formulation, quality_control])
aging_process_choice = OperatorPOWL(operator=Operator.XOR, children=[quality_control, aging_process])
allergen_check_choice = OperatorPOWL(operator=Operator.XOR, children=[aging_process, allergen_check])
market_research_choice = OperatorPOWL(operator=Operator.XOR, children=[allergen_check, market_research])
bottle_design_choice = OperatorPOWL(operator=Operator.XOR, children=[market_research, bottle_design])
label_approval_choice = OperatorPOWL(operator=Operator.XOR, children=[bottle_design, label_approval])
packaging_setup_choice = OperatorPOWL(operator=Operator.XOR, children=[label_approval, packaging_setup])
batch_mixing_choice = OperatorPOWL(operator=Operator.XOR, children=[packaging_setup, batch_mixing])
scent_profiling_choice = OperatorPOWL(operator=Operator.XOR, children=[batch_mixing, scent_profiling])
client_feedback_choice = OperatorPOWL(operator=Operator.XOR, children=[scent_profiling, client_feedback])
release_scheduling_choice = OperatorPOWL(operator=Operator.XOR, children=[client_feedback, release_scheduling])
regulatory_review_choice = OperatorPOWL(operator=Operator.XOR, children=[release_scheduling, regulatory_review])
sales_training_choice = OperatorPOWL(operator=Operator.XOR, children=[regulatory_review, sales_training])

root = StrictPartialOrder(nodes=[sample_testing_choice, oil_extraction_choice, blend_formulation_choice, quality_control_choice, aging_process_choice, allergen_check_choice, market_research_choice, bottle_design_choice, label_approval_choice, packaging_setup_choice, batch_mixing_choice, scent_profiling_choice, client_feedback_choice, release_scheduling_choice, regulatory_review_choice, sales_training_choice])

root.order.add_edge(sample_testing_choice, oil_extraction_choice)
root.order.add_edge(oil_extraction_choice, blend_formulation_choice)
root.order.add_edge(blend_formulation_choice, quality_control_choice)
root.order.add_edge(quality_control_choice, aging_process_choice)
root.order.add_edge(aging_process_choice, allergen_check_choice)
root.order.add_edge(allergen_check_choice, market_research_choice)
root.order.add_edge(market_research_choice, bottle_design_choice)
root.order.add_edge(bottle_design_choice, label_approval_choice)
root.order.add_edge(label_approval_choice, packaging_setup_choice)
root.order.add_edge(packaging_setup_choice, batch_mixing_choice)
root.order.add_edge(batch_mixing_choice, scent_profiling_choice)
root.order.add_edge(scent_profiling_choice, client_feedback_choice)
root.order.add_edge(client_feedback_choice, release_scheduling_choice)
root.order.add_edge(release_scheduling_choice, regulatory_review_choice)
root.order.add_edge(regulatory_review_choice, sales_training_choice)

print(root)