from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

idea_solicitation = Transition(label='Idea Solicitation')
ai_filtering = Transition(label='AI Filtering')
community_voting = Transition(label='Community Voting')
expert_review = Transition(label='Expert Review')
prototype_build = Transition(label='Prototype Build')
user_testing = Transition(label='User Testing')
iterate_feedback = Transition(label='Iterate Feedback')
risk_assess = Transition(label='Risk Assess')
compliance_check = Transition(label='Compliance Check')
pilot_launch = Transition(label='Pilot Launch')
performance_track = Transition(label='Performance Track')
impact_analyze = Transition(label='Impact Analyze')
insight_gather = Transition(label='Insight Gather')
cycle_adjust = Transition(label='Cycle Adjust')
final_report = Transition(label='Final Report')

skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[idea_solicitation, ai_filtering])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[community_voting, skip])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[expert_review, prototype_build])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[user_testing, skip])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[iterate_feedback, risk_assess])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, skip])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[pilot_launch, performance_track])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[impact_analyze, skip])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[insight_gather, cycle_adjust])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[final_report, skip])

root = StrictPartialOrder(nodes=[loop1, xor1, loop2, xor2, loop3, xor3, loop4, xor4, loop5, xor5])
root.order.add_edge(loop1, xor1)
root.order.add_edge(xor1, loop2)
root.order.add_edge(loop2, xor2)
root.order.add_edge(xor2, loop3)
root.order.add_edge(loop3, xor3)
root.order.add_edge(xor3, loop4)
root.order.add_edge(loop4, xor4)
root.order.add_edge(xor4, loop5)
root.order.add_edge(loop5, xor5)

print(root)