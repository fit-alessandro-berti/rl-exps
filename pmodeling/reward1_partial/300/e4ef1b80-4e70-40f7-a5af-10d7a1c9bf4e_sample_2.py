import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

opportunity_scan = Transition(label='Opportunity Scan')
idea_workshop = Transition(label='Idea Workshop')
concept_merge = Transition(label='Concept Merge')
resource_align = Transition(label='Resource Align')
prototype_build = Transition(label='Prototype Build')
feasibility_test = Transition(label='Feasibility Test')
pilot_launch = Transition(label='Pilot Launch')
feedback_gather = Transition(label='Feedback Gather')
design_adapt = Transition(label='Design Adapt')
compliance_check = Transition(label='Compliance Check')
scaling_plan = Transition(label='Scaling Plan')
ip_management = Transition(label='IP Management')
market_sync = Transition(label='Market Sync')
partner_review = Transition(label='Partner Review')
exit_strategy = Transition(label='Exit Strategy')

xor_1 = OperatorPOWL(operator=Operator.XOR, children=[opportunity_scan, exit_strategy])
xor_2 = OperatorPOWL(operator=Operator.XOR, children=[idea_workshop, exit_strategy])
xor_3 = OperatorPOWL(operator=Operator.XOR, children=[concept_merge, exit_strategy])
xor_4 = OperatorPOWL(operator=Operator.XOR, children=[resource_align, exit_strategy])
xor_5 = OperatorPOWL(operator=Operator.XOR, children=[prototype_build, exit_strategy])
xor_6 = OperatorPOWL(operator=Operator.XOR, children=[feasibility_test, exit_strategy])
xor_7 = OperatorPOWL(operator=Operator.XOR, children=[pilot_launch, exit_strategy])
xor_8 = OperatorPOWL(operator=Operator.XOR, children=[feedback_gather, exit_strategy])
xor_9 = OperatorPOWL(operator=Operator.XOR, children=[design_adapt, exit_strategy])
xor_10 = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, exit_strategy])
xor_11 = OperatorPOWL(operator=Operator.XOR, children=[scaling_plan, exit_strategy])
xor_12 = OperatorPOWL(operator=Operator.XOR, children=[ip_management, exit_strategy])
xor_13 = OperatorPOWL(operator=Operator.XOR, children=[market_sync, exit_strategy])
xor_14 = OperatorPOWL(operator=Operator.XOR, children=[partner_review, exit_strategy])

root = StrictPartialOrder(nodes=[
    xor_1, xor_2, xor_3, xor_4, xor_5, xor_6, xor_7, xor_8, xor_9, xor_10, xor_11, xor_12, xor_13, xor_14])
root.order.add_edge(xor_1, xor_2)
root.order.add_edge(xor_1, xor_3)
root.order.add_edge(xor_1, xor_4)
root.order.add_edge(xor_1, xor_5)
root.order.add_edge(xor_1, xor_6)
root.order.add_edge(xor_1, xor_7)
root.order.add_edge(xor_1, xor_8)
root.order.add_edge(xor_1, xor_9)
root.order.add_edge(xor_1, xor_10)
root.order.add_edge(xor_1, xor_11)
root.order.add_edge(xor_1, xor_12)
root.order.add_edge(xor_1, xor_13)
root.order.add_edge(xor_1, xor_14)