import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Milk_Sourcing = Transition(label='Milk Sourcing')
Supplier_Audit = Transition(label='Supplier Audit')
Culture_Prep = Transition(label='Culture Prep')
Milk_Testing = Transition(label='Milk Testing')
Fermentation_Start = Transition(label='Fermentation Start')
pH_Monitoring = Transition(label='pH Monitoring')
Curd_Cutting = Transition(label='Curd Cutting')
Mold_Inoculation = Transition(label='Mold Inoculation')
Aging_Setup = Transition(label='Aging Setup')
Humidity_Control = Transition(label='Humidity Control')
Texture_Check = Transition(label='Texture Check')
Flavor_Profiling = Transition(label='Flavor Profiling')
Batch_Labeling = Transition(label='Batch Labeling')
Packaging = Transition(label='Packaging')
Distribution = Transition(label='Distribution')
Feedback_Review = Transition(label='Feedback Review')
Sustainability_Audit = Transition(label='Sustainability Audit')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[Supplier_Audit, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Culture_Prep, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Milk_Testing, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Fermentation_Start, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[pH_Monitoring, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Curd_Cutting, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Mold_Inoculation, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Aging_Setup, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Humidity_Control, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Texture_Check, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Flavor_Profiling, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Batch_Labeling, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Packaging, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[Distribution, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[Feedback_Review, skip])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[Sustainability_Audit, skip])
xor17 = OperatorPOWL(operator=Operator.XOR, children=[xor, xor2])
xor18 = OperatorPOWL(operator=Operator.XOR, children=[xor3, xor4])
xor19 = OperatorPOWL(operator=Operator.XOR, children=[xor5, xor6])
xor20 = OperatorPOWL(operator=Operator.XOR, children=[xor7, xor8])
xor21 = OperatorPOWL(operator=Operator.XOR, children=[xor9, xor10])
xor22 = OperatorPOWL(operator=Operator.XOR, children=[xor11, xor12])
xor23 = OperatorPOWL(operator=Operator.XOR, children=[xor13, xor14])
xor24 = OperatorPOWL(operator=Operator.XOR, children=[xor15, xor16])
xor25 = OperatorPOWL(operator=Operator.XOR, children=[xor17, xor18])
xor26 = OperatorPOWL(operator=Operator.XOR, children=[xor19, xor20])
xor27 = OperatorPOWL(operator=Operator.XOR, children=[xor21, xor22])
xor28 = OperatorPOWL(operator=Operator.XOR, children=[xor23, xor24])
xor29 = OperatorPOWL(operator=Operator.XOR, children=[xor25, xor26])
xor30 = OperatorPOWL(operator=Operator.XOR, children=[xor27, xor28])
xor31 = OperatorPOWL(operator=Operator.XOR, children=[xor29, xor30])
root = StrictPartialOrder(nodes=[xor31])
root.order.add_edge(xor31, xor27)
root.order.add_edge(xor27, xor26)
root.order.add_edge(xor26, xor25)
root.order.add_edge(xor25, xor24)
root.order.add_edge(xor24, xor23)
root.order.add_edge(xor23, xor22)
root.order.add_edge(xor22, xor21)
root.order.add_edge(xor21, xor20)
root.order.add_edge(xor20, xor19)
root.order.add_edge(xor19, xor18)
root.order.add_edge(xor18, xor17)
root.order.add_edge(xor17, xor16)
root.order.add_edge(xor16, xor15)
root.order.add_edge(xor15, xor14)
root.order.add_edge(xor14, xor13)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor1)
root.order.add_edge(xor1, xor)