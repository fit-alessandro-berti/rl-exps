import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Site_Assess = Transition(label='Site Assess')
Structure_Check = Transition(label='Structure Check')
Permit_Obtain = Transition(label='Permit Obtain')
Material_Source = Transition(label='Material Source')
Soil_Prepare = Transition(label='Soil Prepare')
Waterproof_Roof = Transition(label='Waterproof Roof')
Irrigation_Setup = Transition(label='Irrigation Setup')
Bed_Assemble = Transition(label='Bed Assemble')
Crop_Plan = Transition(label='Crop Plan')
Pest_Monitor = Transition(label='Pest Monitor')
Nutrient_Calibrate = Transition(label='Nutrient Calibrate')
Harvest_Schedule = Transition(label='Harvest Schedule')
Community_Train = Transition(label='Community Train')
Yield_Record = Transition(label='Yield Record')
Impact_Review = Transition(label='Impact Review')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Site_Assess, Structure_Check])
xor = OperatorPOWL(operator=Operator.XOR, children=[Permit_Obtain, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Material_Source, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Soil_Prepare, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Waterproof_Roof, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Irrigation_Setup, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Bed_Assemble, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Crop_Plan, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Pest_Monitor, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Nutrient_Calibrate, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Harvest_Schedule, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Community_Train, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[Yield_Record, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[Impact_Review, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, loop)