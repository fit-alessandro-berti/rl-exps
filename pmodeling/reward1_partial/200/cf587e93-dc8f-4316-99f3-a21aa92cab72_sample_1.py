import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

SeedSelect = Transition(label='Seed Select')
NutrientMix = Transition(label='Nutrient Mix')
SensorSetup = Transition(label='Sensor Setup')
EnvMonitor = Transition(label='Env Monitor')
GrowthScan = Transition(label='Growth Scan')
PestControl = Transition(label='Pest Control')
WaterCycle = Transition(label='Water Cycle')
HarvestRobo = Transition(label='Harvest Robo')
YieldAssess = Transition(label='Yield Assess')
WasteProcess = Transition(label='Waste Process')
EnergySync = Transition(label='Energy Sync')
PackBiodeg = Transition(label='Pack Biodeg')
MarketTrack = Transition(label='Market Track')
OrderAlign = Transition(label='Order Align')
LogisticsPlan = Transition(label='Logistics Plan')
FeedbackLoop = Transition(label='Feedback Loop')

seed_select = OperatorPOWL(operator=Operator.SILENT, children=[SeedSelect])
nutrient_mix = OperatorPOWL(operator=Operator.SILENT, children=[NutrientMix])
sensor_setup = OperatorPOWL(operator=Operator.SILENT, children=[SensorSetup])
env_monitor = OperatorPOWL(operator=Operator.SILENT, children=[EnvMonitor])
growth_scan = OperatorPOWL(operator=Operator.SILENT, children=[GrowthScan])
pest_control = OperatorPOWL(operator=Operator.SILENT, children=[PestControl])
water_cycle = OperatorPOWL(operator=Operator.SILENT, children=[WaterCycle])
harvest_robo = OperatorPOWL(operator=Operator.SILENT, children=[HarvestRobo])
yield_assess = OperatorPOWL(operator=Operator.SILENT, children=[YieldAssess])
waste_process = OperatorPOWL(operator=Operator.SILENT, children=[WasteProcess])
energy_sync = OperatorPOWL(operator=Operator.SILENT, children=[EnergySync])
pack_biodeg = OperatorPOWL(operator=Operator.SILENT, children=[PackBiodeg])
market_track = OperatorPOWL(operator=Operator.SILENT, children=[MarketTrack])
order_align = OperatorPOWL(operator=Operator.SILENT, children=[OrderAlign])
logistics_plan = OperatorPOWL(operator=Operator.SILENT, children=[LogisticsPlan])
feedback_loop = OperatorPOWL(operator=Operator.SILENT, children=[FeedbackLoop])

root = StrictPartialOrder(nodes=[seed_select, nutrient_mix, sensor_setup, env_monitor, growth_scan, pest_control, water_cycle, harvest_robo, yield_assess, waste_process, energy_sync, pack_biodeg, market_track, order_align, logistics_plan, feedback_loop])
root.order.add_edge(seed_select, nutrient_mix)
root.order.add_edge(nutrient_mix, sensor_setup)
root.order.add_edge(sensor_setup, env_monitor)
root.order.add_edge(env_monitor, growth_scan)
root.order.add_edge(growth_scan, pest_control)
root.order.add_edge(pest_control, water_cycle)
root.order.add_edge(water_cycle, harvest_robo)
root.order.add_edge(harvest_robo, yield_assess)
root.order.add_edge(yield_assess, waste_process)
root.order.add_edge(waste_process, energy_sync)
root.order.add_edge(energy_sync, pack_biodeg)
root.order.add_edge(pack_biodeg, market_track)
root.order.add_edge(market_track, order_align)
root.order.add_edge(order_align, logistics_plan)
root.order.add_edge(logistics_plan, feedback_loop)