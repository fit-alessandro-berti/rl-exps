from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

A = Transition(label='Quantum Modeling')
B = Transition(label='Data Encoding')
C = Transition(label='Route Simulation')
D = Transition(label='Demand Forecast')
E = Transition(label='Supplier Sync')
F = Transition(label='Entangle Nodes')
G = Transition(label='Risk Analysis')
H = Transition(label='Inventory Scan')
I = Transition(label='Latency Check')
J = Transition(label='Transport Plan')
K = Transition(label='Quantum Compute')
L = Transition(label='Scenario Test')
M = Transition(label='Resource Align')
N = Transition(label='Protocol Update')
O = Transition(label='Feedback Loop')
P = Transition(label='Cost Optimize')
Q = Transition(label='Impact Review')

skip = SilentTransition()

quantum_modeling = OperatorPOWL(operator=Operator.XOR, children=[A, B])
data_encoding = OperatorPOWL(operator=Operator.XOR, children=[C, D])
route_simulation = OperatorPOWL(operator=Operator.XOR, children=[E, F])
demand_forecast = OperatorPOWL(operator=Operator.XOR, children=[G, H])
supplier_sync = OperatorPOWL(operator=Operator.XOR, children=[I, J])
entangle_nodes = OperatorPOWL(operator=Operator.XOR, children=[K, L])
resource_align = OperatorPOWL(operator=Operator.XOR, children=[M, N])
protocol_update = OperatorPOWL(operator=Operator.XOR, children=[O, P])
feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[Q, skip])

root = StrictPartialOrder(nodes=[quantum_modeling, data_encoding, route_simulation, demand_forecast, supplier_sync, entangle_nodes, resource_align, protocol_update, feedback_loop])
root.order.add_edge(quantum_modeling, data_encoding)
root.order.add_edge(data_encoding, route_simulation)
root.order.add_edge(route_simulation, demand_forecast)
root.order.add_edge(demand_forecast, supplier_sync)
root.order.add_edge(supplier_sync, entangle_nodes)
root.order.add_edge(entangle_nodes, resource_align)
root.order.add_edge(resource_align, protocol_update)
root.order.add_edge(protocol_update, feedback_loop)