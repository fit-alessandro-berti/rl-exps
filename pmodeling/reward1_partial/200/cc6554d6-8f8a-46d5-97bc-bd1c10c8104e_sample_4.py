from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions
demand_forecast = Transition(label='Demand Forecast')
risk_assess = Transition(label='Risk Assess')
supplier_audit = Transition(label='Supplier Audit')
inventory_scan = Transition(label='Inventory Scan')
route_optimize = Transition(label='Route Optimize')
order_prioritize = Transition(label='Order Prioritize')
contract_review = Transition(label='Contract Review')
delay_monitor = Transition(label='Delay Monitor')
shipment_reroute = Transition(label='Shipment Reroute')
cost_analyze = Transition(label='Cost Analyze')
compliance_check = Transition(label='Compliance Check')
alternative_engage = Transition(label='Alternative Engage')
inventory_reallocate = Transition(label='Inventory Reallocate')
performance_track = Transition(label='Performance Track')
feedback_loop = Transition(label='Feedback Loop')
strategy_update = Transition(label='Strategy Update')

# Define the silent transitions
skip = SilentTransition()

# Define the process
xor = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor17 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor18 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor19 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor20 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor21 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor22 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor23 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor24 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor25 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor26 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor27 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor28 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor29 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor30 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor31 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor32 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor33 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor34 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor35 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor36 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor37 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor38 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor39 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor40 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor41 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor42 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor43 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor44 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor45 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor46 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor47 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor48 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor49 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor50 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor51 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor52 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor53 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor54 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor55 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor56 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor57 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor58 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor59 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor60 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor61 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor62 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor63 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor64 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor65 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor66 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor67 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor68 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor69 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor70 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor71 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor72 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor73 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor74 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor75 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor76 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor77 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor78 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor79 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor80 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor81 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor82 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor83 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor84 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor85 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor86 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor87 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor88 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor89 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor90 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor91 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor92 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor93 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor94 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor95 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor96 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor97 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor98 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor99 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])
xor100 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, skip])

# Define the partial order
root = StrictPartialOrder(nodes=[demand_forecast, risk_assess, supplier_audit, inventory_scan, route_optimize, order_prioritize, contract_review, delay_monitor, shipment_reroute, cost_analyze, compliance_check, alternative_engage, inventory_reallocate, performance_track, feedback_loop, strategy_update])
root.order.add_edge(demand_forecast, risk_assess)
root.order.add_edge(risk_assess, supplier_audit)
root.order.add_edge(supplier_audit, inventory_scan)
root.order.add_edge(inventory_scan, route_optimize)
root.order.add_edge(route_optimize, order_prioritize)
root.order.add_edge(order_prioritize, contract_review)
root.order.add_edge(contract_review, delay_monitor)
root.order.add_edge(delay_monitor, shipment_reroute)
root.order.add_edge(shipment_reroute, cost_analyze)
root.order.add_edge(cost_analyze, compliance_check)
root.order.add_edge(compliance_check, alternative_engage)
root.order.add_edge(alternative_engage, inventory_reallocate)
root.order.add_edge(inventory_reallocate, performance_track)
root.order.add_edge(performance_track, feedback_loop)
root.order.add_edge(feedback_loop, strategy_update)

# Add the xor nodes
root.order.add_edge(demand_forecast, xor)
root.order.add_edge(risk_assess, xor2)
root.order.add_edge(supplier_audit, xor3)
root.order.add_edge(inventory_scan, xor4)
root.order.add_edge(route_optimize, xor5)
root.order.add_edge(order_prioritize, xor6)
root.order.add_edge(contract_review, xor7)
root.order.add_edge(delay_monitor, xor8)
root.order.add_edge(shipment_reroute, xor9)
root.order.add_edge(cost_analyze, xor10)
root.order.add_edge(compliance_check, xor11)
root.order.add_edge(alternative_engage, xor12)
root.order.add_edge(inventory_reallocate, xor13)
root.order.add_edge(performance_track, xor14)
root.order.add_edge(feedback_loop, xor15)
root.order.add_edge(strategy_update, xor16)
root.order.add_edge(xor, xor17)
root.order.add_edge(xor2, xor18)
root.order.add_edge(xor3, xor19)
root.order.add_edge(xor4, xor20)
root.order.add_edge(xor5, xor21)
root.order.add_edge(xor6, xor22)
root.order.add_edge(xor7, xor23)
root.order.add_edge(xor8, xor24)
root.order.add_edge(xor9, xor25)
root.order.add_edge(xor10, xor26)
root.order.add_edge(xor11, xor27)
root.order.add_edge(xor12, xor28)
root.order.add_edge(xor13, xor29)
root.order.add_edge(xor14, xor30)
root.order.add_edge(xor15, xor31)
root.order.add_edge(xor16, xor32)
root.order.add_edge(xor17, xor33)
root.order.add_edge(xor18, xor34)
root.order.add_edge(xor19, xor35)
root.order.add_edge(xor20, xor36)
root.order.add_edge(xor21, xor37)
root.order.add_edge(xor22, xor38)
root.order.add_edge(xor23, xor39)
root.order.add_edge(xor24, xor40)
root.order.add_edge(xor25, xor41)
root.order.add_edge(xor26, xor42)
root.order.add_edge(xor27, xor43)
root.order.add_edge(xor28, xor44)
root.order.add_edge(xor29, xor45)
root.order.add_edge(xor30, xor46)
root.order.add_edge(xor31, xor47)
root.order.add_edge(xor32, xor48)
root.order.add_edge(xor33, xor49)
root.order.add_edge(xor34, xor50)
root.order.add_edge(xor35, xor51)
root.order.add_edge(xor36, xor52)
root.order.add_edge(xor37, xor53)
root.order.add_edge(xor38, xor54)
root.order.add_edge(xor39, xor55)
root.order.add_edge(xor40, xor56)
root.order.add_edge(xor41, xor57)
root.order.add_edge(xor42, xor58)
root.order.add_edge(xor43, xor59)
root.order.add_edge(xor44, xor60)
root.order.add_edge(xor45, xor61)
root.order.add_edge(xor46, xor62)
root.order.add_edge(xor47, xor63)
root.order.add_edge(xor48, xor64)
root.order.add_edge(xor49, xor65)
root.order.add_edge(xor50, xor66)
root.order.add_edge(xor51, xor67)
root.order.add_edge(xor52, xor68)
root.order.add_edge(xor53, xor69)
root.order.add_edge(xor54, xor70)
root.order.add_edge(xor55, xor71)
root.order.add_edge(xor56, xor72)
root.order.add_edge(xor57, xor73)
root.order.add_edge(xor58, xor74)
root.order.add_edge(xor59, xor75)
root.order.add_edge(xor60, xor76)
root.order.add_edge(xor61, xor77)
root.order.add_edge(xor62, xor78)
root.order.add_edge(xor63, xor79)
root.order.add_edge(xor64, xor80)
root.order.add_edge(xor65, xor81)
root.order.add_edge(xor66, xor82)
root.order.add_edge(xor67, xor83)
root.order.add_edge(xor68, xor84)
root.order.add_edge(xor69, xor85)
root.order.add_edge(xor70, xor86)
root.order.add_edge(xor71, xor87)
root.order.add_edge(xor72, xor88)
root.order.add_edge(xor73, xor89)
root.order.add_edge(xor74, xor90)
root.order.add_edge(xor75, xor91)
root.order.add_edge(xor76, xor92)
root.order.add_edge(xor77, xor93)
root.order.add_edge(xor78, xor94)
root.order.add_edge(xor79, xor95)
root.order.add_edge(xor80, xor96)
root.order.add_edge(xor81, xor97)
root.order.add_edge(xor82, xor98)
root.order.add_edge(xor83, xor99)
root.order.add_edge(xor84, xor100)
root.order.add_edge(xor17, xor8)
root.order.add_edge(xor18, xor9)
root.order.add_edge(xor19, xor10)
root.order.add_edge(xor20, xor11)
root.order.add_edge(xor21, xor12)
root.order.add_edge(xor22, xor13)
root.order.add_edge(xor23, xor14)
root.order.add_edge(xor24, xor15)
root.order.add_edge(xor25, xor16)
root.order.add_edge(xor26, xor17)
root.order.add_edge(xor27, xor18)
root.order.add_edge(xor28, xor19)
root.order.add_edge(xor29, xor20)
root.order.add_edge(xor30, xor21)
root.order.add_edge(xor31, xor22)
root.order.add_edge(xor32, xor23)
root.order.add_edge(xor33, xor24)
root.order.add_edge(xor34, xor25)
root.order.add_edge(xor35, xor26)
root.order.add_edge(xor36, xor27)
root.order.add_edge(xor37, xor28)
root.order.add_edge(xor38, xor29)
root.order.add_edge(xor39, xor30)
root.order.add_edge(xor40, xor31)
root.order.add_edge(xor41, xor32)
root.order.add_edge(xor42, xor33)
root.order.add_edge(xor43, xor34)
root.order.add_edge(xor44, xor35)