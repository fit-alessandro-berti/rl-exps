import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Milk_Sourcing = Transition(label='Milk Sourcing')
Quality_Testing = Transition(label='Quality Testing')
Starter_Culture = Transition(label='Starter Culture')
Coagulation = Transition(label='Coagulation')
Curd_Cutting = Transition(label='Curd Cutting')
Whey_Draining = Transition(label='Whey Draining')
Molding_Cheese = Transition(label='Molding Cheese')
Pressing_Block = Transition(label='Pressing Block')
Brining_Bath = Transition(label='Brining Bath')
Aging_Control = Transition(label='Aging Control')
Flavor_Profiling = Transition(label='Flavor Profiling')
Packaging_Design = Transition(label='Packaging Design')
Demand_Forecast = Transition(label='Demand Forecast')
Retail_Outreach = Transition(label='Retail Outreach')
Customer_Feedback = Transition(label='Customer Feedback')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Sourcing, Quality_Testing])
xor = OperatorPOWL(operator=Operator.XOR, children=[Starter_Culture, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Coagulation, Curd_Cutting])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Whey_Draining, Molding_Cheese])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Pressing_Block, Brining_Bath])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Aging_Control, Flavor_Profiling])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Packaging_Design, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Demand_Forecast, Retail_Outreach])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Customer_Feedback, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor)