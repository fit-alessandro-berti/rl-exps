import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

audit_artifacts = Transition(label='Audit Artifacts')
interview_staff = Transition(label='Interview Staff')
assess_risks = Transition(label='Assess Risks')
plan_retrieval = Transition(label='Plan Retrieval')
legal_review = Transition(label='Legal Review')
security_check = Transition(label='Security Check')
execute_recovery = Transition(label='Execute Recovery')
validate_items = Transition(label='Validate Items')
restore_function = Transition(label='Restore Function')
update_systems = Transition(label='Update Systems')
train_users = Transition(label='Train Users')
document_findings = Transition(label='Document Findings')
archive_records = Transition(label='Archive Records')
review_lessons = Transition(label='Review Lessons')
close_process = Transition(label='Close Process')

skip = SilentTransition()

audit_interview = OperatorPOWL(operator=Operator.XOR, children=[audit_artifacts, interview_staff])
risk_assessment = OperatorPOWL(operator=Operator.LOOP, children=[assess_risks, plan_retrieval])
legal_check = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
security_assessment = OperatorPOWL(operator=Operator.XOR, children=[security_check, skip])
recovery = OperatorPOWL(operator=Operator.XOR, children=[execute_recovery, skip])
validation = OperatorPOWL(operator=Operator.XOR, children=[validate_items, skip])
restore = OperatorPOWL(operator=Operator.XOR, children=[restore_function, skip])
update = OperatorPOWL(operator=Operator.XOR, children=[update_systems, skip])
train = OperatorPOWL(operator=Operator.XOR, children=[train_users, skip])
document = OperatorPOWL(operator=Operator.XOR, children=[document_findings, skip])
archive = OperatorPOWL(operator=Operator.XOR, children=[archive_records, skip])
lessons = OperatorPOWL(operator=Operator.XOR, children=[review_lessons, skip])
close = OperatorPOWL(operator=Operator.XOR, children=[close_process, skip])

root = StrictPartialOrder(nodes=[audit_interview, risk_assessment, legal_check, security_assessment, recovery, validation, restore, update, train, document, archive, lessons, close])
root.order.add_edge(audit_interview, risk_assessment)
root.order.add_edge(risk_assessment, legal_check)
root.order.add_edge(risk_assessment, security_assessment)
root.order.add_edge(legal_check, recovery)
root.order.add_edge(security_assessment, recovery)
root.order.add_edge(recovery, validation)
root.order.add_edge(validation, restore)
root.order.add_edge(restore, update)
root.order.add_edge(update, train)
root.order.add_edge(train, document)
root.order.add_edge(document, archive)
root.order.add_edge(archive, lessons)
root.order.add_edge(lessons, close)