from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

farm_select = Transition(label='Farm Select')
milk_test = Transition(label='Milk Test')
milk_pasteurize = Transition(label='Milk Pasteurize')
curd_form = Transition(label='Curd Form')
whey_drain = Transition(label='Whey Drain')
cheese_press = Transition(label='Cheese Press')
salt_rub = Transition(label='Salt Rub')
aging_set = Transition(label='Aging Set')
flavor_check = Transition(label='Flavor Check')
texture_scan = Transition(label='Texture Scan')
quality_approve = Transition(label='Quality Approve')
custom_pack = Transition(label='Custom Pack')
cold_ship = Transition(label='Cold Ship')
retail_train = Transition(label='Retail Train')
feedback_log = Transition(label='Feedback Log')
batch_adjust = Transition(label='Batch Adjust')

skip = SilentTransition()

farm_to_test = OperatorPOWL(operator=Operator.XOR, children=[farm_select, skip])
test_to_past = OperatorPOWL(operator=Operator.XOR, children=[milk_test, skip])
past_to_cur = OperatorPOWL(operator=Operator.XOR, children=[milk_pasteurize, skip])
cur_to_whey = OperatorPOWL(operator=Operator.XOR, children=[curd_form, skip])
whey_to_press = OperatorPOWL(operator=Operator.XOR, children=[whey_drain, skip])
press_to_salt = OperatorPOWL(operator=Operator.XOR, children=[cheese_press, skip])
salt_to_aging = OperatorPOWL(operator=Operator.XOR, children=[salt_rub, skip])
aging_to_flavor = OperatorPOWL(operator=Operator.XOR, children=[aging_set, skip])
flavor_to_texture = OperatorPOWL(operator=Operator.XOR, children=[flavor_check, skip])
texture_to_approve = OperatorPOWL(operator=Operator.XOR, children=[texture_scan, skip])
approve_to_pack = OperatorPOWL(operator=Operator.XOR, children=[quality_approve, skip])
pack_to_ship = OperatorPOWL(operator=Operator.XOR, children=[custom_pack, skip])
ship_to_train = OperatorPOWL(operator=Operator.XOR, children=[cold_ship, skip])
train_to_log = OperatorPOWL(operator=Operator.XOR, children=[retail_train, skip])
log_to_adjust = OperatorPOWL(operator=Operator.XOR, children=[feedback_log, skip])
adjust_to_select = OperatorPOWL(operator=Operator.XOR, children=[batch_adjust, skip])

root = StrictPartialOrder(nodes=[farm_to_test, test_to_past, past_to_cur, cur_to_whey, whey_to_press, press_to_salt, salt_to_aging, aging_to_flavor, flavor_to_texture, texture_to_approve, approve_to_pack, pack_to_ship, ship_to_train, train_to_log, log_to_adjust, adjust_to_select])
root.order.add_edge(farm_to_test, test_to_past)
root.order.add_edge(test_to_past, past_to_cur)
root.order.add_edge(past_to_cur, cur_to_whey)
root.order.add_edge(cur_to_whey, whey_to_press)
root.order.add_edge(whey_to_press, press_to_salt)
root.order.add_edge(press_to_salt, salt_to_aging)
root.order.add_edge(salt_to_aging, aging_to_flavor)
root.order.add_edge(aging_to_flavor, flavor_to_texture)
root.order.add_edge(flavor_to_texture, texture_to_approve)
root.order.add_edge(texture_to_approve, approve_to_pack)
root.order.add_edge(approve_to_pack, pack_to_ship)
root.order.add_edge(pack_to_ship, ship_to_train)
root.order.add_edge(ship_to_train, train_to_log)
root.order.add_edge(train_to_log, log_to_adjust)
root.order.add_edge(log_to_adjust, adjust_to_select)