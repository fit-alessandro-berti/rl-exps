import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
assess_artifact = Transition(label='Assess Artifact')
verify_provenance = Transition(label='Verify Provenance')
analyze_condition = Transition(label='Analyze Condition')
plan_conservation = Transition(label='Plan Conservation')
clean_surface = Transition(label='Clean Surface')
stabilize_structure = Transition(label='Stabilize Structure')
source_materials = Transition(label='Source Materials')
fabricate_parts = Transition(label='Fabricate Parts')
perform_repairs = Transition(label='Perform Repairs')
apply_patina = Transition(label='Apply Patina')
match_colors = Transition(label='Match Colors')
document_process = Transition(label='Document Process')
review_quality = Transition(label='Review Quality')
obtain_approval = Transition(label='Obtain Approval')
package_securely = Transition(label='Package Securely')
arrange_transport = Transition(label='Arrange Transport')

# Define silent transitions for conditions
skip_assessment = SilentTransition()
skip_verification = SilentTransition()
skip_condition_analysis = SilentTransition()
skip_conservation_planning = SilentTransition()
skip_cleaning = SilentTransition()
skip_stabilization = SilentTransition()
skip_material_source = SilentTransition()
skip_part_fabrication = SilentTransition()
skip_repair = SilentTransition()
skip_patina_application = SilentTransition()
skip_color_matching = SilentTransition()
skip_documentation = SilentTransition()
skip_quality_review = SilentTransition()
skip_approval = SilentTransition()
skip_package = SilentTransition()
skip_transport = SilentTransition()

# Define loop nodes for complex tasks
assess_verification_loop = OperatorPOWL(operator=Operator.LOOP, children=[assess_artifact, verify_provenance])
condition_analysis_loop = OperatorPOWL(operator=Operator.LOOP, children=[analyze_condition, plan_conservation])
clean_stabilization_loop = OperatorPOWL(operator=Operator.LOOP, children=[clean_surface, stabilize_structure])
material_source_loop = OperatorPOWL(operator=Operator.LOOP, children=[source_materials, fabricate_parts])
repair_patina_loop = OperatorPOWL(operator=Operator.LOOP, children=[perform_repairs, apply_patina])
color_matching_loop = OperatorPOWL(operator=Operator.LOOP, children=[match_colors, document_process])
quality_review_loop = OperatorPOWL(operator=Operator.LOOP, children=[review_quality, obtain_approval])
package_transport_loop = OperatorPOWL(operator=Operator.LOOP, children=[package_securely, arrange_transport])

# Define exclusive choice for complex tasks
xor_assessment = OperatorPOWL(operator=Operator.XOR, children=[assess_artifact, skip_assessment])
xor_verification = OperatorPOWL(operator=Operator.XOR, children=[verify_provenance, skip_verification])
xor_condition_analysis = OperatorPOWL(operator=Operator.XOR, children=[analyze_condition, skip_condition_analysis])
xor_conservation_planning = OperatorPOWL(operator=Operator.XOR, children=[plan_conservation, skip_conservation_planning])
xor_cleaning = OperatorPOWL(operator=Operator.XOR, children=[clean_surface, skip_cleaning])
xor_stabilization = OperatorPOWL(operator=Operator.XOR, children=[stabilize_structure, skip_stabilization])
xor_material_source = OperatorPOWL(operator=Operator.XOR, children=[source_materials, skip_material_source])
xor_part_fabrication = OperatorPOWL(operator=Operator.XOR, children=[fabricate_parts, skip_part_fabrication])
xor_repair = OperatorPOWL(operator=Operator.XOR, children=[perform_repairs, skip_repair])
xor_patina_application = OperatorPOWL(operator=Operator.XOR, children=[apply_patina, skip_patina_application])
xor_color_matching = OperatorPOWL(operator=Operator.XOR, children=[match_colors, skip_color_matching])
xor_documentation = OperatorPOWL(operator=Operator.XOR, children=[document_process, skip_documentation])
xor_quality_review = OperatorPOWL(operator=Operator.XOR, children=[review_quality, skip_quality_review])
xor_approval = OperatorPOWL(operator=Operator.XOR, children=[obtain_approval, skip_approval])
xor_package = OperatorPOWL(operator=Operator.XOR, children=[package_securely, skip_package])
xor_transport = OperatorPOWL(operator=Operator.XOR, children=[arrange_transport, skip_transport])

# Define strict partial order
root = StrictPartialOrder(nodes=[assess_verification_loop, condition_analysis_loop, clean_stabilization_loop, material_source_loop, repair_patina_loop, color_matching_loop, quality_review_loop, package_transport_loop])
root.order.add_edge(assess_verification_loop, xor_verification)
root.order.add_edge(assess_verification_loop, xor_condition_analysis)
root.order.add_edge(assess_verification_loop, xor_conservation_planning)
root.order.add_edge(xor_condition_analysis, xor_cleaning)
root.order.add_edge(xor_condition_analysis, xor_stabilization)
root.order.add_edge(xor_cleaning, xor_material_source)
root.order.add_edge(xor_cleaning, xor_part_fabrication)
root.order.add_edge(xor_material_source, xor_repair)
root.order.add_edge(xor_material_source, xor_patina_application)
root.order.add_edge(xor_stabilization, xor_color_matching)
root.order.add_edge(xor_stabilization, xor_documentation)
root.order.add_edge(xor_color_matching, xor_quality_review)
root.order.add_edge(xor_color_matching, xor_approval)
root.order.add_edge(xor_documentation, xor_package)
root.order.add_edge(xor_package, xor_transport)