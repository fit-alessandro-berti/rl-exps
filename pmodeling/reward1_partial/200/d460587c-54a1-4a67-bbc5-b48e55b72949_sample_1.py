import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
permit_filing = Transition(label='Permit Filing')
load_testing = Transition(label='Load Testing')
soil_sampling = Transition(label='Soil Sampling')
water_testing = Transition(label='Water Testing')
system_design = Transition(label='System Design')
solar_setup = Transition(label='Solar Setup')
crop_planning = Transition(label='Crop Planning')
stakeholder_meet = Transition(label='Stakeholder Meet')
material_order = Transition(label='Material Order')
system_install = Transition(label='System Install')
environmental_audit = Transition(label='Environmental Audit')
growth_monitoring = Transition(label='Growth Monitoring')
pest_control = Transition(label='Pest Control')
market_launch = Transition(label='Market Launch')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, permit_filing])
xor = OperatorPOWL(operator=Operator.XOR, children=[load_testing, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[soil_sampling, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[water_testing, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[system_design, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[solar_setup, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[crop_planning, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_meet, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[material_order, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[system_install, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[environmental_audit, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[growth_monitoring, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[market_launch, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)