import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions (activities)
site_survey = Transition(label='Site Survey')
structure_reinforce = Transition(label='Structure Reinforce')
hydroponic_setup = Transition(label='Hydroponic Setup')
climate_install = Transition(label='Climate Install')
ai_integration = Transition(label='AI Integration')
seed_sourcing = Transition(label='Seed Sourcing')
nutrient_prep = Transition(label='Nutrient Prep')
system_testing = Transition(label='System Testing')
staff_training = Transition(label='Staff Training')
crop_planting = Transition(label='Crop Planting')
growth_monitor = Transition(label='Growth Monitor')
pest_control = Transition(label='Pest Control')
harvest_schedule = Transition(label='Harvest Schedule')
quality_check = Transition(label='Quality Check')
market_dispatch = Transition(label='Market Dispatch')
waste_recycle = Transition(label='Waste Recycle')
data_analysis = Transition(label='Data Analysis')

# Define the transitions (silent activities)
skip = SilentTransition()

# Define the nodes and their dependencies
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[system_testing, skip])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[staff_training, skip])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[crop_planting, skip])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[quality_check, skip])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[market_dispatch, skip])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[waste_recycle, skip])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[data_analysis, skip])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[pest_control, loop1])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor, loop2])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[harvest_schedule, loop3])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[quality_check, loop4])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[market_dispatch, loop5])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[waste_recycle, loop6])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[data_analysis, loop7])

root = StrictPartialOrder(nodes=[site_survey, structure_reinforce, hydroponic_setup, climate_install, ai_integration, seed_sourcing, nutrient_prep, xor1, xor2, xor3, xor4, xor5, xor6, xor7])
root.order.add_edge(site_survey, structure_reinforce)
root.order.add_edge(structure_reinforce, hydroponic_setup)
root.order.add_edge(hydroponic_setup, climate_install)
root.order.add_edge(climate_install, ai_integration)
root.order.add_edge(ai_integration, seed_sourcing)
root.order.add_edge(seed_sourcing, nutrient_prep)
root.order.add_edge(nutrient_prep, xor1)
root.order.add_edge(xor1, loop1)
root.order.add_edge(xor1, loop2)
root.order.add_edge(xor1, loop3)
root.order.add_edge(xor1, loop4)
root.order.add_edge(xor1, loop5)
root.order.add_edge(xor1, loop6)
root.order.add_edge(xor1, loop7)
root.order.add_edge(loop1, system_testing)
root.order.add_edge(system_testing, skip)
root.order.add_edge(loop2, staff_training)
root.order.add_edge(staff_training, skip)
root.order.add_edge(loop3, crop_planting)
root.order.add_edge(crop_planting, skip)
root.order.add_edge(loop4, quality_check)
root.order.add_edge(quality_check, skip)
root.order.add_edge(loop5, market_dispatch)
root.order.add_edge(market_dispatch, skip)
root.order.add_edge(loop6, waste_recycle)
root.order.add_edge(waste_recycle, skip)
root.order.add_edge(loop7, data_analysis)
root.order.add_edge(data_analysis, skip)

print(root)