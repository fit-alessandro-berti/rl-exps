from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

order_validate = Transition(label='Order Validate')
route_optimize = Transition(label='Route Optimize')
drone_assign = Transition(label='Drone Assign')
preflight_check = Transition(label='Preflight Check')
load_package = Transition(label='Load Package')
flight_launch = Transition(label='Flight Launch')
traffic_monitor = Transition(label='Traffic Monitor')
weather_assess = Transition(label='Weather Assess')
obstacle_avoid = Transition(label='Obstacle Avoid')
battery_check = Transition(label='Battery Check')
delivery_verify = Transition(label='Delivery Verify')
biometric_scan = Transition(label='Biometric Scan')
package_release = Transition(label='Package Release')
return_flight = Transition(label='Return Flight')
post_flight = Transition(label='Post Flight')
data_analyze = Transition(label='Data Analyze')
feedback_collect = Transition(label='Feedback Collect')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[flight_launch, return_flight])
xor = OperatorPOWL(operator=Operator.XOR, children=[battery_check, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[traffic_monitor, weather_assess])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[obstacle_avoid, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[preflight_check, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[load_package, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[delivery_verify, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[biometric_scan, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[package_release, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[return_flight, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[post_flight, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[data_analyze, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[feedback_collect, skip])
root = StrictPartialOrder(nodes=[order_validate, route_optimize, drone_assign, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12])
root.order.add_edge(order_validate, route_optimize)
root.order.add_edge(route_optimize, drone_assign)
root.order.add_edge(drone_assign, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, loop)