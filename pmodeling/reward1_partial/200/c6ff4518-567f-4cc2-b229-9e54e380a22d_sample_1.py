import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

milk_sourcing = Transition(label='Milk Sourcing')
culture_prep = Transition(label='Culture Prep')
milk_pasturize = Transition(label='Milk Pasteurize')
coagulation = Transition(label='Coagulation')
curd_cutting = Transition(label='Curd Cutting')
whey_draining = Transition(label='Whey Draining')
hand_molding = Transition(label='Hand Molding')
pressing = Transition(label='Pressing')
salting = Transition(label='Salting')
rind_treatment = Transition(label='Rind Treatment')
aging_setup = Transition(label='Aging Setup')
microclimate_control = Transition(label='Microclimate Control')
flavor_profiling = Transition(label='Flavor Profiling')
quality_check = Transition(label='Quality Check')
sensory_review = Transition(label='Sensory Review')
texture_inspect = Transition(label='Texture Inspect')
eco_packaging = Transition(label='Eco Packaging')
batch_labeling = Transition(label='Batch Labeling')
blockchain_log = Transition(label='Blockchain Log')
niche_shipping = Transition(label='Niche Shipping')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[blockchain_log, niche_shipping])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[flavor_profiling, texture_inspect])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[sensory_review, texture_inspect])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[quality_check, sensory_review])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[eco_packaging, niche_shipping])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[batch_labeling, niche_shipping])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[aging_setup, niche_shipping])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[microclimate_control, niche_shipping])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[rind_treatment, niche_shipping])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[salting, niche_shipping])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[pressing, niche_shipping])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[whey_draining, niche_shipping])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[curd_cutting, niche_shipping])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[coagulation, niche_shipping])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[milk_pasturize, niche_shipping])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[culture_prep, niche_shipping])
xor17 = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, niche_shipping])

root = StrictPartialOrder(nodes=[xor17, xor16, xor15, xor14, xor13, xor12, xor11, xor10, xor9, xor8, xor7, xor6, xor5, xor4, xor3, xor2, xor])
root.order.add_edge(xor17, xor16)
root.order.add_edge(xor16, xor15)
root.order.add_edge(xor15, xor14)
root.order.add_edge(xor14, xor13)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor)