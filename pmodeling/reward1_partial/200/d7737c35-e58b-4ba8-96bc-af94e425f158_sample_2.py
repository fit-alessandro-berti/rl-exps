from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
milk_sourcing = Transition(label='Milk Sourcing')
supplier_audit = Transition(label='Supplier Audit')
culture_prep = Transition(label='Culture Prep')
milk_testing = Transition(label='Milk Testing')
fermentation_start = Transition(label='Fermentation Start')
pH_monitoring = Transition(label='pH Monitoring')
curd_cutting = Transition(label='Curd Cutting')
mold_inoculation = Transition(label='Mold Inoculation')
aging_setup = Transition(label='Aging Setup')
humidity_control = Transition(label='Humidity Control')
texture_check = Transition(label='Texture Check')
flavor_profiling = Transition(label='Flavor Profiling')
batch_labeling = Transition(label='Batch Labeling')
packaging = Transition(label='Packaging')
distribution = Transition(label='Distribution')
feedback_review = Transition(label='Feedback Review')
sustainability_audit = Transition(label='Sustainability Audit')

# Define silent transitions
skip = SilentTransition()

# Define the POWL model
xor_milk_sourcing = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, skip])
xor_audit = OperatorPOWL(operator=Operator.XOR, children=[supplier_audit, skip])
xor_culture = OperatorPOWL(operator=Operator.XOR, children=[culture_prep, skip])
xor_testing = OperatorPOWL(operator=Operator.XOR, children=[milk_testing, skip])
xor_fermentation = OperatorPOWL(operator=Operator.XOR, children=[fermentation_start, skip])
xor_pH = OperatorPOWL(operator=Operator.XOR, children=[pH_monitoring, skip])
xor_curd = OperatorPOWL(operator=Operator.XOR, children=[curd_cutting, skip])
xor_mold = OperatorPOWL(operator=Operator.XOR, children=[mold_inoculation, skip])
xor_aging = OperatorPOWL(operator=Operator.XOR, children=[aging_setup, skip])
xor_humidity = OperatorPOWL(operator=Operator.XOR, children=[humidity_control, skip])
xor_texture = OperatorPOWL(operator=Operator.XOR, children=[texture_check, skip])
xor_flavor = OperatorPOWL(operator=Operator.XOR, children=[flavor_profiling, skip])
xor_labeling = OperatorPOWL(operator=Operator.XOR, children=[batch_labeling, skip])
xor_packaging = OperatorPOWL(operator=Operator.XOR, children=[packaging, skip])
xor_distribution = OperatorPOWL(operator=Operator.XOR, children=[distribution, skip])
xor_feedback = OperatorPOWL(operator=Operator.XOR, children=[feedback_review, skip])
xor_sustainability = OperatorPOWL(operator=Operator.XOR, children=[sustainability_audit, skip])

root = StrictPartialOrder(nodes=[xor_milk_sourcing, xor_audit, xor_culture, xor_testing, xor_fermentation, xor_pH, xor_curd, xor_mold, xor_aging, xor_humidity, xor_texture, xor_flavor, xor_labeling, xor_packaging, xor_distribution, xor_feedback, xor_sustainability])
root.order.add_edge(xor_milk_sourcing, xor_audit)
root.order.add_edge(xor_audit, xor_culture)
root.order.add_edge(xor_culture, xor_testing)
root.order.add_edge(xor_testing, xor_fermentation)
root.order.add_edge(xor_fermentation, xor_pH)
root.order.add_edge(xor_pH, xor_curd)
root.order.add_edge(xor_curd, xor_mold)
root.order.add_edge(xor_mold, xor_aging)
root.order.add_edge(xor_aging, xor_humidity)
root.order.add_edge(xor_humidity, xor_texture)
root.order.add_edge(xor_texture, xor_flavor)
root.order.add_edge(xor_flavor, xor_labeling)
root.order.add_edge(xor_labeling, xor_packaging)
root.order.add_edge(xor_packaging, xor_distribution)
root.order.add_edge(xor_distribution, xor_feedback)
root.order.add_edge(xor_feedback, xor_sustainability)