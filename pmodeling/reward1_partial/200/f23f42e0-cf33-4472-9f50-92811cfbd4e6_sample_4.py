import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Milk_Sourcing = Transition(label='Milk Sourcing')
Culture_Selection = Transition(label='Culture Selection')
Milk_Testing = Transition(label='Milk Testing')
Curd_Cutting = Transition(label='Curd Cutting')
Whey_Draining = Transition(label='Whey Draining')
Mold_Inoculation = Transition(label='Mold Inoculation')
Forming_Cheese = Transition(label='Forming Cheese')
Salting_Stage = Transition(label='Salting Stage')
Aging_Setup = Transition(label='Aging Setup')
Climate_Control = Transition(label='Climate Control')
Quality_Tasting = Transition(label='Quality Tasting')
Packaging_Prep = Transition(label='Packaging Prep')
Label_Printing = Transition(label='Label Printing')
Distribution_Plan = Transition(label='Distribution Plan')
Retail_Delivery = Transition(label='Retail Delivery')
Event_Coordination = Transition(label='Event Coordination')
Regulatory_Audit = Transition(label='Regulatory Audit')

skip = SilentTransition()

milk_sourcing = OperatorPOWL(operator=Operator.XOR, children=[Milk_Sourcing, skip])
culture_selection = OperatorPOWL(operator=Operator.XOR, children=[Culture_Selection, skip])
milk_testing = OperatorPOWL(operator=Operator.XOR, children=[Milk_Testing, skip])
curd_cutting = OperatorPOWL(operator=Operator.XOR, children=[Curd_Cutting, skip])
whey_draining = OperatorPOWL(operator=Operator.XOR, children=[Whey_Draining, skip])
mold_inoculation = OperatorPOWL(operator=Operator.XOR, children=[Mold_Inoculation, skip])
forming_cheese = OperatorPOWL(operator=Operator.XOR, children=[Forming_Cheese, skip])
salting_stage = OperatorPOWL(operator=Operator.XOR, children=[Salting_Stage, skip])
aging_setup = OperatorPOWL(operator=Operator.XOR, children=[Aging_Setup, skip])
climate_control = OperatorPOWL(operator=Operator.XOR, children=[Climate_Control, skip])
quality_tasting = OperatorPOWL(operator=Operator.XOR, children=[Quality_Tasting, skip])
packaging_prep = OperatorPOWL(operator=Operator.XOR, children=[Packaging_Prep, skip])
label_printing = OperatorPOWL(operator=Operator.XOR, children=[Label_Printing, skip])
distribution_plan = OperatorPOWL(operator=Operator.XOR, children=[Distribution_Plan, skip])
retail_delivery = OperatorPOWL(operator=Operator.XOR, children=[Retail_Delivery, skip])
event_coordination = OperatorPOWL(operator=Operator.XOR, children=[Event_Coordination, skip])
regulatory_audit = OperatorPOWL(operator=Operator.XOR, children=[Regulatory_Audit, skip])

root = StrictPartialOrder(nodes=[milk_sourcing, culture_selection, milk_testing, curd_cutting, whey_draining, mold_inoculation, forming_cheese, salting_stage, aging_setup, climate_control, quality_tasting, packaging_prep, label_printing, distribution_plan, retail_delivery, event_coordination, regulatory_audit])
root.order.add_edge(milk_sourcing, culture_selection)
root.order.add_edge(culture_selection, milk_testing)
root.order.add_edge(milk_testing, curd_cutting)
root.order.add_edge(curd_cutting, whey_draining)
root.order.add_edge(whey_draining, mold_inoculation)
root.order.add_edge(mold_inoculation, forming_cheese)
root.order.add_edge(forming_cheese, salting_stage)
root.order.add_edge(salting_stage, aging_setup)
root.order.add_edge(aging_setup, climate_control)
root.order.add_edge(climate_control, quality_tasting)
root.order.add_edge(quality_tasting, packaging_prep)
root.order.add_edge(packaging_prep, label_printing)
root.order.add_edge(label_printing, distribution_plan)
root.order.add_edge(distribution_plan, retail_delivery)
root.order.add_edge(retail_delivery, event_coordination)
root.order.add_edge(event_coordination, regulatory_audit)