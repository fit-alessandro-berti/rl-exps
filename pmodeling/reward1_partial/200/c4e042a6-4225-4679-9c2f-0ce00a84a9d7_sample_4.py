import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
# Define transitions for each activity
sourcing = Transition(label='Material Sourcing')
audit = Transition(label='Supplier Audit')
credential_verify = Transition(label='Credential Verify')
design_concept = Transition(label='Design Concept')
prototype_build = Transition(label='Prototype Build')
quality_review = Transition(label='Quality Review')
artisan_assign = Transition(label='Artisan Assign')
batch_schedule = Transition(label='Batch Scheduling')
custom_approvals = Transition(label='Custom Approvals')
inventory_adjust = Transition(label='Inventory Adjust')
production_sync = Transition(label='Production Sync')
shipping_plan = Transition(label='Shipping Plan')
compliance_check = Transition(label='Compliance Check')
feedback_loop = Transition(label='Feedback Loop')
market_target = Transition(label='Market Target')
order_fulfill = Transition(label='Order Fulfill')
sustainability = Transition(label='Sustainability')
customer_engage = Transition(label='Customer Engage')
# Define silent transitions (e.g., for looping or concurrent activities)
skip = SilentTransition()
# Define partial order structure
loop_sourcing = OperatorPOWL(operator=Operator.LOOP, children=[sourcing, audit])
loop_audit = OperatorPOWL(operator=Operator.LOOP, children=[audit, credential_verify])
loop_credential_verify = OperatorPOWL(operator=Operator.LOOP, children=[credential_verify, design_concept])
loop_design_concept = OperatorPOWL(operator=Operator.LOOP, children=[design_concept, prototype_build])
loop_prototype_build = OperatorPOWL(operator=Operator.LOOP, children=[prototype_build, quality_review])
loop_quality_review = OperatorPOWL(operator=Operator.LOOP, children=[quality_review, artisan_assign])
loop_artisan_assign = OperatorPOWL(operator=Operator.LOOP, children=[artisan_assign, batch_schedule])
loop_batch_schedule = OperatorPOWL(operator=Operator.LOOP, children=[batch_schedule, custom_approvals])
loop_custom_approvals = OperatorPOWL(operator=Operator.LOOP, children=[custom_approvals, inventory_adjust])
loop_inventory_adjust = OperatorPOWL(operator=Operator.LOOP, children=[inventory_adjust, production_sync])
loop_production_sync = OperatorPOWL(operator=Operator.LOOP, children=[production_sync, shipping_plan])
loop_shipping_plan = OperatorPOWL(operator=Operator.LOOP, children=[shipping_plan, compliance_check])
loop_compliance_check = OperatorPOWL(operator=Operator.LOOP, children=[compliance_check, feedback_loop])
loop_feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop, market_target])
loop_market_target = OperatorPOWL(operator=Operator.LOOP, children=[market_target, order_fulfill])
loop_order_fulfill = OperatorPOWL(operator=Operator.LOOP, children=[order_fulfill, sustainability])
loop_sustainability = OperatorPOWL(operator=Operator.LOOP, children=[sustainability, customer_engage])
root = StrictPartialOrder(nodes=[loop_sourcing, loop_audit, loop_credential_verify, loop_design_concept, loop_prototype_build, loop_quality_review, loop_artisan_assign, loop_batch_schedule, loop_custom_approvals, loop_inventory_adjust, loop_production_sync, loop_shipping_plan, loop_compliance_check, loop_feedback_loop, loop_market_target, loop_order_fulfill, loop_sustainability])
root.order.add_edge(loop_sourcing, loop_audit)
root.order.add_edge(loop_audit, loop_credential_verify)
root.order.add_edge(loop_credential_verify, loop_design_concept)
root.order.add_edge(loop_design_concept, loop_prototype_build)
root.order.add_edge(loop_prototype_build, loop_quality_review)
root.order.add_edge(loop_quality_review, loop_artisan_assign)
root.order.add_edge(loop_artisan_assign, loop_batch_schedule)
root.order.add_edge(loop_batch_schedule, loop_custom_approvals)
root.order.add_edge(loop_custom_approvals, loop_inventory_adjust)
root.order.add_edge(loop_inventory_adjust, loop_production_sync)
root.order.add_edge(loop_production_sync, loop_shipping_plan)
root.order.add_edge(loop_shipping_plan, loop_compliance_check)
root.order.add_edge(loop_compliance_check, loop_feedback_loop)
root.order.add_edge(loop_feedback_loop, loop_market_target)
root.order.add_edge(loop_market_target, loop_order_fulfill)
root.order.add_edge(loop_order_fulfill, loop_sustainability)
root.order.add_edge(loop_sustainability, loop_customer_engage)