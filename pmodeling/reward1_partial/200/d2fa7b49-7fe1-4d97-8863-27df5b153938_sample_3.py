from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_intake = Transition(label='Artifact Intake')
preliminary_check = Transition(label='Preliminary Check')
historical_review = Transition(label='Historical Review')
chemical_test = Transition(label='Chemical Test')
provenance_audit = Transition(label='Provenance Audit')
expert_panel = Transition(label='Expert Panel')
token_minting = Transition(label='Token Minting')
legal_review = Transition(label='Legal Review')
compliance_check = Transition(label='Compliance Check')
insurance_valuation = Transition(label='Insurance Valuation')
risk_assessment = Transition(label='Risk Assessment')
packaging_prep = Transition(label='Packaging Prep')
climate_control = Transition(label='Climate Control')
transport_setup = Transition(label='Transport Setup')
final_approval = Transition(label='Final Approval')

skip = SilentTransition()

historical_review_operator = OperatorPOWL(operator=Operator.LOOP, children=[historical_review, chemical_test, provenance_audit])
chemical_test_operator = OperatorPOWL(operator=Operator.LOOP, children=[chemical_test, provenance_audit])
provenance_audit_operator = OperatorPOWL(operator=Operator.LOOP, children=[provenance_audit, expert_panel])
expert_panel_operator = OperatorPOWL(operator=Operator.LOOP, children=[expert_panel, token_minting])
token_minting_operator = OperatorPOWL(operator=Operator.LOOP, children=[token_minting, legal_review])
legal_review_operator = OperatorPOWL(operator=Operator.LOOP, children=[legal_review, compliance_check])
compliance_check_operator = OperatorPOWL(operator=Operator.LOOP, children=[compliance_check, insurance_valuation])
insurance_valuation_operator = OperatorPOWL(operator=Operator.LOOP, children=[insurance_valuation, risk_assessment])
risk_assessment_operator = OperatorPOWL(operator=Operator.LOOP, children=[risk_assessment, packaging_prep])
packaging_prep_operator = OperatorPOWL(operator=Operator.LOOP, children=[packaging_prep, climate_control])
climate_control_operator = OperatorPOWL(operator=Operator.LOOP, children=[climate_control, transport_setup])
transport_setup_operator = OperatorPOWL(operator=Operator.LOOP, children=[transport_setup, final_approval])

root = StrictPartialOrder(nodes=[historical_review_operator, chemical_test_operator, provenance_audit_operator, expert_panel_operator, token_minting_operator, legal_review_operator, compliance_check_operator, insurance_valuation_operator, risk_assessment_operator, packaging_prep_operator, climate_control_operator, transport_setup_operator, final_approval])
root.order.add_edge(historical_review_operator, chemical_test_operator)
root.order.add_edge(chemical_test_operator, provenance_audit_operator)
root.order.add_edge(provenance_audit_operator, expert_panel_operator)
root.order.add_edge(expert_panel_operator, token_minting_operator)
root.order.add_edge(token_minting_operator, legal_review_operator)
root.order.add_edge(legal_review_operator, compliance_check_operator)
root.order.add_edge(compliance_check_operator, insurance_valuation_operator)
root.order.add_edge(insurance_valuation_operator, risk_assessment_operator)
root.order.add_edge(risk_assessment_operator, packaging_prep_operator)
root.order.add_edge(packaging_prep_operator, climate_control_operator)
root.order.add_edge(climate_control_operator, transport_setup_operator)
root.order.add_edge(transport_setup_operator, final_approval)