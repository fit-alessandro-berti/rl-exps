from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
material_sourcing = Transition(label='Material Sourcing')
artisan_vetting = Transition(label='Artisan Vetting')
sample_review = Transition(label='Sample Review')
design_finalize = Transition(label='Design Finalize')
batch_scheduling = Transition(label='Batch Scheduling')
quality_check = Transition(label='Quality Check')
custom_packaging = Transition(label='Custom Packaging')
demand_forecast = Transition(label='Demand Forecast')
price_adjust = Transition(label='Price Adjust')
inventory_sync = Transition(label='Inventory Sync')
order_processing = Transition(label='Order Processing')
craft_coordination = Transition(label='Craft Coordination')
shipment_plan = Transition(label='Shipment Plan')
market_analysis = Transition(label='Market Analysis')
feedback_loop = Transition(label='Feedback Loop')
trend_monitor = Transition(label='Trend Monitor')

# Define the POWL model structure
loop_material_sourcing = OperatorPOWL(operator=Operator.LOOP, children=[material_sourcing])
loop_artisan_vetting = OperatorPOWL(operator=Operator.LOOP, children=[artisan_vetting])
loop_sample_review = OperatorPOWL(operator=Operator.LOOP, children=[sample_review])
loop_design_finalize = OperatorPOWL(operator=Operator.LOOP, children=[design_finalize])
loop_batch_scheduling = OperatorPOWL(operator=Operator.LOOP, children=[batch_scheduling])
loop_quality_check = OperatorPOWL(operator=Operator.LOOP, children=[quality_check])
loop_custom_packaging = OperatorPOWL(operator=Operator.LOOP, children=[custom_packaging])
loop_demand_forecast = OperatorPOWL(operator=Operator.LOOP, children=[demand_forecast])
loop_price_adjust = OperatorPOWL(operator=Operator.LOOP, children=[price_adjust])
loop_inventory_sync = OperatorPOWL(operator=Operator.LOOP, children=[inventory_sync])
loop_order_processing = OperatorPOWL(operator=Operator.LOOP, children=[order_processing])
loop_craft_coordination = OperatorPOWL(operator=Operator.LOOP, children=[craft_coordination])
loop_shipment_plan = OperatorPOWL(operator=Operator.LOOP, children=[shipment_plan])
loop_market_analysis = OperatorPOWL(operator=Operator.LOOP, children=[market_analysis])
loop_feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop])
loop_trend_monitor = OperatorPOWL(operator=Operator.LOOP, children=[trend_monitor])

xor_material_sourcing = OperatorPOWL(operator=Operator.XOR, children=[loop_material_sourcing, loop_artisan_vetting])
xor_artisan_vetting = OperatorPOWL(operator=Operator.XOR, children=[loop_artisan_vetting, loop_sample_review])
xor_sample_review = OperatorPOWL(operator=Operator.XOR, children=[loop_sample_review, loop_design_finalize])
xor_design_finalize = OperatorPOWL(operator=Operator.XOR, children=[loop_design_finalize, loop_batch_scheduling])
xor_batch_scheduling = OperatorPOWL(operator=Operator.XOR, children=[loop_batch_scheduling, loop_quality_check])
xor_quality_check = OperatorPOWL(operator=Operator.XOR, children=[loop_quality_check, loop_custom_packaging])
xor_custom_packaging = OperatorPOWL(operator=Operator.XOR, children=[loop_custom_packaging, loop_demand_forecast])
xor_demand_forecast = OperatorPOWL(operator=Operator.XOR, children=[loop_demand_forecast, loop_price_adjust])
xor_price_adjust = OperatorPOWL(operator=Operator.XOR, children=[loop_price_adjust, loop_inventory_sync])
xor_inventory_sync = OperatorPOWL(operator=Operator.XOR, children=[loop_inventory_sync, loop_order_processing])
xor_order_processing = OperatorPOWL(operator=Operator.XOR, children=[loop_order_processing, loop_craft_coordination])
xor_craft_coordination = OperatorPOWL(operator=Operator.XOR, children=[loop_craft_coordination, loop_shipment_plan])
xor_shipment_plan = OperatorPOWL(operator=Operator.XOR, children=[loop_shipment_plan, loop_market_analysis])
xor_market_analysis = OperatorPOWL(operator=Operator.XOR, children=[loop_market_analysis, loop_feedback_loop])
xor_feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[loop_feedback_loop, loop_trend_monitor])
xor_trend_monitor = OperatorPOWL(operator=Operator.XOR, children=[loop_trend_monitor, loop_material_sourcing])

root = StrictPartialOrder(nodes=[xor_material_sourcing, xor_artisan_vetting, xor_sample_review, xor_design_finalize, xor_batch_scheduling, xor_quality_check, xor_custom_packaging, xor_demand_forecast, xor_price_adjust, xor_inventory_sync, xor_order_processing, xor_craft_coordination, xor_shipment_plan, xor_market_analysis, xor_feedback_loop, xor_trend_monitor])
root.order.add_edge(xor_material_sourcing, xor_artisan_vetting)
root.order.add_edge(xor_artisan_vetting, xor_sample_review)
root.order.add_edge(xor_sample_review, xor_design_finalize)
root.order.add_edge(xor_design_finalize, xor_batch_scheduling)
root.order.add_edge(xor_batch_scheduling, xor_quality_check)
root.order.add_edge(xor_quality_check, xor_custom_packaging)
root.order.add_edge(xor_custom_packaging, xor_demand_forecast)
root.order.add_edge(xor_demand_forecast, xor_price_adjust)
root.order.add_edge(xor_price_adjust, xor_inventory_sync)
root.order.add_edge(xor_inventory_sync, xor_order_processing)
root.order.add_edge(xor_order_processing, xor_craft_coordination)
root.order.add_edge(xor_craft_coordination, xor_shipment_plan)
root.order.add_edge(xor_shipment_plan, xor_market_analysis)
root.order.add_edge(xor_market_analysis, xor_feedback_loop)
root.order.add_edge(xor_feedback_loop, xor_trend_monitor)
root.order.add_edge(xor_trend_monitor, xor_material_sourcing)

print(root)