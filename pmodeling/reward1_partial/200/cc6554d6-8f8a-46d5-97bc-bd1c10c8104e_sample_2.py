from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
demand_forecast = Transition(label='Demand Forecast')
risk_assess = Transition(label='Risk Assess')
supplier_audit = Transition(label='Supplier Audit')
inventory_scan = Transition(label='Inventory Scan')
route_optimize = Transition(label='Route Optimize')
order_prioritize = Transition(label='Order Prioritize')
contract_review = Transition(label='Contract Review')
delay_monitor = Transition(label='Delay Monitor')
shipment_reroute = Transition(label='Shipment Reroute')
cost_analyze = Transition(label='Cost Analyze')
compliance_check = Transition(label='Compliance Check')
alternative_engage = Transition(label='Alternative Engage')
inventory_reallocate = Transition(label='Inventory Reallocate')
performance_track = Transition(label='Performance Track')
feedback_loop = Transition(label='Feedback Loop')
strategy_update = Transition(label='Strategy Update')

# Define control flow
xor1 = OperatorPOWL(operator=Operator.XOR, children=[delay_monitor, shipment_reroute])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[contract_review, alternative_engage])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[inventory_reallocate, feedback_loop])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[cost_analyze, compliance_check])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[performance_track, strategy_update])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[xor1, xor2])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[xor3, xor4])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[xor5, xor6])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[xor7, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[xor9, xor10])

# Define root node
root = StrictPartialOrder(nodes=[demand_forecast, risk_assess, supplier_audit, inventory_scan, route_optimize, order_prioritize, xor10])
root.order.add_edge(demand_forecast, risk_assess)
root.order.add_edge(risk_assess, supplier_audit)
root.order.add_edge(supplier_audit, inventory_scan)
root.order.add_edge(inventory_scan, route_optimize)
root.order.add_edge(route_optimize, order_prioritize)
root.order.add_edge(order_prioritize, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor1)
root.order.add_edge(xor1, xor10)