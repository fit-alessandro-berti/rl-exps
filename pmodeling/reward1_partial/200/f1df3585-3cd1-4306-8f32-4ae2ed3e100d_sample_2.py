import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_assess = Transition(label='Site Assess')
plan_layout = Transition(label='Plan Layout')
install_racks = Transition(label='Install Racks')
mix_nutrients = Transition(label='Mix Nutrients')
calibrate_sensors = Transition(label='Calibrate Sensors')
setup_lighting = Transition(label='Setup Lighting')
configure_climate = Transition(label='Configure Climate')
select_seeds = Transition(label='Select Seeds')
monitor_germinate = Transition(label='Monitor Germinate')
apply_bio_controls = Transition(label='Apply Bio-controls')
maintain_systems = Transition(label='Maintain Systems')
analyze_data = Transition(label='Analyze Data')
harvest_crops = Transition(label='Harvest Crops')
quality_check = Transition(label='Quality Check')
package_produce = Transition(label='Package Produce')
distribute_goods = Transition(label='Distribute Goods')

skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[install_racks, mix_nutrients, calibrate_sensors])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[setup_lighting, configure_climate, select_seeds, monitor_germinate])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[apply_bio_controls, maintain_systems, analyze_data])
xor = OperatorPOWL(operator=Operator.XOR, children=[harvest_crops, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[quality_check, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[package_produce, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[distribute_goods, skip])

root = StrictPartialOrder(nodes=[site_assess, plan_layout, loop1, loop2, loop3, xor, xor2, xor3, xor4])
root.order.add_edge(site_assess, plan_layout)
root.order.add_edge(plan_layout, loop1)
root.order.add_edge(plan_layout, loop2)
root.order.add_edge(plan_layout, loop3)
root.order.add_edge(loop1, xor)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(xor, xor4)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor3, xor4)