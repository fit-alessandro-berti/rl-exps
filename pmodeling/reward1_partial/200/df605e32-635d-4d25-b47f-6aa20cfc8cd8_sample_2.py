import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions
artifact_scan = Transition(label='Artifact Scan')
ownership_verify = Transition(label='Ownership Verify')
risk_assess = Transition(label='Risk Assess')
legal_review = Transition(label='Legal Review')
stakeholder_notify = Transition(label='Stakeholder Notify')
recovery_plan = Transition(label='Recovery Plan')
third_party_contact = Transition(label='Third-Party Contact')
negotiation_setup = Transition(label='Negotiation Setup')
secure_transport = Transition(label='Secure Transport')
condition_inspect = Transition(label='Condition Inspect')
restoration_begin = Transition(label='Restoration Begin')
documentation_log = Transition(label='Documentation Log')
heritage_archive = Transition(label='Heritage Archive')
final_audit = Transition(label='Final Audit')
process_close = Transition(label='Process Close')

# Define silent transitions
skip = SilentTransition()

# Define the POWL model
xor1 = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_notify, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[recovery_plan, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[third_party_contact, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[negotiation_setup, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[secure_transport, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[condition_inspect, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[restoration_begin, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[documentation_log, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[heritage_archive, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[final_audit, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[process_close, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[xor1, xor2])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor3, xor4])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[xor5, xor6])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[xor7, xor8])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor9, xor10])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[xor11, xor12])

root = StrictPartialOrder(nodes=[artifact_scan, ownership_verify, risk_assess, loop1, loop2, loop3, loop4, loop5, loop6])
root.order.add_edge(artifact_scan, ownership_verify)
root.order.add_edge(ownership_verify, risk_assess)
root.order.add_edge(risk_assess, loop1)
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop1, xor2)
root.order.add_edge(xor1, legal_review)
root.order.add_edge(xor1, skip)
root.order.add_edge(xor2, stakeholder_notify)
root.order.add_edge(xor2, skip)
root.order.add_edge(loop2, xor3)
root.order.add_edge(loop2, xor4)
root.order.add_edge(xor3, recovery_plan)
root.order.add_edge(xor3, skip)
root.order.add_edge(xor4, third_party_contact)
root.order.add_edge(xor4, skip)
root.order.add_edge(loop3, xor5)
root.order.add_edge(loop3, xor6)
root.order.add_edge(xor5, negotiation_setup)
root.order.add_edge(xor5, skip)
root.order.add_edge(xor6, secure_transport)
root.order.add_edge(xor6, skip)
root.order.add_edge(loop4, xor7)
root.order.add_edge(loop4, xor8)
root.order.add_edge(xor7, condition_inspect)
root.order.add_edge(xor7, skip)
root.order.add_edge(xor8, restoration_begin)
root.order.add_edge(xor8, skip)
root.order.add_edge(loop5, xor9)
root.order.add_edge(loop5, xor10)
root.order.add_edge(xor9, documentation_log)
root.order.add_edge(xor9, skip)
root.order.add_edge(xor10, heritage_archive)
root.order.add_edge(xor10, skip)
root.order.add_edge(loop6, xor11)
root.order.add_edge(loop6, xor12)
root.order.add_edge(xor11, final_audit)
root.order.add_edge(xor11, skip)
root.order.add_edge(xor12, process_close)
root.order.add_edge(xor12, skip)