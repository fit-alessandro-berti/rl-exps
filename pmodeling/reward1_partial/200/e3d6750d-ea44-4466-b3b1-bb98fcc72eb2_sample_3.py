from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
structural_check = Transition(label='Structural Check')
iot_setup = Transition(label='IoT Setup')
crop_selection = Transition(label='Crop Selection')
hydroponic_install = Transition(label='Hydroponic Install')
water_recycling = Transition(label='Water Recycling')
energy_audit = Transition(label='Energy Audit')
plant_scheduling = Transition(label='Plant Scheduling')
yield_monitoring = Transition(label='Yield Monitoring')
regulation_review = Transition(label='Regulation Review')
staff_training = Transition(label='Staff Training')
data_integration = Transition(label='Data Integration')
supply_setup = Transition(label='Supply Setup')
quality_audit = Transition(label='Quality Audit')
logistics_plan = Transition(label='Logistics Plan')

skip = SilentTransition()

site_survey_xor = OperatorPOWL(operator=Operator.XOR, children=[structural_check, skip])
iot_setup_xor = OperatorPOWL(operator=Operator.XOR, children=[iot_setup, skip])
crop_selection_xor = OperatorPOWL(operator=Operator.XOR, children=[crop_selection, skip])
hydroponic_install_xor = OperatorPOWL(operator=Operator.XOR, children=[hydroponic_install, skip])
water_recycling_xor = OperatorPOWL(operator=Operator.XOR, children=[water_recycling, skip])
energy_audit_xor = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
plant_scheduling_xor = OperatorPOWL(operator=Operator.XOR, children=[plant_scheduling, skip])
yield_monitoring_xor = OperatorPOWL(operator=Operator.XOR, children=[yield_monitoring, skip])
regulation_review_xor = OperatorPOWL(operator=Operator.XOR, children=[regulation_review, skip])
staff_training_xor = OperatorPOWL(operator=Operator.XOR, children=[staff_training, skip])
data_integration_xor = OperatorPOWL(operator=Operator.XOR, children=[data_integration, skip])
supply_setup_xor = OperatorPOWL(operator=Operator.XOR, children=[supply_setup, skip])
quality_audit_xor = OperatorPOWL(operator=Operator.XOR, children=[quality_audit, skip])
logistics_plan_xor = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, skip])

root = StrictPartialOrder(nodes=[site_survey, site_survey_xor, iot_setup_xor, crop_selection_xor, hydroponic_install_xor, water_recycling_xor, energy_audit_xor, plant_scheduling_xor, yield_monitoring_xor, regulation_review_xor, staff_training_xor, data_integration_xor, supply_setup_xor, quality_audit_xor, logistics_plan_xor])
root.order.add_edge(site_survey, site_survey_xor)
root.order.add_edge(iot_setup, iot_setup_xor)
root.order.add_edge(crop_selection, crop_selection_xor)
root.order.add_edge(hydroponic_install, hydroponic_install_xor)
root.order.add_edge(water_recycling, water_recycling_xor)
root.order.add_edge(energy_audit, energy_audit_xor)
root.order.add_edge(plant_scheduling, plant_scheduling_xor)
root.order.add_edge(yield_monitoring, yield_monitoring_xor)
root.order.add_edge(regulation_review, regulation_review_xor)
root.order.add_edge(staff_training, staff_training_xor)
root.order.add_edge(data_integration, data_integration_xor)
root.order.add_edge(supply_setup, supply_setup_xor)
root.order.add_edge(quality_audit, quality_audit_xor)
root.order.add_edge(logistics_plan, logistics_plan_xor)