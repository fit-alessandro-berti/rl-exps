import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

light_sourcing = Transition(label='Light Sourcing')
nutrient_order = Transition(label='Nutrient Order')
climate_setup = Transition(label='Climate Setup')
growth_planning = Transition(label='Growth Planning')
seed_planting = Transition(label='Seed Planting')
irrigation_check = Transition(label='Irrigation Check')
pest_monitoring = Transition(label='Pest Monitoring')
energy_tracking = Transition(label='Energy Tracking')
quality_testing = Transition(label='Quality Testing')
data_analysis = Transition(label='Data Analysis')
equipment_repair = Transition(label='Equipment Repair')
packaging_prep = Transition(label='Packaging Prep')
inventory_update = Transition(label='Inventory Update')
delivery_scheduling = Transition(label='Delivery Scheduling')
customer_feedback = Transition(label='Customer Feedback')
market_forecast = Transition(label='Market Forecast')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[equipment_repair, skip])
loop = OperatorPOWL(operator=Operator.LOOP, children=[seed_planting, data_analysis])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[pest_monitoring, energy_tracking])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[irrigation_check, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[quality_testing, market_forecast])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[inventory_update, delivery_scheduling])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[nutrient_order, climate_setup])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[growth_planning, light_sourcing])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[xor7, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[xor9, xor10])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[xor2, xor3])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[xor4, xor5])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[xor6, xor7])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[xor11, xor12])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[xor13, xor14])
root = StrictPartialOrder(nodes=[xor15, xor])
root.order.add_edge(xor15, xor)