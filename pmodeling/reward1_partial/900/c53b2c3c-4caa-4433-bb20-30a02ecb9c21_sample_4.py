from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
discover_item = Transition(label='Discover Item')
document_find = Transition(label='Document Find')
initial_survey = Transition(label='Initial Survey')
image_capture = Transition(label='Image Capture')
material_testing = Transition(label='Material Testing')
style_compare = Transition(label='Style Compare')
expert_consult = Transition(label='Expert Consult')
provenance_check = Transition(label='Provenance Check')
ownership_verify = Transition(label='Ownership Verify')
legal_review = Transition(label='Legal Review')
risk_assess = Transition(label='Risk Assess')
conservation_plan = Transition(label='Conservation Plan')
certification = Transition(label='Certification')
secure_transfer = Transition(label='Secure Transfer')
dispute_resolve = Transition(label='Dispute Resolve')
final_archive = Transition(label='Final Archive')

# Define the process steps
discover_item_to_document_find = OperatorPOWL(operator=Operator.XOR, children=[discover_item, document_find])
document_find_to_initial_survey = OperatorPOWL(operator=Operator.XOR, children=[document_find, initial_survey])
initial_survey_to_image_capture = OperatorPOWL(operator=Operator.XOR, children=[initial_survey, image_capture])
image_capture_to_material_testing = OperatorPOWL(operator=Operator.XOR, children=[image_capture, material_testing])
material_testing_to_style_compare = OperatorPOWL(operator=Operator.XOR, children=[material_testing, style_compare])
style_compare_to_expert_consult = OperatorPOWL(operator=Operator.XOR, children=[style_compare, expert_consult])
expert_consult_to_provenance_check = OperatorPOWL(operator=Operator.XOR, children=[expert_consult, provenance_check])
provenance_check_to_ownership_verify = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, ownership_verify])
ownership_verify_to_legal_review = OperatorPOWL(operator=Operator.XOR, children=[ownership_verify, legal_review])
legal_review_to_risk_assess = OperatorPOWL(operator=Operator.XOR, children=[legal_review, risk_assess])
risk_assess_to_conservation_plan = OperatorPOWL(operator=Operator.XOR, children=[risk_assess, conservation_plan])
conservation_plan_to_certification = OperatorPOWL(operator=Operator.XOR, children=[conservation_plan, certification])
certification_to_secure_transfer = OperatorPOWL(operator=Operator.XOR, children=[certification, secure_transfer])
secure_transfer_to_dispute_resolve = OperatorPOWL(operator=Operator.XOR, children=[secure_transfer, dispute_resolve])
dispute_resolve_to_final_archive = OperatorPOWL(operator=Operator.XOR, children=[dispute_resolve, final_archive])

# Create the root of the POWL model
root = StrictPartialOrder(nodes=[discover_item, document_find, initial_survey, image_capture, material_testing, style_compare, expert_consult, provenance_check, ownership_verify, legal_review, risk_assess, conservation_plan, certification, secure_transfer, dispute_resolve, final_archive])
root.order.add_edge(discover_item, document_find)
root.order.add_edge(document_find, initial_survey)
root.order.add_edge(initial_survey, image_capture)
root.order.add_edge(image_capture, material_testing)
root.order.add_edge(material_testing, style_compare)
root.order.add_edge(style_compare, expert_consult)
root.order.add_edge(expert_consult, provenance_check)
root.order.add_edge(provenance_check, ownership_verify)
root.order.add_edge(ownership_verify, legal_review)
root.order.add_edge(legal_review, risk_assess)
root.order.add_edge(risk_assess, conservation_plan)
root.order.add_edge(conservation_plan, certification)
root.order.add_edge(certification, secure_transfer)
root.order.add_edge(secure_transfer, dispute_resolve)
root.order.add_edge(dispute_resolve, final_archive)

print(root)