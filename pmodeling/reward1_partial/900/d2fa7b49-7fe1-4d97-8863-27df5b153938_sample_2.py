from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_intake = Transition(label='Artifact Intake')
preliminary_check = Transition(label='Preliminary Check')
historical_review = Transition(label='Historical Review')
chemical_test = Transition(label='Chemical Test')
provenance_audit = Transition(label='Provenance Audit')
expert_panel = Transition(label='Expert Panel')
token_minting = Transition(label='Token Minting')
legal_review = Transition(label='Legal Review')
compliance_check = Transition(label='Compliance Check')
insurance_valuation = Transition(label='Insurance Valuation')
risk_assessment = Transition(label='Risk Assessment')
packaging_prep = Transition(label='Packaging Prep')
climate_control = Transition(label='Climate Control')
transport_setup = Transition(label='Transport Setup')
final_approval = Transition(label='Final Approval')

skip = SilentTransition()

historical = OperatorPOWL(operator=Operator.XOR, children=[historical_review, skip])
chemical = OperatorPOWL(operator=Operator.XOR, children=[chemical_test, skip])
provenance = OperatorPOWL(operator=Operator.XOR, children=[provenance_audit, skip])
expert = OperatorPOWL(operator=Operator.XOR, children=[expert_panel, skip])
token = OperatorPOWL(operator=Operator.XOR, children=[token_minting, skip])
legal = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
compliance = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, skip])
insurance = OperatorPOWL(operator=Operator.XOR, children=[insurance_valuation, skip])
risk = OperatorPOWL(operator=Operator.XOR, children=[risk_assessment, skip])
packaging = OperatorPOWL(operator=Operator.XOR, children=[packaging_prep, skip])
climate = OperatorPOWL(operator=Operator.XOR, children=[climate_control, skip])
transport = OperatorPOWL(operator=Operator.XOR, children=[transport_setup, skip])
final = OperatorPOWL(operator=Operator.XOR, children=[final_approval, skip])

root = StrictPartialOrder(nodes=[artifact_intake, preliminary_check, historical, chemical, provenance, expert, token, legal, compliance, insurance, risk, packaging, climate, transport, final])
root.order.add_edge(artifact_intake, preliminary_check)
root.order.add_edge(preliminary_check, historical)
root.order.add_edge(preliminary_check, chemical)
root.order.add_edge(preliminary_check, provenance)
root.order.add_edge(preliminary_check, expert)
root.order.add_edge(historical, token)
root.order.add_edge(chemical, token)
root.order.add_edge(provenance, token)
root.order.add_edge(expert, token)
root.order.add_edge(token, legal)
root.order.add_edge(legal, compliance)
root.order.add_edge(compliance, insurance)
root.order.add_edge(insurance, risk)
root.order.add_edge(risk, packaging)
root.order.add_edge(packaging, climate)
root.order.add_edge(climate, transport)
root.order.add_edge(transport, final)