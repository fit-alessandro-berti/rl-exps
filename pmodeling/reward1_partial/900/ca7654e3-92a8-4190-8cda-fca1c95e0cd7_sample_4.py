import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# Define the transitions (activities) as objects
milk_sourcing = Transition(label='Milk Sourcing')
curd_preparation = Transition(label='Curd Preparation')
starter_culture = Transition(label='starter Culture')
temperature_control = Transition(label='Temperature Control')
pressing_cheese = Transition(label='Pressing Cheese')
salting_stage = Transition(label='Salting Stage')
aging_process = Transition(label='Aging Process')
microbial_test = Transition(label='Microbial Test')
quality_check = Transition(label='Quality Check')
eco_packaging = Transition(label='Eco Packaging')
label_printing = Transition(label='Label Printing')
inventory_audit = Transition(label='Inventory Audit')
order_processing = Transition(label='Order Processing')
retail_shipping = Transition(label='Retail Shipping')
customer_feedback = Transition(label='Customer Feedback')
recipe_update = Transition(label='Recipe Update')
market_analysis = Transition(label='Market Analysis')

# Define the operators and dependencies
xor1 = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, starter_culture])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[curd_preparation, temperature_control])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[pressing_cheese, salting_stage])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[aging_process, microbial_test])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[quality_check, eco_packaging])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[label_printing, inventory_audit])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[order_processing, retail_shipping])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, recipe_update])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[market_analysis, xor1])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[xor2, xor3])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[xor4, xor5])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[xor6, xor7])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[xor8, xor9])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[xor10, xor11])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[xor12, xor13])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[xor14, xor15])

# Create the root partial order
root = StrictPartialOrder(nodes=[xor16])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)
root.order.add_edge(xor15, xor16)