import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

gather_specs = Transition(label='Gather Specs')
adapt_design = Transition(label='Adapt Design')
source_parts = Transition(label='Source Parts')
component_test = Transition(label='Component Test')
assemble_frame = Transition(label='Assemble Frame')
install_firmware = Transition(label='Install Firmware')
calibrate_sensors = Transition(label='Calibrate Sensors')
stress_test = Transition(label='Stress Test')
flight_simulate = Transition(label='Flight Simulate')
validate_battery = Transition(label='Validate Battery')
check_accuracy = Transition(label='Check Accuracy')
package_units = Transition(label='Package Units')
create_manuals = Transition(label='Create Manuals')
ship_drones = Transition(label='Ship Drones')
collect_feedback = Transition(label='Collect Feedback')

skip = SilentTransition()
loop_source_parts = OperatorPOWL(operator=Operator.LOOP, children=[source_parts, component_test])
xor_assemble_frame = OperatorPOWL(operator=Operator.XOR, children=[assemble_frame, skip])
xor_install_firmware = OperatorPOWL(operator=Operator.XOR, children=[install_firmware, skip])
xor_calibrate_sensors = OperatorPOWL(operator=Operator.XOR, children=[calibrate_sensors, skip])
xor_stress_test = OperatorPOWL(operator=Operator.XOR, children=[stress_test, skip])
xor_flight_simulate = OperatorPOWL(operator=Operator.XOR, children=[flight_simulate, skip])
xor_validate_battery = OperatorPOWL(operator=Operator.XOR, children=[validate_battery, skip])
xor_check_accuracy = OperatorPOWL(operator=Operator.XOR, children=[check_accuracy, skip])
xor_package_units = OperatorPOWL(operator=Operator.XOR, children=[package_units, skip])
xor_create_manuals = OperatorPOWL(operator=Operator.XOR, children=[create_manuals, skip])
xor_ship_drones = OperatorPOWL(operator=Operator.XOR, children=[ship_drones, skip])
xor_collect_feedback = OperatorPOWL(operator=Operator.XOR, children=[collect_feedback, skip])

root = StrictPartialOrder(nodes=[gather_specs, adapt_design, loop_source_parts, xor_assemble_frame, xor_install_firmware, xor_calibrate_sensors, xor_stress_test, xor_flight_simulate, xor_validate_battery, xor_check_accuracy, xor_package_units, xor_create_manuals, xor_ship_drones, xor_collect_feedback])
root.order.add_edge(gather_specs, adapt_design)
root.order.add_edge(adapt_design, loop_source_parts)
root.order.add_edge(loop_source_parts, xor_assemble_frame)
root.order.add_edge(xor_assemble_frame, xor_install_firmware)
root.order.add_edge(xor_install_firmware, xor_calibrate_sensors)
root.order.add_edge(xor_calibrate_sensors, xor_stress_test)
root.order.add_edge(xor_stress_test, xor_flight_simulate)
root.order.add_edge(xor_flight_simulate, xor_validate_battery)
root.order.add_edge(xor_validate_battery, xor_check_accuracy)
root.order.add_edge(xor_check_accuracy, xor_package_units)
root.order.add_edge(xor_package_units, xor_create_manuals)
root.order.add_edge(xor_create_manuals, xor_ship_drones)
root.order.add_edge(xor_ship_drones, xor_collect_feedback)