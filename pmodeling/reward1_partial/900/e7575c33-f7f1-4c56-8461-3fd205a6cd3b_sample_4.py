import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_intake = Transition(label='Artifact Intake')
catalog_entry = Transition(label='Catalog Entry')
visual_inspect = Transition(label='Visual Inspect')
material_test = Transition(label='Material Test')
spectroscopy = Transition(label='Spectroscopy')
historical_check = Transition(label='Historical Check')
provenance_trace = Transition(label='Provenance Trace')
style_compare = Transition(label='Style Compare')
three_d_scanning = Transition(label='3D Scanning')
condition_assess = Transition(label='Condition Assess')
preservation_plan = Transition(label='Preservation Plan')
legal_review = Transition(label='Legal Review')
report_draft = Transition(label='Report Draft')
report_finalize = Transition(label='Report Finalize')
archive_data = Transition(label='Archive Data')
sale_prep = Transition(label='Sale Prep')

xor1 = OperatorPOWL(operator=Operator.XOR, children=[preservation_plan, sale_prep])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[legal_review, report_finalize])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[condition_assess, report_finalize])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[style_compare, report_finalize])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[provenance_trace, report_finalize])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[historical_check, report_finalize])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[spectroscopy, report_finalize])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[material_test, report_finalize])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[visual_inspect, report_finalize])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[catalog_entry, report_finalize])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[artifact_intake, report_finalize])

root = StrictPartialOrder(nodes=[artifact_intake, catalog_entry, visual_inspect, material_test, spectroscopy, historical_check, provenance_trace, style_compare, three_d_scanning, condition_assess, preservation_plan, legal_review, report_draft, report_finalize, archive_data, sale_prep])
root.order.add_edge(artifact_intake, catalog_entry)
root.order.add_edge(catalog_entry, visual_inspect)
root.order.add_edge(visual_inspect, material_test)
root.order.add_edge(material_test, spectroscopy)
root.order.add_edge(spectroscopy, historical_check)
root.order.add_edge(historical_check, provenance_trace)
root.order.add_edge(provenance_trace, style_compare)
root.order.add_edge(style_compare, three_d_scanning)
root.order.add_edge(three_d_scanning, condition_assess)
root.order.add_edge(condition_assess, preservation_plan)
root.order.add_edge(preservation_plan, xor1)
root.order.add_edge(legal_review, xor2)
root.order.add_edge(report_draft, xor3)
root.order.add_edge(report_finalize, xor4)
root.order.add_edge(archive_data, xor5)
root.order.add_edge(sale_prep, xor6)
root.order.add_edge(historic_check, xor7)
root.order.add_edge(spectroscopy, xor8)
root.order.add_edge(material_test, xor9)
root.order.add_edge(visual_inspect, xor10)
root.order.add_edge(catalog_entry, xor11)