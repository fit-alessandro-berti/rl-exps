from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

initial_assess = Transition(label='Initial Assess')
artifact_scan = Transition(label='Artifact Scan')
condition_map = Transition(label='Condition Map')
material_test = Transition(label='Material Test')
cleaning_phase = Transition(label='Cleaning Phase')
stability_check = Transition(label='Stability Check')
minor_repair = Transition(label='Minor Repair')
structural_reinforce = Transition(label='Structural Reinforce')
surface_restore = Transition(label='Surface Restore')
coating_apply = Transition(label='Coating Apply')
ethics_review = Transition(label='Ethics Review')
provenance_verify = Transition(label='Provenance Verify')
client_update = Transition(label='Client Update')
final_report = Transition(label='Final Report')
archive_store = Transition(label='Archive Store')

skip = SilentTransition()

initial_assess_to_artifact_scan = OperatorPOWL(operator=Operator.XOR, children=[initial_assess, artifact_scan])
artifact_scan_to_condition_map = OperatorPOWL(operator=Operator.XOR, children=[artifact_scan, condition_map])
condition_map_to_material_test = OperatorPOWL(operator=Operator.XOR, children=[condition_map, material_test])
material_test_to_cleaning_phase = OperatorPOWL(operator=Operator.XOR, children=[material_test, cleaning_phase])
cleaning_phase_to_stability_check = OperatorPOWL(operator=Operator.XOR, children=[cleaning_phase, stability_check])
stability_check_to_minor_repair = OperatorPOWL(operator=Operator.XOR, children=[stability_check, minor_repair])
minor_repair_to_structural_reinforce = OperatorPOWL(operator=Operator.XOR, children=[minor_repair, structural_reinforce])
structural_reinforce_to_surface_restore = OperatorPOWL(operator=Operator.XOR, children=[structural_reinforce, surface_restore])
surface_restore_to_coating_apply = OperatorPOWL(operator=Operator.XOR, children=[surface_restore, coating_apply])
coating_apply_to_ethics_review = OperatorPOWL(operator=Operator.XOR, children=[coating_apply, ethics_review])
ethics_review_to_provenance_verify = OperatorPOWL(operator=Operator.XOR, children=[ethics_review, provenance_verify])
provenance_verify_to_client_update = OperatorPOWL(operator=Operator.XOR, children=[provenance_verify, client_update])
client_update_to_final_report = OperatorPOWL(operator=Operator.XOR, children=[client_update, final_report])
final_report_to_archive_store = OperatorPOWL(operator=Operator.XOR, children=[final_report, archive_store])

root = StrictPartialOrder(nodes=[initial_assess_to_artifact_scan, artifact_scan_to_condition_map, condition_map_to_material_test, material_test_to_cleaning_phase, cleaning_phase_to_stability_check, stability_check_to_minor_repair, minor_repair_to_structural_reinforce, structural_reinforce_to_surface_restore, surface_restore_to_coating_apply, coating_apply_to_ethics_review, ethics_review_to_provenance_verify, provenance_verify_to_client_update, client_update_to_final_report, final_report_to_archive_store])
root.order.add_edge(initial_assess_to_artifact_scan, artifact_scan_to_condition_map)
root.order.add_edge(artifact_scan_to_condition_map, condition_map_to_material_test)
root.order.add_edge(condition_map_to_material_test, material_test_to_cleaning_phase)
root.order.add_edge(material_test_to_cleaning_phase, cleaning_phase_to_stability_check)
root.order.add_edge(cleaning_phase_to_stability_check, stability_check_to_minor_repair)
root.order.add_edge(stability_check_to_minor_repair, minor_repair_to_structural_reinforce)
root.order.add_edge(minor_repair_to_structural_reinforce, structural_reinforce_to_surface_restore)
root.order.add_edge(structural_reinforce_to_surface_restore, surface_restore_to_coating_apply)
root.order.add_edge(surface_restore_to_coating_apply, coating_apply_to_ethics_review)
root.order.add_edge(coating_apply_to_ethics_review, ethics_review_to_provenance_verify)
root.order.add_edge(ethics_review_to_provenance_verify, provenance_verify_to_client_update)
root.order.add_edge(provenance_verify_to_client_update, client_update_to_final_report)
root.order.add_edge(client_update_to_final_report, final_report_to_archive_store)

print(root)