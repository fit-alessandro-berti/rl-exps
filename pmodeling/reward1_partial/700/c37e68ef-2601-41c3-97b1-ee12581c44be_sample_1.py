import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
milk_sourcing = Transition(label='Milk Sourcing')
quality_testing = Transition(label='Quality Testing')
starter_prep = Transition(label='Starter Prep')
curd_cutting = Transition(label='Curd Cutting')
whey_draining = Transition(label='Whey Draining')
molding_press = Transition(label='Molding Press')
fermentation_control = Transition(label='Fermentation Control')
aging_setup = Transition(label='Aging Setup')
humidity_check = Transition(label='Humidity Check')
packaging_design = Transition(label='Packaging Design')
label_approval = Transition(label='Label Approval')
inventory_audit = Transition(label='Inventory Audit')
order_scheduling = Transition(label='Order Scheduling')
market_delivery = Transition(label='Market Delivery')
feedback_review = Transition(label='Feedback Review')
compliance_check = Transition(label='Compliance Check')
marketing_sync = Transition(label='Marketing Sync')

# Define the workflow
milk_sourcing_to_quality_testing = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, quality_testing])
quality_testing_to_starter_prep = OperatorPOWL(operator=Operator.XOR, children=[quality_testing, starter_prep])
starter_prep_to_curd_cutting = OperatorPOWL(operator=Operator.XOR, children=[starter_prep, curd_cutting])
curd_cutting_to_whey_draining = OperatorPOWL(operator=Operator.XOR, children=[curd_cutting, whey_draining])
whey_draining_to_molding_press = OperatorPOWL(operator=Operator.XOR, children=[whey_draining, molding_press])
molding_press_to_fermentation_control = OperatorPOWL(operator=Operator.XOR, children=[molding_press, fermentation_control])
fermentation_control_to_aging_setup = OperatorPOWL(operator=Operator.XOR, children=[fermentation_control, aging_setup])
aging_setup_to_humidity_check = OperatorPOWL(operator=Operator.XOR, children=[aging_setup, humidity_check])
humidity_check_to_packaging_design = OperatorPOWL(operator=Operator.XOR, children=[humidity_check, packaging_design])
packaging_design_to_label_approval = OperatorPOWL(operator=Operator.XOR, children=[packaging_design, label_approval])
label_approval_to_inventory_audit = OperatorPOWL(operator=Operator.XOR, children=[label_approval, inventory_audit])
inventory_audit_to_order_scheduling = OperatorPOWL(operator=Operator.XOR, children=[inventory_audit, order_scheduling])
order_scheduling_to_market_delivery = OperatorPOWL(operator=Operator.XOR, children=[order_scheduling, market_delivery])
market_delivery_to_feedback_review = OperatorPOWL(operator=Operator.XOR, children=[market_delivery, feedback_review])
feedback_review_to_compliance_check = OperatorPOWL(operator=Operator.XOR, children=[feedback_review, compliance_check])
compliance_check_to_marketing_sync = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, marketing_sync])

root = StrictPartialOrder(nodes=[milk_sourcing, quality_testing, starter_prep, curd_cutting, whey_draining, molding_press, fermentation_control, aging_setup, humidity_check, packaging_design, label_approval, inventory_audit, order_scheduling, market_delivery, feedback_review, compliance_check, marketing_sync])
root.order.add_edge(milk_sourcing, quality_testing)
root.order.add_edge(quality_testing, starter_prep)
root.order.add_edge(starter_prep, curd_cutting)
root.order.add_edge(curd_cutting, whey_draining)
root.order.add_edge(whey_draining, molding_press)
root.order.add_edge(molding_press, fermentation_control)
root.order.add_edge(fermentation_control, aging_setup)
root.order.add_edge(aging_setup, humidity_check)
root.order.add_edge(humidity_check, packaging_design)
root.order.add_edge(packaging_design, label_approval)
root.order.add_edge(label_approval, inventory_audit)
root.order.add_edge(inventory_audit, order_scheduling)
root.order.add_edge(order_scheduling, market_delivery)
root.order.add_edge(market_delivery, feedback_review)
root.order.add_edge(feedback_review, compliance_check)
root.order.add_edge(compliance_check, marketing_sync)