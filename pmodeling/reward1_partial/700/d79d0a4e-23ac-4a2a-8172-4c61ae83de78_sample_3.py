import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions
spec_review = Transition(label='Spec Review')
component_pick = Transition(label='Component Pick')
frame_build = Transition(label='Frame Build')
motor_mount = Transition(label='Motor Mount')
sensor_fit = Transition(label='Sensor Fit')
wiring_setup = Transition(label='Wiring Setup')
software_load = Transition(label='Software Load')
calibration_test = Transition(label='Calibration Test')
stress_check = Transition(label='Stress Check')
firmware_flash = Transition(label='Firmware Flash')
feedback_loop = Transition(label='Feedback Loop')
package_prep = Transition(label='Package Prep')
doc_compile = Transition(label='Doc Compile')
ship_arrange = Transition(label='Ship Arrange')
remote_setup = Transition(label='Remote Setup')

# Define the loops and choices
spec_review_loop = OperatorPOWL(operator=Operator.LOOP, children=[spec_review])
component_pick_loop = OperatorPOWL(operator=Operator.LOOP, children=[component_pick])
frame_build_loop = OperatorPOWL(operator=Operator.LOOP, children=[frame_build])
motor_mount_loop = OperatorPOWL(operator=Operator.LOOP, children=[motor_mount])
sensor_fit_loop = OperatorPOWL(operator=Operator.LOOP, children=[sensor_fit])
wiring_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[wiring_setup])
software_load_loop = OperatorPOWL(operator=Operator.LOOP, children=[software_load])
calibration_test_loop = OperatorPOWL(operator=Operator.LOOP, children=[calibration_test])
stress_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[stress_check])
firmware_flash_loop = OperatorPOWL(operator=Operator.LOOP, children=[firmware_flash])
feedback_loop_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop])
package_prep_loop = OperatorPOWL(operator=Operator.LOOP, children=[package_prep])
doc_compile_loop = OperatorPOWL(operator=Operator.LOOP, children=[doc_compile])
ship_arrange_loop = OperatorPOWL(operator=Operator.LOOP, children=[ship_arrange])
remote_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[remote_setup])

# Define the final POWL model
root = StrictPartialOrder(nodes=[spec_review_loop, component_pick_loop, frame_build_loop, motor_mount_loop, sensor_fit_loop, wiring_setup_loop, software_load_loop, calibration_test_loop, stress_check_loop, firmware_flash_loop, feedback_loop_loop, package_prep_loop, doc_compile_loop, ship_arrange_loop, remote_setup_loop])
root.order.add_edge(spec_review_loop, component_pick_loop)
root.order.add_edge(component_pick_loop, frame_build_loop)
root.order.add_edge(frame_build_loop, motor_mount_loop)
root.order.add_edge(motor_mount_loop, sensor_fit_loop)
root.order.add_edge(sensor_fit_loop, wiring_setup_loop)
root.order.add_edge(wiring_setup_loop, software_load_loop)
root.order.add_edge(software_load_loop, calibration_test_loop)
root.order.add_edge(calibration_test_loop, stress_check_loop)
root.order.add_edge(stress_check_loop, firmware_flash_loop)
root.order.add_edge(firmware_flash_loop, feedback_loop_loop)
root.order.add_edge(feedback_loop_loop, package_prep_loop)
root.order.add_edge(package_prep_loop, doc_compile_loop)
root.order.add_edge(doc_compile_loop, ship_arrange_loop)
root.order.add_edge(ship_arrange_loop, remote_setup_loop)