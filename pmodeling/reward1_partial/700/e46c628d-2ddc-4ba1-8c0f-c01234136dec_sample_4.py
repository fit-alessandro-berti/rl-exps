from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
threat_assess = Transition(label='Threat Assess')
alert_dispatch = Transition(label='Alert Dispatch')
resource_check = Transition(label='Resource Check')
team_mobilize = Transition(label='Team Mobilize')
command_setup = Transition(label='Command Setup')
intel_gather = Transition(label='Intel Gather')
risk_evaluate = Transition(label='Risk Evaluate')
priority_set = Transition(label='Priority Set')
field_deploy = Transition(label='Field Deploy')
comm_sync = Transition(label='Comm Sync')
public_update = Transition(label='Public Update')
supply_manage = Transition(label='Supply Manage')
safety_monitor = Transition(label='Safety Monitor')
incident_log = Transition(label='Incident Log')
recovery_plan = Transition(label='Recovery Plan')
debrief_team = Transition(label='Debrief Team')
data_archive = Transition(label='Data Archive')

# Define control flow
xor1 = OperatorPOWL(operator=Operator.XOR, children=[resource_check, threat_assess])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[command_setup, intel_gather])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[priority_set, risk_evaluate])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[field_deploy, comm_sync])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[public_update, supply_manage])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[safety_monitor, incident_log])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[recovery_plan, debrief_team])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[data_archive, alert_dispatch])
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[team_mobilize, xor1])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor2, xor3])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[xor4, xor5])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[xor6, xor7])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor8, loop2])
root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5])
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)
root.order.add_edge(xor1, loop1)
root.order.add_edge(xor2, loop2)
root.order.add_edge(xor3, loop3)
root.order.add_edge(xor4, loop4)
root.order.add_edge(xor5, loop5)