from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
client_meet = Transition(label='Client Meet')
vision_capture = Transition(label='Vision Capture')
concept_draft = Transition(label='Concept Draft')
feedback_loop = Transition(label='Feedback Loop')
material_sourcing = Transition(label='Material Sourcing')
vendor_selection = Transition(label='Vendor Selection')
artisan_assign = Transition(label='Artisan Assign')
prototype_build = Transition(label='Prototype Build')
quality_review = Transition(label='Quality Review')
technical_check = Transition(label='Technical Check')
final_approval = Transition(label='Final Approval')
packaging_prep = Transition(label='Packaging Prep')
logistics_plan = Transition(label='Logistics Plan')
secure_transport = Transition(label='Secure Transport')
installation_set = Transition(label='Installation Set')
client_support = Transition(label='Client Support')
archival_record = Transition(label='Archival Record')

# Define the workflow
xor = OperatorPOWL(operator=Operator.XOR, children=[vendor_selection, vendor_selection])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[artisan_assign, artisan_assign])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[prototype_build, prototype_build])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[quality_review, quality_review])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[technical_check, technical_check])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[final_approval, final_approval])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[packaging_prep, packaging_prep])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, logistics_plan])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[secure_transport, secure_transport])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[installation_set, installation_set])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[client_support, client_support])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[archival_record, archival_record])

root = StrictPartialOrder(nodes=[client_meet, vision_capture, concept_draft, feedback_loop, material_sourcing, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12])
root.order.add_edge(client_meet, vision_capture)
root.order.add_edge(vision_capture, concept_draft)
root.order.add_edge(concept_draft, feedback_loop)
root.order.add_edge(feedback_loop, material_sourcing)
root.order.add_edge(material_sourcing, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, client_support)
root.order.add_edge(client_support, archival_record)

print(root)