import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
milk_sourcing = Transition(label='Milk Sourcing')
culture_blending = Transition(label='Culture Blending')
pasteurize = Transition(label='Milk Pasteurize')
cutting = Transition(label='Curd Cutting')
drain = Transition(label='Whey Drain')
inoculate = Transition(label='Mold Inoculate')
press = Transition(label='Press Cheese')
brine = Transition(label='Salt Brine')
monitor = Transition(label='Age Monitor')
test = Transition(label='Quality Test')
pack = Transition(label='Packaging Prep')
label = Transition(label='Label Design')
allocate = Transition(label='Order Allocation')
transport = Transition(label='Transport Arrange')
sync = Transition(label='Retail Sync')
review = Transition(label='Customer Review')
analyze = Transition(label='Feedback Analyze')

# Define the control flow
choice1 = OperatorPOWL(operator=Operator.XOR, children=[pasteurize, milk_sourcing])
choice2 = OperatorPOWL(operator=Operator.XOR, children=[cutting, culture_blending])
choice3 = OperatorPOWL(operator=Operator.XOR, children=[drain, choice2])
choice4 = OperatorPOWL(operator=Operator.XOR, children=[inoculate, choice3])
choice5 = OperatorPOWL(operator=Operator.XOR, children=[press, choice4])
choice6 = OperatorPOWL(operator=Operator.XOR, children=[brine, choice5])
choice7 = OperatorPOWL(operator=Operator.XOR, children=[monitor, choice6])
choice8 = OperatorPOWL(operator=Operator.XOR, children=[test, choice7])
choice9 = OperatorPOWL(operator=Operator.XOR, children=[pack, choice8])
choice10 = OperatorPOWL(operator=Operator.XOR, children=[label, choice9])
choice11 = OperatorPOWL(operator=Operator.XOR, children=[allocate, choice10])
choice12 = OperatorPOWL(operator=Operator.XOR, children=[transport, choice11])
choice13 = OperatorPOWL(operator=Operator.XOR, children=[sync, choice12])
choice14 = OperatorPOWL(operator=Operator.XOR, children=[review, choice13])
choice15 = OperatorPOWL(operator=Operator.XOR, children=[analyze, choice14])

# Create the root model
root = StrictPartialOrder(nodes=[choice1, choice15])
root.order.add_edge(choice1, choice2)
root.order.add_edge(choice2, choice3)
root.order.add_edge(choice3, choice4)
root.order.add_edge(choice4, choice5)
root.order.add_edge(choice5, choice6)
root.order.add_edge(choice6, choice7)
root.order.add_edge(choice7, choice8)
root.order.add_edge(choice8, choice9)
root.order.add_edge(choice9, choice10)
root.order.add_edge(choice10, choice11)
root.order.add_edge(choice11, choice12)
root.order.add_edge(choice12, choice13)
root.order.add_edge(choice13, choice14)
root.order.add_edge(choice14, choice15)