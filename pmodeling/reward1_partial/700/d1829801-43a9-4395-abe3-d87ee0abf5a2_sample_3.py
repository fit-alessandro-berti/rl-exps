import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_intake = Transition(label='Artifact Intake')
visual_inspection = Transition(label='Visual Inspection')
material_testing = Transition(label='Material Testing')
radiocarbon_dating = Transition(label='Radiocarbon Dating')
provenance_check = Transition(label='Provenance Check')
archive_research = Transition(label='Archive Research')
expert_review = Transition(label='Expert Review')
style_analysis = Transition(label='Style Analysis')
craftsmanship_eval = Transition(label='Craftsmanship Eval')
condition_check = Transition(label='Condition Check')
restoration_plan = Transition(label='Restoration Plan')
forger_risk = Transition(label='Forgery Risk')
legal_review = Transition(label='Legal Review')
report_drafting = Transition(label='Report Drafting')
catalog_entry = Transition(label='Catalog Entry')

skip = SilentTransition()

artifact_intake_to_visual_inspection = OperatorPOWL(operator=Operator.XOR, children=[artifact_intake, skip])
visual_inspection_to_material_testing = OperatorPOWL(operator=Operator.XOR, children=[visual_inspection, skip])
material_testing_to_radiocarbon_dating = OperatorPOWL(operator=Operator.XOR, children=[material_testing, skip])
radiocarbon_dating_to_provenance_check = OperatorPOWL(operator=Operator.XOR, children=[radiocarbon_dating, skip])
provenance_check_to_archive_research = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, skip])
archive_research_to_expert_review = OperatorPOWL(operator=Operator.XOR, children=[archive_research, skip])
expert_review_to_style_analysis = OperatorPOWL(operator=Operator.XOR, children=[expert_review, skip])
style_analysis_to_craftsmanship_eval = OperatorPOWL(operator=Operator.XOR, children=[style_analysis, skip])
craftsmanship_eval_to_condition_check = OperatorPOWL(operator=Operator.XOR, children=[craftsmanship_eval, skip])
condition_check_to_restoration_plan = OperatorPOWL(operator=Operator.XOR, children=[condition_check, skip])
restoration_plan_to_forger_risk = OperatorPOWL(operator=Operator.XOR, children=[restoration_plan, skip])
forger_risk_to_legal_review = OperatorPOWL(operator=Operator.XOR, children=[forger_risk, skip])
legal_review_to_report_drafting = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
report_drafting_to_catalog_entry = OperatorPOWL(operator=Operator.XOR, children=[report_drafting, skip])

root = StrictPartialOrder(nodes=[artifact_intake_to_visual_inspection, visual_inspection_to_material_testing, material_testing_to_radiocarbon_dating, radiocarbon_dating_to_provenance_check, provenance_check_to_archive_research, archive_research_to_expert_review, expert_review_to_style_analysis, style_analysis_to_craftsmanship_eval, craftsmanship_eval_to_condition_check, condition_check_to_restoration_plan, restoration_plan_to_forger_risk, forger_risk_to_legal_review, legal_review_to_report_drafting, report_drafting_to_catalog_entry])
root.order.add_edge(artifact_intake_to_visual_inspection, visual_inspection_to_material_testing)
root.order.add_edge(visual_inspection_to_material_testing, material_testing_to_radiocarbon_dating)
root.order.add_edge(material_testing_to_radiocarbon_dating, radiocarbon_dating_to_provenance_check)
root.order.add_edge(radiocarbon_dating_to_provenance_check, provenance_check_to_archive_research)
root.order.add_edge(provenance_check_to_archive_research, archive_research_to_expert_review)
root.order.add_edge(archive_research_to_expert_review, expert_review_to_style_analysis)
root.order.add_edge(expert_review_to_style_analysis, style_analysis_to_craftsmanship_eval)
root.order.add_edge(style_analysis_to_craftsmanship_eval, craftsmanship_eval_to_condition_check)
root.order.add_edge(craftsmanship_eval_to_condition_check, condition_check_to_restoration_plan)
root.order.add_edge(condition_check_to_restoration_plan, restoration_plan_to_forger_risk)
root.order.add_edge(restoration_plan_to_forger_risk, forger_risk_to_legal_review)
root.order.add_edge(forger_risk_to_legal_review, legal_review_to_report_drafting)
root.order.add_edge(legal_review_to_report_drafting, report_drafting_to_catalog_entry)