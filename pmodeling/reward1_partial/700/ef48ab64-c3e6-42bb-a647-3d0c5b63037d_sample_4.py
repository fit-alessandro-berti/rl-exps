import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_select = Transition(label='Site Select')
env_assess = Transition(label='Env Assess')
design_modules = Transition(label='Design Modules')
hydroponics_setup = Transition(label='Hydroponics Setup')
software_dev = Transition(label='Software Dev')
seed_choose = Transition(label='Seed Choose')
led_install = Transition(label='LED Install')
train_staff = Transition(label='Train Staff')
compliance_check = Transition(label='Compliance Check')
engage_community = Transition(label='Engage Community')
plant_crops = Transition(label='Plant Crops')
monitor_growth = Transition(label='Monitor Growth')
optimize_yields = Transition(label='Optimize Yields')
waste_manage = Transition(label='Waste Manage')
energy_audit = Transition(label='Energy Audit')
water_recycle = Transition(label='Water Recycle')

skip = SilentTransition()

loop_env_assess = OperatorPOWL(operator=Operator.LOOP, children=[env_assess])
xor_design_modules = OperatorPOWL(operator=Operator.XOR, children=[design_modules, skip])
loop_hydroponics_setup = OperatorPOWL(operator=Operator.LOOP, children=[hydroponics_setup])
xor_software_dev = OperatorPOWL(operator=Operator.XOR, children=[software_dev, skip])
loop_seed_choose = OperatorPOWL(operator=Operator.LOOP, children=[seed_choose])
xor_led_install = OperatorPOWL(operator=Operator.XOR, children=[led_install, skip])
loop_train_staff = OperatorPOWL(operator=Operator.LOOP, children=[train_staff])
xor_compliance_check = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, skip])
loop_engage_community = OperatorPOWL(operator=Operator.LOOP, children=[engage_community])
xor_plant_crops = OperatorPOWL(operator=Operator.XOR, children=[plant_crops, skip])
loop_monitor_growth = OperatorPOWL(operator=Operator.LOOP, children=[monitor_growth])
xor_optimize_yields = OperatorPOWL(operator=Operator.XOR, children=[optimize_yields, skip])
loop_waste_manage = OperatorPOWL(operator=Operator.LOOP, children=[waste_manage])
xor_energy_audit = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
loop_water_recycle = OperatorPOWL(operator=Operator.LOOP, children=[water_recycle])

root = StrictPartialOrder(nodes=[site_select, loop_env_assess, xor_design_modules, loop_hydroponics_setup, xor_software_dev, loop_seed_choose, xor_led_install, loop_train_staff, xor_compliance_check, loop_engage_community, xor_plant_crops, loop_monitor_growth, xor_optimize_yields, loop_waste_manage, xor_energy_audit, loop_water_recycle])
root.order.add_edge(site_select, loop_env_assess)
root.order.add_edge(loop_env_assess, xor_design_modules)
root.order.add_edge(xor_design_modules, loop_hydroponics_setup)
root.order.add_edge(loop_hydroponics_setup, xor_software_dev)
root.order.add_edge(xor_software_dev, loop_seed_choose)
root.order.add_edge(loop_seed_choose, xor_led_install)
root.order.add_edge(xor_led_install, loop_train_staff)
root.order.add_edge(loop_train_staff, xor_compliance_check)
root.order.add_edge(xor_compliance_check, loop_engage_community)
root.order.add_edge(loop_engage_community, xor_plant_crops)
root.order.add_edge(xor_plant_crops, loop_monitor_growth)
root.order.add_edge(loop_monitor_growth, xor_optimize_yields)
root.order.add_edge(xor_optimize_yields, loop_waste_manage)
root.order.add_edge(loop_waste_manage, xor_energy_audit)
root.order.add_edge(xor_energy_audit, loop_water_recycle)