import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
seed_sourcing = Transition(label='Seed Sourcing')
farm_scheduling = Transition(label='Farm Scheduling')
sensor_monitoring = Transition(label='Sensor Monitoring')
nutrient_cycling = Transition(label='Nutrient Cycling')
crop_forecasting = Transition(label='Crop Forecasting')
pest_inspection = Transition(label='Pest Inspection')
harvest_timing = Transition(label='Harvest Timing')
quality_check = Transition(label='Quality Check')
eco_packaging = Transition(label='Eco Packaging')
storage_allocation = Transition(label='Storage Allocation')
order_processing = Transition(label='Order Processing')
route_planning = Transition(label='Route Planning')
vehicle_dispatch = Transition(label='Vehicle Dispatch')
customer_feedback = Transition(label='Customer Feedback')
demand_analysis = Transition(label='Demand Analysis')
waste_management = Transition(label='Waste Management')
community_outreach = Transition(label='Community Outreach')

# Define loops and choices for the process
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[pest_inspection, quality_check])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[crop_forecasting, harvest_timing])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[sensor_monitoring, nutrient_cycling])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[eco_packaging, storage_allocation])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[order_processing, route_planning])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[vehicle_dispatch, customer_feedback])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[demand_analysis, waste_management])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[community_outreach, seed_sourcing])

# Define the root node as a strict partial order
root = StrictPartialOrder(nodes=[seed_sourcing, farm_scheduling, loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8])

# Define the partial order relationships
root.order.add_edge(seed_sourcing, farm_scheduling)
root.order.add_edge(farm_scheduling, loop1)
root.order.add_edge(farm_scheduling, loop2)
root.order.add_edge(farm_scheduling, loop3)
root.order.add_edge(farm_scheduling, loop4)
root.order.add_edge(farm_scheduling, loop5)
root.order.add_edge(farm_scheduling, loop6)
root.order.add_edge(farm_scheduling, loop7)
root.order.add_edge(farm_scheduling, loop8)
root.order.add_edge(loop1, loop2)
root.order.add_edge(loop1, loop3)
root.order.add_edge(loop1, loop4)
root.order.add_edge(loop1, loop5)
root.order.add_edge(loop1, loop6)
root.order.add_edge(loop1, loop7)
root.order.add_edge(loop1, loop8)
root.order.add_edge(loop2, loop3)
root.order.add_edge(loop2, loop4)
root.order.add_edge(loop2, loop5)
root.order.add_edge(loop2, loop6)
root.order.add_edge(loop2, loop7)
root.order.add_edge(loop2, loop8)
root.order.add_edge(loop3, loop4)
root.order.add_edge(loop3, loop5)
root.order.add_edge(loop3, loop6)
root.order.add_edge(loop3, loop7)
root.order.add_edge(loop3, loop8)
root.order.add_edge(loop4, loop5)
root.order.add_edge(loop4, loop6)
root.order.add_edge(loop4, loop7)
root.order.add_edge(loop4, loop8)
root.order.add_edge(loop5, loop6)
root.order.add_edge(loop5, loop7)
root.order.add_edge(loop5, loop8)
root.order.add_edge(loop6, loop7)
root.order.add_edge(loop6, loop8)
root.order.add_edge(loop7, loop8)
root.order.add_edge(loop8, seed_sourcing)

# Print the root node for verification
print(root)