import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

client_consult = Transition(label='Client Consult')
payload_assess = Transition(label='Payload Assess')
drone_configure = Transition(label='Drone Configure')
regulation_check = Transition(label='Regulation Check')
flight_simulate = Transition(label='Flight Simulate')
route_optimize = Transition(label='Route Optimize')
package_secure = Transition(label='Package Secure')
pre_flight_inspect = Transition(label='Pre-Flight Inspect')
weather_monitor = Transition(label='Weather Monitor')
launch_drone = Transition(label='Launch Drone')
flight_track = Transition(label='Flight Track')
delivery_confirm = Transition(label='Delivery Confirm')
data_analyze = Transition(label='Data Analyze')
feedback_collect = Transition(label='Feedback Collect')
warranty_register = Transition(label='Warranty Register')
issue_resolve = Transition(label='Issue Resolve')
package_return = Transition(label='Package Return')

skip = SilentTransition()

# Define the workflow
xor1 = OperatorPOWL(operator=Operator.XOR, children=[regulation_check, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[flight_simulate, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[route_optimize, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[package_secure, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[pre_flight_inspect, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[weather_monitor, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[launch_drone, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[flight_track, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[delivery_confirm, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[data_analyze, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[feedback_collect, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[warranty_register, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[issue_resolve, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[package_return, skip])

root = StrictPartialOrder(nodes=[client_consult, payload_assess, drone_configure, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14])
root.order.add_edge(client_consult, payload_assess)
root.order.add_edge(payload_assess, drone_configure)
root.order.add_edge(drone_configure, xor1)
root.order.add_edge(xor1, regulation_check)
root.order.add_edge(regulation_check, xor2)
root.order.add_edge(xor2, flight_simulate)
root.order.add_edge(flight_simulate, xor3)
root.order.add_edge(xor3, route_optimize)
root.order.add_edge(route_optimize, xor4)
root.order.add_edge(xor4, package_secure)
root.order.add_edge(package_secure, xor5)
root.order.add_edge(xor5, pre_flight_inspect)
root.order.add_edge(pre_flight_inspect, xor6)
root.order.add_edge(xor6, weather_monitor)
root.order.add_edge(weather_monitor, xor7)
root.order.add_edge(xor7, launch_drone)
root.order.add_edge(launch_drone, xor8)
root.order.add_edge(xor8, flight_track)
root.order.add_edge(flight_track, xor9)
root.order.add_edge(xor9, delivery_confirm)
root.order.add_edge(delivery_confirm, xor10)
root.order.add_edge(xor10, data_analyze)
root.order.add_edge(data_analyze, xor11)
root.order.add_edge(xor11, feedback_collect)
root.order.add_edge(feedback_collect, xor12)
root.order.add_edge(xor12, warranty_register)
root.order.add_edge(warranty_register, xor13)
root.order.add_edge(xor13, issue_resolve)
root.order.add_edge(issue_resolve, xor14)
root.order.add_edge(xor14, package_return)