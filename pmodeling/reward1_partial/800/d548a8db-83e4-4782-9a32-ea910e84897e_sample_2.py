import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
seed_selection = Transition(label='Seed Selection')
nutrient_setup = Transition(label='Nutrient Setup')
growth_monitoring = Transition(label='Growth Monitoring')
climate_adjust = Transition(label='Climate Adjust')
pest_control = Transition(label='Pest Control')
water_recirculate = Transition(label='Water Recirculate')
light_calibration = Transition(label='Light Calibration')
robotic_harvest = Transition(label='Robotic Harvest')
quality_inspect = Transition(label='Quality Inspect')
waste_process = Transition(label='Waste Process')
energy_reuse = Transition(label='Energy Reuse')
inventory_update = Transition(label='Inventory Update')
demand_forecast = Transition(label='Demand Forecast')
order_dispatch = Transition(label='Order Dispatch')
community_event = Transition(label='Community Event')
feedback_collect = Transition(label='Feedback Collect')
data_analyze = Transition(label='Data Analyze')

# Define silent transitions
skip = SilentTransition()

# Define partial order nodes and their relationships
loop_nutrient_setup = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_setup])
loop_growth_monitoring = OperatorPOWL(operator=Operator.LOOP, children=[growth_monitoring])
loop_climate_adjust = OperatorPOWL(operator=Operator.LOOP, children=[climate_adjust])
loop_pest_control = OperatorPOWL(operator=Operator.LOOP, children=[pest_control])
loop_water_recirculate = OperatorPOWL(operator=Operator.LOOP, children=[water_recirculate])
loop_light_calibration = OperatorPOWL(operator=Operator.LOOP, children=[light_calibration])
loop_robotic_harvest = OperatorPOWL(operator=Operator.LOOP, children=[robotic_harvest])
loop_quality_inspect = OperatorPOWL(operator=Operator.LOOP, children=[quality_inspect])
loop_waste_process = OperatorPOWL(operator=Operator.LOOP, children=[waste_process])
loop_energy_reuse = OperatorPOWL(operator=Operator.LOOP, children=[energy_reuse])
loop_inventory_update = OperatorPOWL(operator=Operator.LOOP, children=[inventory_update])
loop_demand_forecast = OperatorPOWL(operator=Operator.LOOP, children=[demand_forecast])
loop_order_dispatch = OperatorPOWL(operator=Operator.LOOP, children=[order_dispatch])
loop_community_event = OperatorPOWL(operator=Operator.LOOP, children=[community_event])
loop_feedback_collect = OperatorPOWL(operator=Operator.LOOP, children=[feedback_collect])
loop_data_analyze = OperatorPOWL(operator=Operator.LOOP, children=[data_analyze])

xor_inventory_update = OperatorPOWL(operator=Operator.XOR, children=[inventory_update, skip])
xor_demand_forecast = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, skip])
xor_order_dispatch = OperatorPOWL(operator=Operator.XOR, children=[order_dispatch, skip])
xor_community_event = OperatorPOWL(operator=Operator.XOR, children=[community_event, skip])
xor_feedback_collect = OperatorPOWL(operator=Operator.XOR, children=[feedback_collect, skip])
xor_data_analyze = OperatorPOWL(operator=Operator.XOR, children=[data_analyze, skip])

root = StrictPartialOrder(nodes=[loop_nutrient_setup, loop_growth_monitoring, loop_climate_adjust, loop_pest_control, loop_water_recirculate, loop_light_calibration, loop_robotic_harvest, loop_quality_inspect, loop_waste_process, loop_energy_reuse, xor_inventory_update, xor_demand_forecast, xor_order_dispatch, xor_community_event, xor_feedback_collect, xor_data_analyze])
root.order.add_edge(loop_nutrient_setup, loop_growth_monitoring)
root.order.add_edge(loop_growth_monitoring, loop_climate_adjust)
root.order.add_edge(loop_climate_adjust, loop_pest_control)
root.order.add_edge(loop_pest_control, loop_water_recirculate)
root.order.add_edge(loop_water_recirculate, loop_light_calibration)
root.order.add_edge(loop_light_calibration, loop_robotic_harvest)
root.order.add_edge(loop_robotic_harvest, loop_quality_inspect)
root.order.add_edge(loop_quality_inspect, loop_waste_process)
root.order.add_edge(loop_waste_process, loop_energy_reuse)
root.order.add_edge(loop_energy_reuse, xor_inventory_update)
root.order.add_edge(loop_inventory_update, xor_demand_forecast)
root.order.add_edge(loop_demand_forecast, xor_order_dispatch)
root.order.add_edge(loop_order_dispatch, xor_community_event)
root.order.add_edge(loop_community_event, xor_feedback_collect)
root.order.add_edge(loop_feedback_collect, xor_data_analyze)

print(root)