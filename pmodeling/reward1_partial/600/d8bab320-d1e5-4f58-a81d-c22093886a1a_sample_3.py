import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

milk_sourcing = Transition(label='Milk Sourcing')
culture_selection = Transition(label='Culture Selection')
milk_pasturize = Transition(label='Milk Pasteurize')
curd_formation = Transition(label='Curd Formation')
whey_separation = Transition(label='Whey Separation')
mold_inoculate = Transition(label='Mold Inoculate')
cheese_pressing = Transition(label='Cheese Pressing')
aging_setup = Transition(label='Aging Setup')
humidity_control = Transition(label='Humidity Control')
flavor_testing = Transition(label='Flavor Testing')
packaging_design = Transition(label='Packaging Design')
label_approval = Transition(label='Label Approval')
order_forecast = Transition(label='Order Forecast')
regulation_audit = Transition(label='Regulation Audit')
waste_recycling = Transition(label='Waste Recycling')
market_delivery = Transition(label='Market Delivery')
customer_feedback = Transition(label='Customer Feedback')

skip = SilentTransition()

milk_processing = OperatorPOWL(operator=Operator.XOR, children=[culture_selection, skip])
curd_processing = OperatorPOWL(operator=Operator.XOR, children=[milk_pasturize, skip])
whey_processing = OperatorPOWL(operator=Operator.XOR, children=[curd_formation, skip])
mold_processing = OperatorPOWL(operator=Operator.XOR, children=[whey_separation, skip])
cheese_pressing = OperatorPOWL(operator=Operator.XOR, children=[mold_inoculate, skip])
aging_setup = OperatorPOWL(operator=Operator.XOR, children=[cheese_pressing, skip])
humidity_control = OperatorPOWL(operator=Operator.XOR, children=[aging_setup, skip])
flavor_testing = OperatorPOWL(operator=Operator.XOR, children=[humidity_control, skip])
packaging_design = OperatorPOWL(operator=Operator.XOR, children=[flavor_testing, skip])
label_approval = OperatorPOWL(operator=Operator.XOR, children=[packaging_design, skip])
order_forecast = OperatorPOWL(operator=Operator.XOR, children=[label_approval, skip])
regulation_audit = OperatorPOWL(operator=Operator.XOR, children=[order_forecast, skip])
waste_recycling = OperatorPOWL(operator=Operator.XOR, children=[regulation_audit, skip])
market_delivery = OperatorPOWL(operator=Operator.XOR, children=[waste_recycling, skip])
customer_feedback = OperatorPOWL(operator=Operator.XOR, children=[market_delivery, skip])

root = StrictPartialOrder(nodes=[milk_sourcing, milk_processing, curd_processing, whey_processing, mold_processing, cheese_pressing, aging_setup, humidity_control, flavor_testing, packaging_design, label_approval, order_forecast, regulation_audit, waste_recycling, market_delivery, customer_feedback])
root.order.add_edge(milk_sourcing, milk_processing)
root.order.add_edge(milk_processing, curd_processing)
root.order.add_edge(curd_processing, whey_processing)
root.order.add_edge(whey_processing, mold_processing)
root.order.add_edge(mold_processing, cheese_pressing)
root.order.add_edge(cheese_pressing, aging_setup)
root.order.add_edge(aging_setup, humidity_control)
root.order.add_edge(humidity_control, flavor_testing)
root.order.add_edge(flavor_testing, packaging_design)
root.order.add_edge(packaging_design, label_approval)
root.order.add_edge(label_approval, order_forecast)
root.order.add_edge(order_forecast, regulation_audit)
root.order.add_edge(regulation_audit, waste_recycling)
root.order.add_edge(waste_recycling, market_delivery)
root.order.add_edge(market_delivery, customer_feedback)