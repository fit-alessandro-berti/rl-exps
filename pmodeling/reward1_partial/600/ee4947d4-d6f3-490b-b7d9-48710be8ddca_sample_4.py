import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define each activity as a Transition in the POWL model
data_capture = Transition(label='Data Capture')
fingerprint_art = Transition(label='Fingerprint Art')
record_input = Transition(label='Record Input')
historical_check = Transition(label='Historical Check')
stakeholder_vote = Transition(label='Stakeholder Vote')
consensus_validate = Transition(label='Consensus Validate')
timestamp_entry = Transition(label='Timestamp Entry')
ledger_update = Transition(label='Ledger Update')
ai_patternscan = Transition(label='AI PatternScan')
flag_anomaly = Transition(label='Flag Anomaly')
dispute_submit = Transition(label='Dispute Submit')
panel_review = Transition(label='Panel Review')
arbitrate_case = Transition(label='Arbitrate Case')
trade_monitor = Transition(label='Trade Monitor')
feedback_loop = Transition(label='Feedback Loop')
insurance_sync = Transition(label='Insurance Sync')
collector_notify = Transition(label='Collector Notify')

# Define the control flow operators (choice, loop) and connect them appropriately
choice1 = OperatorPOWL(operator=Operator.XOR, children=[historical_check, stakeholder_vote])
choice2 = OperatorPOWL(operator=Operator.XOR, children=[consensus_validate, timestamp_entry])
choice3 = OperatorPOWL(operator=Operator.XOR, children=[ledger_update, ai_patternscan])
choice4 = OperatorPOWL(operator=Operator.XOR, children=[flag_anomaly, dispute_submit])
choice5 = OperatorPOWL(operator=Operator.XOR, children=[panel_review, arbitrate_case])
choice6 = OperatorPOWL(operator=Operator.XOR, children=[trade_monitor, feedback_loop])
choice7 = OperatorPOWL(operator=Operator.XOR, children=[insurance_sync, collector_notify])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[choice1])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[choice2])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[choice3])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[choice4])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[choice5])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[choice6])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[choice7])

root = StrictPartialOrder(nodes=[data_capture, fingerprint_art, record_input, loop1, loop2, loop3, loop4, loop5, loop6, loop7])
root.order.add_edge(data_capture, fingerprint_art)
root.order.add_edge(fingerprint_art, record_input)
root.order.add_edge(record_input, loop1)
root.order.add_edge(loop1, loop2)
root.order.add_edge(loop2, loop3)
root.order.add_edge(loop3, loop4)
root.order.add_edge(loop4, loop5)
root.order.add_edge(loop5, loop6)
root.order.add_edge(loop6, loop7)
root.order.add_edge(loop7, data_capture)