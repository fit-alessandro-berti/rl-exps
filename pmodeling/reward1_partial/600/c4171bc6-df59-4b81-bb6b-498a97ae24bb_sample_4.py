import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions
milk_sourcing = Transition(label='Milk Sourcing')
quality_testing = Transition(label='Quality Testing')
milk_pasteurize = Transition(label='Milk Pasteurize')
curd_formation = Transition(label='Curd Formation')
whey_separation = Transition(label='Whey Separation')
press_cheese = Transition(label='Press Cheese')
salt_application = Transition(label='Salt Application')
controlled_aging = Transition(label='Controlled Aging')
sensory_check = Transition(label='Sensory Check')
batch_packaging = Transition(label='Batch Packaging')
label_printing = Transition(label='Label Printing')
cold_storage = Transition(label='Cold Storage')
logistics_plan = Transition(label='Logistics Plan')
retail_delivery = Transition(label='Retail Delivery')
feedback_review = Transition(label='Feedback Review')
demand_forecast = Transition(label='Demand Forecast')
provenance_track = Transition(label='Provenance Track')

# Define the process tree
milk_flow = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, quality_testing])
pasteurize_flow = OperatorPOWL(operator=Operator.XOR, children=[milk_pasteurize, milk_flow])
curd_flow = OperatorPOWL(operator=Operator.XOR, children=[curd_formation, pasteurize_flow])
whey_flow = OperatorPOWL(operator=Operator.XOR, children=[whey_separation, curd_flow])
press_flow = OperatorPOWL(operator=Operator.XOR, children=[press_cheese, whey_flow])
salt_flow = OperatorPOWL(operator=Operator.XOR, children=[salt_application, press_flow])
aging_flow = OperatorPOWL(operator=Operator.XOR, children=[controlled_aging, salt_flow])
sensory_flow = OperatorPOWL(operator=Operator.XOR, children=[sensory_check, aging_flow])
packaging_flow = OperatorPOWL(operator=Operator.XOR, children=[batch_packaging, sensory_flow])
label_flow = OperatorPOWL(operator=Operator.XOR, children=[label_printing, packaging_flow])
storage_flow = OperatorPOWL(operator=Operator.XOR, children=[cold_storage, label_flow])
logistics_flow = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, storage_flow])
delivery_flow = OperatorPOWL(operator=Operator.XOR, children=[retail_delivery, logistics_flow])
feedback_flow = OperatorPOWL(operator=Operator.XOR, children=[feedback_review, delivery_flow])
forecast_flow = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, feedback_flow])
provenance_flow = OperatorPOWL(operator=Operator.XOR, children=[provenance_track, forecast_flow])

# Create the partial order
root = StrictPartialOrder(nodes=[milk_flow, pasteurize_flow, curd_flow, whey_flow, press_flow, salt_flow, aging_flow, sensory_flow, packaging_flow, label_flow, storage_flow, logistics_flow, delivery_flow, feedback_flow, forecast_flow, provenance_flow])
root.order.add_edge(milk_flow, pasteurize_flow)
root.order.add_edge(pasteurize_flow, curd_flow)
root.order.add_edge(curd_flow, whey_flow)
root.order.add_edge(whey_flow, press_flow)
root.order.add_edge(press_flow, salt_flow)
root.order.add_edge(salt_flow, aging_flow)
root.order.add_edge(aging_flow, sensory_flow)
root.order.add_edge(sensory_flow, packaging_flow)
root.order.add_edge(packaging_flow, label_flow)
root.order.add_edge(label_flow, storage_flow)
root.order.add_edge(storage_flow, logistics_flow)
root.order.add_edge(logistics_flow, delivery_flow)
root.order.add_edge(delivery_flow, feedback_flow)
root.order.add_edge(feedback_flow, forecast_flow)
root.order.add_edge(forecast_flow, provenance_flow)

print(root)