from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
site_survey = Transition(label='Site Survey')
design_layout = Transition(label='Design Layout')
climate_setup = Transition(label='Climate Setup')
sensor_install = Transition(label='Sensor Install')
nutrient_mix = Transition(label='Nutrient Mix')
automation_code = Transition(label='Automation Code')
crop_planning = Transition(label='Crop Planning')
pest_control = Transition(label='Pest Control')
energy_audit = Transition(label='Energy Audit')
waste_sort = Transition(label='Waste Sort')
planting_tier = Transition(label='Planting Tier')
harvest_prep = Transition(label='Harvest Prep')
logistics_plan = Transition(label='Logistics Plan')
community_meet = Transition(label='Community Meet')
data_review = Transition(label='Data Review')
system_upgrade = Transition(label='System Upgrade')

# Define the process
site_survey_to_design_layout = OperatorPOWL(operator=Operator.XOR, children=[climate_setup, sensor_install])
design_layout_to_crop_planning = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, automation_code])
climate_setup_to_pest_control = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, waste_sort])
sensor_install_to_planting_tier = OperatorPOWL(operator=Operator.XOR, children=[planting_tier, harvest_prep])
nutrient_mix_to_logistics_plan = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, community_meet])
automation_code_to_data_review = OperatorPOWL(operator=Operator.XOR, children=[data_review, system_upgrade])
pest_control_to_planting_tier = OperatorPOWL(operator=Operator.XOR, children=[planting_tier, harvest_prep])
energy_audit_to_waste_sort = OperatorPOWL(operator=Operator.XOR, children=[waste_sort, planting_tier])
waste_sort_to_planting_tier = OperatorPOWL(operator=Operator.XOR, children=[planting_tier, harvest_prep])
planting_tier_to_harvest_prep = OperatorPOWL(operator=Operator.XOR, children=[harvest_prep, logistics_plan])
harvest_prep_to_logistics_plan = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, community_meet])
logistics_plan_to_community_meet = OperatorPOWL(operator=Operator.XOR, children=[community_meet, data_review])
community_meet_to_data_review = OperatorPOWL(operator=Operator.XOR, children=[data_review, system_upgrade])
data_review_to_system_upgrade = OperatorPOWL(operator=Operator.XOR, children=[system_upgrade, site_survey])

# Define the root of the POWL model
root = StrictPartialOrder(nodes=[site_survey, design_layout, climate_setup, sensor_install, nutrient_mix, automation_code, crop_planning, pest_control, energy_audit, waste_sort, planting_tier, harvest_prep, logistics_plan, community_meet, data_review, system_upgrade])
root.order.add_edge(site_survey, design_layout)
root.order.add_edge(design_layout, climate_setup)
root.order.add_edge(design_layout, sensor_install)
root.order.add_edge(climate_setup, pest_control)
root.order.add_edge(sensor_install, planting_tier)
root.order.add_edge(nutrient_mix, logistics_plan)
root.order.add_edge(automation_code, data_review)
root.order.add_edge(pest_control, planting_tier)
root.order.add_edge(energy_audit, waste_sort)
root.order.add_edge(waste_sort, planting_tier)
root.order.add_edge(planting_tier, harvest_prep)
root.order.add_edge(harvest_prep, logistics_plan)
root.order.add_edge(logistics_plan, community_meet)
root.order.add_edge(community_meet, data_review)
root.order.add_edge(data_review, system_upgrade)
root.order.add_edge(system_upgrade, site_survey)