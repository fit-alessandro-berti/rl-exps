import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
design_layout = Transition(label='Design Layout')
climate_setup = Transition(label='Climate Setup')
sensor_install = Transition(label='Sensor Install')
nutrient_mix = Transition(label='Nutrient Mix')
automation_code = Transition(label='Automation Code')
crop_planning = Transition(label='Crop Planning')
pest_control = Transition(label='Pest Control')
energy_audit = Transition(label='Energy Audit')
waste_sort = Transition(label='Waste Sort')
planting_tier = Transition(label='Planting Tier')
harvest_prep = Transition(label='Harvest Prep')
logistics_plan = Transition(label='Logistics Plan')
community_meet = Transition(label='Community Meet')
data_review = Transition(label='Data Review')
system_upgrade = Transition(label='System Upgrade')

skip = SilentTransition()
site_survey_to_design = OperatorPOWL(operator=Operator.XOR, children=[site_survey, skip])
design_to_climate = OperatorPOWL(operator=Operator.XOR, children=[design_layout, skip])
climate_to_sensor = OperatorPOWL(operator=Operator.XOR, children=[climate_setup, skip])
sensor_to_nutrient = OperatorPOWL(operator=Operator.XOR, children=[sensor_install, skip])
nutrient_to_automation = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, skip])
automation_to_crop = OperatorPOWL(operator=Operator.XOR, children=[automation_code, skip])
crop_to_pest = OperatorPOWL(operator=Operator.XOR, children=[crop_planning, skip])
pest_to_energy = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
energy_to_waste = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
waste_to_planting = OperatorPOWL(operator=Operator.XOR, children=[waste_sort, skip])
planting_to_harvest = OperatorPOWL(operator=Operator.XOR, children=[planting_tier, skip])
harvest_to_logistics = OperatorPOWL(operator=Operator.XOR, children=[harvest_prep, skip])
logistics_to_meet = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, skip])
meet_to_review = OperatorPOWL(operator=Operator.XOR, children=[community_meet, skip])
review_to_upgrade = OperatorPOWL(operator=Operator.XOR, children=[data_review, skip])
upgrade_to_site = OperatorPOWL(operator=Operator.XOR, children=[system_upgrade, skip])

root = StrictPartialOrder(nodes=[site_survey, design_layout, climate_setup, sensor_install, nutrient_mix, automation_code, crop_planning, pest_control, energy_audit, waste_sort, planting_tier, harvest_prep, logistics_plan, community_meet, data_review, system_upgrade])
root.order.add_edge(site_survey, design_to_climate)
root.order.add_edge(design_to_climate, climate_to_sensor)
root.order.add_edge(climate_to_sensor, sensor_to_nutrient)
root.order.add_edge(sensor_to_nutrient, nutrient_to_automation)
root.order.add_edge(nutrient_to_automation, automation_to_crop)
root.order.add_edge(automation_to_crop, crop_to_pest)
root.order.add_edge(crop_to_pest, pest_to_energy)
root.order.add_edge(pest_to_energy, energy_to_waste)
root.order.add_edge(energy_to_waste, waste_to_planting)
root.order.add_edge(waste_to_planting, planting_to_harvest)
root.order.add_edge(planting_to_harvest, harvest_to_logistics)
root.order.add_edge(harvest_to_logistics, logistics_to_meet)
root.order.add_edge(logistics_to_meet, meet_to_review)
root.order.add_edge(meet_to_review, review_to_upgrade)
root.order.add_edge(review_to_upgrade, upgrade_to_site)