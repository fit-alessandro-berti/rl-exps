import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
flora_mapping = Transition(label='Flora Mapping')
hive_setup = Transition(label='Hive Setup')
sensor_install = Transition(label='Sensor Install')
health_check = Transition(label='Health Check')
pest_control = Transition(label='Pest Control')
data_logging = Transition(label='Data Logging')
community_meet = Transition(label='Community Meet')
workshop_plan = Transition(label='Workshop Plan')
honey_extract = Transition(label='Honey Extract')
quality_test = Transition(label='Quality Test')
packaging = Transition(label='Packaging')
market_setup = Transition(label='Market Setup')
sales_report = Transition(label='Sales Report')
regulation_check = Transition(label='Regulation Check')
waste_manage = Transition(label='Waste Manage')
seasonal_review = Transition(label='Seasonal Review')

skip = SilentTransition()

site_survey_to_flora = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[site_survey, flora_mapping])
flora_to_hive = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[flora_mapping, hive_setup])
hive_to_sensor = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[hive_setup, sensor_install])
sensor_to_health = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[sensor_install, health_check])
health_to_pest = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[health_check, pest_control])
pest_to_data = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[pest_control, data_logging])
data_to_community = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[data_logging, community_meet])
community_to_workshop = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[community_meet, workshop_plan])
workshop_to_honey = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[workshop_plan, honey_extract])
honey_to_quality = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[honey_extract, quality_test])
quality_to_packaging = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[quality_test, packaging])
packaging_to_market = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[packaging, market_setup])
market_to_sales = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[market_setup, sales_report])
sales_to_regulation = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[sales_report, regulation_check])
regulation_to_waste = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[regulation_check, waste_manage])
waste_to_seasonal = OperatorPOWL(operator=Operator.EXCLUSIVE, children=[waste_manage, seasonal_review])

root = StrictPartialOrder(nodes=[site_survey_to_flora, flora_to_hive, hive_to_sensor, sensor_to_health, health_to_pest, pest_to_data, data_to_community, community_to_workshop, workshop_to_honey, honey_to_quality, quality_to_packaging, packaging_to_market, market_to_sales, sales_to_regulation, regulation_to_waste, waste_to_seasonal])
root.order.add_edge(site_survey_to_flora, flora_to_hive)
root.order.add_edge(flora_to_hive, hive_to_sensor)
root.order.add_edge(hive_to_sensor, sensor_to_health)
root.order.add_edge(sensor_to_health, health_to_pest)
root.order.add_edge(health_to_pest, pest_to_data)
root.order.add_edge(pest_to_data, data_to_community)
root.order.add_edge(data_to_community, community_to_workshop)
root.order.add_edge(community_to_workshop, workshop_to_honey)
root.order.add_edge(workshop_to_honey, honey_to_quality)
root.order.add_edge(honey_to_quality, quality_to_packaging)
root.order.add_edge(quality_to_packaging, packaging_to_market)
root.order.add_edge(packaging_to_market, market_to_sales)
root.order.add_edge(market_to_sales, sales_to_regulation)
root.order.add_edge(sales_to_regulation, regulation_to_waste)
root.order.add_edge(regulation_to_waste, waste_to_seasonal)