import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_analysis = Transition(label='Site Analysis')
structural_check = Transition(label='Structural Check')
rack_install = Transition(label='Rack Install')
system_setup = Transition(label='System Setup')
hydroponics_config = Transition(label='Hydroponics Config')
aeroponics_tune = Transition(label='Aeroponics Tune')
lighting_setup = Transition(label='Lighting Setup')
enviro_control = Transition(label='Enviro Control')
sensor_deploy = Transition(label='Sensor Deploy')
waste_recycle = Transition(label='Waste Recycle')
water_reuse = Transition(label='Water Reuse')
staff_training = Transition(label='Staff Training')
test_grow = Transition(label='Test Grow')
data_analytics = Transition(label='Data Analytics')
yield_optimize = Transition(label='Yield Optimize')

skip = SilentTransition()

site_analysis_to_structural_check = OperatorPOWL(operator=Operator.XOR, children=[structural_check, skip])
structural_check_to_rack_install = OperatorPOWL(operator=Operator.XOR, children=[rack_install, skip])
rack_install_to_system_setup = OperatorPOWL(operator=Operator.XOR, children=[system_setup, skip])
system_setup_to_hydroponics_config = OperatorPOWL(operator=Operator.XOR, children=[hydroponics_config, skip])
hydroponics_config_to_aeroponics_tune = OperatorPOWL(operator=Operator.XOR, children=[aeroponics_tune, skip])
aeroponics_tune_to_lighting_setup = OperatorPOWL(operator=Operator.XOR, children=[lighting_setup, skip])
lighting_setup_to_enviro_control = OperatorPOWL(operator=Operator.XOR, children=[enviro_control, skip])
enviro_control_to_sensor_deploy = OperatorPOWL(operator=Operator.XOR, children=[sensor_deploy, skip])
sensor_deploy_to_waste_recycle = OperatorPOWL(operator=Operator.XOR, children=[waste_recycle, skip])
waste_recycle_to_water_reuse = OperatorPOWL(operator=Operator.XOR, children=[water_reuse, skip])
water_reuse_to_staff_training = OperatorPOWL(operator=Operator.XOR, children=[staff_training, skip])
staff_training_to_test_grow = OperatorPOWL(operator=Operator.XOR, children=[test_grow, skip])
test_grow_to_data_analytics = OperatorPOWL(operator=Operator.XOR, children=[data_analytics, skip])
data_analytics_to_yield_optimize = OperatorPOWL(operator=Operator.XOR, children=[yield_optimize, skip])

root = StrictPartialOrder(nodes=[site_analysis, structural_check, rack_install, system_setup, hydroponics_config, aeroponics_tune, lighting_setup, enviro_control, sensor_deploy, waste_recycle, water_reuse, staff_training, test_grow, data_analytics, yield_optimize])
root.order.add_edge(site_analysis, structural_check)
root.order.add_edge(structural_check, rack_install)
root.order.add_edge(rack_install, system_setup)
root.order.add_edge(system_setup, hydroponics_config)
root.order.add_edge(hydroponics_config, aeroponics_tune)
root.order.add_edge(aeroponics_tune, lighting_setup)
root.order.add_edge(lighting_setup, enviro_control)
root.order.add_edge(enviro_control, sensor_deploy)
root.order.add_edge(sensor_deploy, waste_recycle)
root.order.add_edge(waste_recycle, water_reuse)
root.order.add_edge(water_reuse, staff_training)
root.order.add_edge(staff_training, test_grow)
root.order.add_edge(test_grow, data_analytics)
root.order.add_edge(data_analytics, yield_optimize)