import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

structural_check = Transition(label='Structural Check')
permit_apply = Transition(label='Permit Apply')
design_layout = Transition(label='Design Layout')
soil_prep = Transition(label='Soil Prep')
bed_install = Transition(label='Bed Install')
irrigation_setup = Transition(label='Irrigation Setup')
sensor_mount = Transition(label='Sensor Mount')
solar_connect = Transition(label='Solar Connect')
seed_order = Transition(label='Seed Order')
nutrient_mix = Transition(label='Nutrient Mix')
community_meet = Transition(label='Community Meet')
staff_train = Transition(label='Staff Train')
plant_crop = Transition(label='Plant Crop')
maintenance_plan = Transition(label='Maintenance Plan')
harvest_schedule = Transition(label='Harvest Schedule')
waste_manage = Transition(label='Waste Manage')

skip = SilentTransition()

structural_check_choice = OperatorPOWL(operator=Operator.XOR, children=[permit_apply, structural_check])
permit_apply_choice = OperatorPOWL(operator=Operator.XOR, children=[design_layout, permit_apply])
design_layout_choice = OperatorPOWL(operator=Operator.XOR, children=[soil_prep, design_layout])
soil_prep_choice = OperatorPOWL(operator=Operator.XOR, children=[bed_install, soil_prep])
bed_install_choice = OperatorPOWL(operator=Operator.XOR, children=[irrigation_setup, bed_install])
irrigation_setup_choice = OperatorPOWL(operator=Operator.XOR, children=[sensor_mount, irrigation_setup])
sensor_mount_choice = OperatorPOWL(operator=Operator.XOR, children=[solar_connect, sensor_mount])
solar_connect_choice = OperatorPOWL(operator=Operator.XOR, children=[seed_order, solar_connect])
seed_order_choice = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, seed_order])
nutrient_mix_choice = OperatorPOWL(operator=Operator.XOR, children=[community_meet, nutrient_mix])
community_meet_choice = OperatorPOWL(operator=Operator.XOR, children=[staff_train, community_meet])
staff_train_choice = OperatorPOWL(operator=Operator.XOR, children=[plant_crop, staff_train])
plant_crop_choice = OperatorPOWL(operator=Operator.XOR, children=[maintenance_plan, plant_crop])
maintenance_plan_choice = OperatorPOWL(operator=Operator.XOR, children=[harvest_schedule, maintenance_plan])
harvest_schedule_choice = OperatorPOWL(operator=Operator.XOR, children=[waste_manage, harvest_schedule])

root = StrictPartialOrder(nodes=[structural_check_choice, permit_apply_choice, design_layout_choice, soil_prep_choice, bed_install_choice, irrigation_setup_choice, sensor_mount_choice, solar_connect_choice, seed_order_choice, nutrient_mix_choice, community_meet_choice, staff_train_choice, plant_crop_choice, maintenance_plan_choice, harvest_schedule_choice])
root.order.add_edge(structural_check_choice, permit_apply_choice)
root.order.add_edge(permit_apply_choice, design_layout_choice)
root.order.add_edge(design_layout_choice, soil_prep_choice)
root.order.add_edge(soil_prep_choice, bed_install_choice)
root.order.add_edge(bed_install_choice, irrigation_setup_choice)
root.order.add_edge(irrigation_setup_choice, sensor_mount_choice)
root.order.add_edge(sensor_mount_choice, solar_connect_choice)
root.order.add_edge(solar_connect_choice, seed_order_choice)
root.order.add_edge(seed_order_choice, nutrient_mix_choice)
root.order.add_edge(nutrient_mix_choice, community_meet_choice)
root.order.add_edge(community_meet_choice, staff_train_choice)
root.order.add_edge(staff_train_choice, plant_crop_choice)
root.order.add_edge(plant_crop_choice, maintenance_plan_choice)
root.order.add_edge(maintenance_plan_choice, harvest_schedule_choice)