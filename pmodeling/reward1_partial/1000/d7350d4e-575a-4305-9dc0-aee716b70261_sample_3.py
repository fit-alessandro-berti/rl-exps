import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

provenance_check = Transition(label='Provenance Check')
sample_collection = Transition(label='Sample Collection')
spectroscopy_test = Transition(label='Spectroscopy Test')
carbon_dating = Transition(label='Carbon Dating')
expert_review = Transition(label='Expert Review')
legal_clearance = Transition(label='Legal Clearance')
cultural_assessment = Transition(label='Cultural Assessment')
digital_scan = Transition(label='Digital Scan')
report_draft = Transition(label='Report Draft')
stakeholder_meet = Transition(label='Stakeholder Meet')
acquisition_vote = Transition(label='Acquisition Vote')
restoration_plan = Transition(label='Restoration Plan')
condition_report = Transition(label='Condition Report')
archival_entry = Transition(label='Archival Entry')
final_approval = Transition(label='Final Approval')

skip = SilentTransition()

provenance = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, skip])
sample = OperatorPOWL(operator=Operator.XOR, children=[sample_collection, skip])
spectroscopy = OperatorPOWL(operator=Operator.XOR, children=[spectroscopy_test, skip])
carbon = OperatorPOWL(operator=Operator.XOR, children=[carbon_dating, skip])
expert = OperatorPOWL(operator=Operator.XOR, children=[expert_review, skip])
legal = OperatorPOWL(operator=Operator.XOR, children=[legal_clearance, skip])
cultural = OperatorPOWL(operator=Operator.XOR, children=[cultural_assessment, skip])
digital = OperatorPOWL(operator=Operator.XOR, children=[digital_scan, skip])
report = OperatorPOWL(operator=Operator.XOR, children=[report_draft, skip])
stakeholder = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_meet, skip])
vote = OperatorPOWL(operator=Operator.XOR, children=[acquisition_vote, skip])
restoration = OperatorPOWL(operator=Operator.XOR, children=[restoration_plan, skip])
condition = OperatorPOWL(operator=Operator.XOR, children=[condition_report, skip])
archival = OperatorPOWL(operator=Operator.XOR, children=[archival_entry, skip])
final = OperatorPOWL(operator=Operator.XOR, children=[final_approval, skip])

root = StrictPartialOrder(nodes=[provenance, sample, spectroscopy, carbon, expert, legal, cultural, digital, report, stakeholder, vote, restoration, condition, archival, final])
root.order.add_edge(provenance, sample)
root.order.add_edge(sample, spectroscopy)
root.order.add_edge(spectroscopy, carbon)
root.order.add_edge(carbon, expert)
root.order.add_edge(expert, legal)
root.order.add_edge(legal, cultural)
root.order.add_edge(cultural, digital)
root.order.add_edge(digital, report)
root.order.add_edge(report, stakeholder)
root.order.add_edge(stakeholder, vote)
root.order.add_edge(vote, restoration)
root.order.add_edge(restoration, condition)
root.order.add_edge(condition, archival)
root.order.add_edge(archival, final)