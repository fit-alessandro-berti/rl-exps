import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Gather_Specs = Transition(label='Gather Specs')
Adapt_Design = Transition(label='Adapt Design')
Source_Parts = Transition(label='Source Parts')
Component_Test = Transition(label='Component Test')
Assemble_Frame = Transition(label='Assemble Frame')
Install_Firmware = Transition(label='Install Firmware')
Calibrate_Sensors = Transition(label='Calibrate Sensors')
Stress_Test = Transition(label='Stress Test')
Flight_Simulate = Transition(label='Flight Simulate')
Validate_Battery = Transition(label='Validate Battery')
Check_Accuracy = Transition(label='Check Accuracy')
Package_Units = Transition(label='Package Units')
Create_Manuals = Transition(label='Create Manuals')
Ship_Drones = Transition(label='Ship Drones')
Collect_Feedback = Transition(label='Collect Feedback')

skip = SilentTransition()

gather_specs = OperatorPOWL(operator=Operator.XOR, children=[Gather_Specs, Adapt_Design])
adapt_design = OperatorPOWL(operator=Operator.XOR, children=[Source_Parts, skip])
source_parts = OperatorPOWL(operator=Operator.XOR, children=[Component_Test, skip])
component_test = OperatorPOWL(operator=Operator.XOR, children=[Assemble_Frame, skip])
assemble_frame = OperatorPOWL(operator=Operator.XOR, children=[Install_Firmware, skip])
install_firmware = OperatorPOWL(operator=Operator.XOR, children=[Calibrate_Sensors, skip])
calibrate_sensors = OperatorPOWL(operator=Operator.XOR, children=[Stress_Test, skip])
stress_test = OperatorPOWL(operator=Operator.XOR, children=[Flight_Simulate, skip])
flight_simulate = OperatorPOWL(operator=Operator.XOR, children=[Validate_Battery, skip])
validate_battery = OperatorPOWL(operator=Operator.XOR, children=[Check_Accuracy, skip])
check_accuracy = OperatorPOWL(operator=Operator.XOR, children=[Package_Units, skip])
package_units = OperatorPOWL(operator=Operator.XOR, children=[Create_Manuals, skip])
create_manuals = OperatorPOWL(operator=Operator.XOR, children=[Ship_Drones, skip])
ship_drones = OperatorPOWL(operator=Operator.XOR, children=[Collect_Feedback, skip])

root = StrictPartialOrder(nodes=[gather_specs, adapt_design, source_parts, component_test, assemble_frame, install_firmware, calibrate_sensors, stress_test, flight_simulate, validate_battery, check_accuracy, package_units, create_manuals, ship_drones])
root.order.add_edge(gather_specs, adapt_design)
root.order.add_edge(adapt_design, source_parts)
root.order.add_edge(source_parts, component_test)
root.order.add_edge(component_test, assemble_frame)
root.order.add_edge(assemble_frame, install_firmware)
root.order.add_edge(install_firmware, calibrate_sensors)
root.order.add_edge(calibrate_sensors, stress_test)
root.order.add_edge(stress_test, flight_simulate)
root.order.add_edge(flight_simulate, validate_battery)
root.order.add_edge(validate_battery, check_accuracy)
root.order.add_edge(check_accuracy, package_units)
root.order.add_edge(package_units, create_manuals)
root.order.add_edge(create_manuals, ship_drones)
root.order.add_edge(ship_drones, collect_feedback)