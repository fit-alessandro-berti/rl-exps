from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
preflight = Transition(label='Preflight Check')
calibrate = Transition(label='Sensor Calibrate')
battery_test = Transition(label='Battery Test')
route_update = Transition(label='Route Update')
firmware_patch = Transition(label='Firmware Patch')
flight_launch = Transition(label='Flight Launch')
telemetry_monitor = Transition(label='Telemetry Monitor')
anomaly_detect = Transition(label='Anomaly Detect')
collision_assess = Transition(label='Collision Assess')
data_upload = Transition(label='Data Upload')
postflight_review = Transition(label='Postflight Review')
battery_optimize = Transition(label='Battery Optimize')
damage_repair = Transition(label='Damage Repair')
compliance_report = Transition(label='Compliance Report')
performance_log = Transition(label='Performance Log')
mission_debrief = Transition(label='Mission Debrief')

# Define partial order and loop nodes
partial_order = StrictPartialOrder(nodes=[preflight, calibrate, battery_test, route_update, firmware_patch, flight_launch, telemetry_monitor, anomaly_detect, collision_assess, data_upload, postflight_review, battery_optimize, damage_repair, compliance_report, performance_log, mission_debrief])
partial_order.order.add_edge(preflight, calibrate)
partial_order.order.add_edge(calibrate, battery_test)
partial_order.order.add_edge(battery_test, route_update)
partial_order.order.add_edge(route_update, firmware_patch)
partial_order.order.add_edge(firmware_patch, flight_launch)
partial_order.order.add_edge(flight_launch, telemetry_monitor)
partial_order.order.add_edge(telemetry_monitor, anomaly_detect)
partial_order.order.add_edge(anomaly_detect, collision_assess)
partial_order.order.add_edge(collision_assess, data_upload)
partial_order.order.add_edge(data_upload, postflight_review)
partial_order.order.add_edge(postflight_review, battery_optimize)
partial_order.order.add_edge(battery_optimize, damage_repair)
partial_order.order.add_edge(damage_repair, compliance_report)
partial_order.order.add_edge(compliance_report, performance_log)
partial_order.order.add_edge(performance_log, mission_debrief)

# Define loops
preflight_loop = OperatorPOWL(operator=Operator.LOOP, children=[preflight])
calibrate_loop = OperatorPOWL(operator=Operator.LOOP, children=[calibrate])
battery_test_loop = OperatorPOWL(operator=Operator.LOOP, children=[battery_test])
route_update_loop = OperatorPOWL(operator=Operator.LOOP, children=[route_update])
firmware_patch_loop = OperatorPOWL(operator=Operator.LOOP, children=[firmware_patch])
flight_launch_loop = OperatorPOWL(operator=Operator.LOOP, children=[flight_launch])
telemetry_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[telemetry_monitor])
anomaly_detect_loop = OperatorPOWL(operator=Operator.LOOP, children=[anomaly_detect])
collision_assess_loop = OperatorPOWL(operator=Operator.LOOP, children=[collision_assess])
data_upload_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_upload])
postflight_review_loop = OperatorPOWL(operator=Operator.LOOP, children=[postflight_review])
battery_optimize_loop = OperatorPOWL(operator=Operator.LOOP, children=[battery_optimize])
damage_repair_loop = OperatorPOWL(operator=Operator.LOOP, children=[damage_repair])
compliance_report_loop = OperatorPOWL(operator=Operator.LOOP, children=[compliance_report])
performance_log_loop = OperatorPOWL(operator=Operator.LOOP, children=[performance_log])
mission_debrief_loop = OperatorPOWL(operator=Operator.LOOP, children=[mission_debrief])

# Define exclusive choices
preflight_xor = OperatorPOWL(operator=Operator.XOR, children=[preflight_loop, preflight])
calibrate_xor = OperatorPOWL(operator=Operator.XOR, children=[calibrate_loop, calibrate])
battery_test_xor = OperatorPOWL(operator=Operator.XOR, children=[battery_test_loop, battery_test])
route_update_xor = OperatorPOWL(operator=Operator.XOR, children=[route_update_loop, route_update])
firmware_patch_xor = OperatorPOWL(operator=Operator.XOR, children=[firmware_patch_loop, firmware_patch])
flight_launch_xor = OperatorPOWL(operator=Operator.XOR, children=[flight_launch_loop, flight_launch])
telemetry_monitor_xor = OperatorPOWL(operator=Operator.XOR, children=[telemetry_monitor_loop, telemetry_monitor])
anomaly_detect_xor = OperatorPOWL(operator=Operator.XOR, children=[anomaly_detect_loop, anomaly_detect])
collision_assess_xor = OperatorPOWL(operator=Operator.XOR, children=[collision_assess_loop, collision_assess])
data_upload_xor = OperatorPOWL(operator=Operator.XOR, children=[data_upload_loop, data_upload])
postflight_review_xor = OperatorPOWL(operator=Operator.XOR, children=[postflight_review_loop, postflight_review])
battery_optimize_xor = OperatorPOWL(operator=Operator.XOR, children=[battery_optimize_loop, battery_optimize])
damage_repair_xor = OperatorPOWL(operator=Operator.XOR, children=[damage_repair_loop, damage_repair])
compliance_report_xor = OperatorPOWL(operator=Operator.XOR, children=[compliance_report_loop, compliance_report])
performance_log_xor = OperatorPOWL(operator=Operator.XOR, children=[performance_log_loop, performance_log])
mission_debrief_xor = OperatorPOWL(operator=Operator.XOR, children=[mission_debrief_loop, mission_debrief])

# Define final POWL model
root = StrictPartialOrder(nodes=[preflight_xor, calibrate_xor, battery_test_xor, route_update_xor, firmware_patch_xor, flight_launch_xor, telemetry_monitor_xor, anomaly_detect_xor, collision_assess_xor, data_upload_xor, postflight_review_xor, battery_optimize_xor, damage_repair_xor, compliance_report_xor, performance_log_xor, mission_debrief_xor])
root.order.add_edge(preflight_xor, calibrate_xor)
root.order.add_edge(calibrate_xor, battery_test_xor)
root.order.add_edge(battery_test_xor, route_update_xor)
root.order.add_edge(route_update_xor, firmware_patch_xor)
root.order.add_edge(firmware_patch_xor, flight_launch_xor)
root.order.add_edge(flight_launch_xor, telemetry_monitor_xor)
root.order.add_edge(telemetry_monitor_xor, anomaly_detect_xor)
root.order.add_edge(anomaly_detect_xor, collision_assess_xor)
root.order.add_edge(collision_assess_xor, data_upload_xor)
root.order.add_edge(data_upload_xor, postflight_review_xor)
root.order.add_edge(postflight_review_xor, battery_optimize_xor)
root.order.add_edge(battery_optimize_xor, damage_repair_xor)
root.order.add_edge(damage_repair_xor, compliance_report_xor)
root.order.add_edge(compliance_report_xor, performance_log_xor)
root.order.add_edge(performance_log_xor, mission_debrief_xor)