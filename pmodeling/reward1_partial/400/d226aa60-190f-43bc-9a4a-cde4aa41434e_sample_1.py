import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

seed_select = Transition(label='Seed Select')
trend_analyze = Transition(label='Trend Analyze')
nutrient_mix = Transition(label='Nutrient Mix')
auto_plant = Transition(label='Auto Plant')
sensor_check = Transition(label='Sensor Check')
data_analyze = Transition(label='Data Analyze')
water_adjust = Transition(label='Water Adjust')
light_control = Transition(label='Light Control')
humidity_monitor = Transition(label='Humidity Monitor')
pest_inspect = Transition(label='Pest Inspect')
growth_forecast = Transition(label='Growth Forecast')
harvest_plan = Transition(label='Harvest Plan')
rapid_cool = Transition(label='Rapid Cool')
quality_grade = Transition(label='Quality Grade')
eco_package = Transition(label='Eco Package')
logistics_prep = Transition(label='Logistics Prep')
feedback_collect = Transition(label='Feedback Collect')
system_maintain = Transition(label='System Maintain')

xor1 = OperatorPOWL(operator=Operator.XOR, children=[trend_analyze, nutrient_mix])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[auto_plant, sensor_check])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[data_analyze, water_adjust])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[light_control, humidity_monitor])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[pest_inspect, growth_forecast])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[harvest_plan, rapid_cool])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[quality_grade, eco_package])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[logistics_prep, feedback_collect])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[system_maintain, None])

root = StrictPartialOrder(nodes=[xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9])
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)

print(root)