from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
sensor_setup = Transition(label='Sensor Setup')
data_collection = Transition(label='Data Collection')
weather_check = Transition(label='Weather Check')
soil_testing = Transition(label='Soil Testing')
crop_selection = Transition(label='Crop Selection')
resource_assign = Transition(label='Resource Assign')
irrigation_adjust = Transition(label='Irrigation Adjust')
pest_scan = Transition(label='Pest Scan')
nutrient_mix = Transition(label='Nutrient Mix')
growth_monitor = Transition(label='Growth Monitor')
community_poll = Transition(label='Community Poll')
schedule_update = Transition(label='Schedule Update')
harvest_plan = Transition(label='Harvest Plan')
waste_sort = Transition(label='Waste Sort')
yield_report = Transition(label='Yield Report')

skip = SilentTransition()

sensor_setup_to_data_collection = OperatorPOWL(operator=Operator.XOR, children=[sensor_setup, data_collection])
data_collection_to_weather_check = OperatorPOWL(operator=Operator.XOR, children=[weather_check, soil_testing])
weather_check_to_crop_selection = OperatorPOWL(operator=Operator.XOR, children=[crop_selection, resource_assign])
soil_testing_to_resource_assign = OperatorPOWL(operator=Operator.XOR, children=[resource_assign, irrigation_adjust])
crop_selection_to_pest_scan = OperatorPOWL(operator=Operator.XOR, children=[pest_scan, nutrient_mix])
resource_assign_to_irrigation_adjust = OperatorPOWL(operator=Operator.XOR, children=[irrigation_adjust, growth_monitor])
pest_scan_to_nutrient_mix = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, community_poll])
nutrient_mix_to_growth_monitor = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor, schedule_update])
growth_monitor_to_community_poll = OperatorPOWL(operator=Operator.XOR, children=[community_poll, harvest_plan])
community_poll_to_schedule_update = OperatorPOWL(operator=Operator.XOR, children=[schedule_update, waste_sort])
schedule_update_to_harvest_plan = OperatorPOWL(operator=Operator.XOR, children=[harvest_plan, yield_report])
waste_sort_to_yield_report = OperatorPOWL(operator=Operator.XOR, children=[yield_report, skip])

root = StrictPartialOrder(nodes=[sensor_setup, data_collection, weather_check, soil_testing, crop_selection, resource_assign, irrigation_adjust, pest_scan, nutrient_mix, growth_monitor, community_poll, schedule_update, harvest_plan, waste_sort, yield_report])
root.order.add_edge(sensor_setup, data_collection)
root.order.add_edge(data_collection, weather_check)
root.order.add_edge(data_collection, soil_testing)
root.order.add_edge(weather_check, crop_selection)
root.order.add_edge(weather_check, resource_assign)
root.order.add_edge(soil_testing, resource_assign)
root.order.add_edge(resource_assign, irrigation_adjust)
root.order.add_edge(pest_scan, nutrient_mix)
root.order.add_edge(nutrient_mix, growth_monitor)
root.order.add_edge(growth_monitor, community_poll)
root.order.add_edge(community_poll, schedule_update)
root.order.add_edge(schedule_update, harvest_plan)
root.order.add_edge(harvest_plan, waste_sort)
root.order.add_edge(waste_sort, yield_report)