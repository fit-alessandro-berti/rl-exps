import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
design_layout = Transition(label='Design Layout')
climate_setup = Transition(label='Climate Setup')
sensor_install = Transition(label='Sensor Install')
nutrient_mix = Transition(label='Nutrient Mix')
automation_code = Transition(label='Automation Code')
crop_planning = Transition(label='Crop Planning')
pest_control = Transition(label='Pest Control')
energy_audit = Transition(label='Energy Audit')
waste_sort = Transition(label='Waste Sort')
planting_tier = Transition(label='Planting Tier')
harvest_prep = Transition(label='Harvest Prep')
logistics_plan = Transition(label='Logistics Plan')
community_meet = Transition(label='Community Meet')
data_review = Transition(label='Data Review')
system_upgrade = Transition(label='System Upgrade')

skip = SilentTransition()

site_survey_choice = OperatorPOWL(operator=Operator.XOR, children=[climate_setup, skip])
climate_setup_choice = OperatorPOWL(operator=Operator.XOR, children=[sensor_install, skip])
sensor_install_choice = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, skip])
nutrient_mix_choice = OperatorPOWL(operator=Operator.XOR, children=[automation_code, skip])
automation_code_choice = OperatorPOWL(operator=Operator.XOR, children=[crop_planning, skip])
crop_planning_choice = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
pest_control_choice = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, skip])
energy_audit_choice = OperatorPOWL(operator=Operator.XOR, children=[waste_sort, skip])
waste_sort_choice = OperatorPOWL(operator=Operator.XOR, children=[planting_tier, skip])
planting_tier_choice = OperatorPOWL(operator=Operator.XOR, children=[harvest_prep, skip])
harvest_prep_choice = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, skip])
logistics_plan_choice = OperatorPOWL(operator=Operator.XOR, children=[community_meet, skip])
community_meet_choice = OperatorPOWL(operator=Operator.XOR, children=[data_review, skip])
data_review_choice = OperatorPOWL(operator=Operator.XOR, children=[system_upgrade, skip])

root = StrictPartialOrder(nodes=[
    site_survey, design_layout, climate_setup_choice, sensor_install_choice, nutrient_mix_choice, automation_code_choice, crop_planning_choice, pest_control_choice, energy_audit_choice, waste_sort_choice, planting_tier_choice, harvest_prep_choice, logistics_plan_choice, community_meet_choice, data_review_choice, system_upgrade
])
root.order.add_edge(site_survey, design_layout)
root.order.add_edge(design_layout, climate_setup_choice)
root.order.add_edge(climate_setup_choice, sensor_install_choice)
root.order.add_edge(sensor_install_choice, nutrient_mix_choice)
root.order.add_edge(nutrient_mix_choice, automation_code_choice)
root.order.add_edge(automation_code_choice, crop_planning_choice)
root.order.add_edge(crop_planning_choice, pest_control_choice)
root.order.add_edge(pest_control_choice, energy_audit_choice)
root.order.add_edge(energy_audit_choice, waste_sort_choice)
root.order.add_edge(waste_sort_choice, planting_tier_choice)
root.order.add_edge(planting_tier_choice, harvest_prep_choice)
root.order.add_edge(harvest_prep_choice, logistics_plan_choice)
root.order.add_edge(logistics_plan_choice, community_meet_choice)
root.order.add_edge(community_meet_choice, data_review_choice)
root.order.add_edge(data_review_choice, system_upgrade)