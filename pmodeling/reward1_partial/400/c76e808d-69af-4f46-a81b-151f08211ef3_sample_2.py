import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

milk_sourcing = Transition(label='Milk Sourcing')
culture_selection = Transition(label='Culture Selection')
milk_testing = Transition(label='Milk Testing')
curd_formation = Transition(label='Curd Formation')
whey_separation = Transition(label='Whey Separation')
molding_cheese = Transition(label='Molding Cheese')
salting_process = Transition(label='Salting Process')
aging_setup = Transition(label='Aging Setup')
env_monitoring = Transition(label='Env Monitoring')
flavor_profiling = Transition(label='Flavor Profiling')
packaging_design = Transition(label='Packaging Design')
blockchain_entry = Transition(label='Blockchain Entry')
quality_audit = Transition(label='Quality Audit')
retail_sync = Transition(label='Retail Sync')
transport_prep = Transition(label='Transport Prep')
delivery_tracking = Transition(label='Delivery Tracking')
customer_feedback = Transition(label='Customer Feedback')

skip = SilentTransition()
choice1 = OperatorPOWL(operator=Operator.XOR, children=[milk_sourcing, culture_selection])
choice2 = OperatorPOWL(operator=Operator.XOR, children=[milk_testing, curd_formation])
choice3 = OperatorPOWL(operator=Operator.XOR, children=[whey_separation, molding_cheese])
choice4 = OperatorPOWL(operator=Operator.XOR, children=[salting_process, aging_setup])
choice5 = OperatorPOWL(operator=Operator.XOR, children=[env_monitoring, flavor_profiling])
choice6 = OperatorPOWL(operator=Operator.XOR, children=[packaging_design, blockchain_entry])
choice7 = OperatorPOWL(operator=Operator.XOR, children=[quality_audit, retail_sync])
choice8 = OperatorPOWL(operator=Operator.XOR, children=[transport_prep, delivery_tracking])
choice9 = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, skip])

root = StrictPartialOrder(nodes=[choice1, choice2, choice3, choice4, choice5, choice6, choice7, choice8, choice9])
root.order.add_edge(choice1, choice2)
root.order.add_edge(choice2, choice3)
root.order.add_edge(choice3, choice4)
root.order.add_edge(choice4, choice5)
root.order.add_edge(choice5, choice6)
root.order.add_edge(choice6, choice7)
root.order.add_edge(choice7, choice8)
root.order.add_edge(choice8, choice9)

print(root)