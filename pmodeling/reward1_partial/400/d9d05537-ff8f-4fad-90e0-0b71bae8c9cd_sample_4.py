from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model for the crisis management process
alert_verify = Transition(label='Alert Verify')
impact_assess = Transition(label='Impact Assess')
team_assemble = Transition(label='Team Assemble')
resource_allocate = Transition(label='Resource Allocate')
stakeholder_notify = Transition(label='Stakeholder Notify')
legal_review = Transition(label='Legal Review')
media_brief = Transition(label='Media Brief')
response_deploy = Transition(label='Response Deploy')
situation_monitor = Transition(label='Situation Monitor')
data_collect = Transition(label='Data Collect')
risk_mitigate = Transition(label='Risk Mitigate')
recovery_plan = Transition(label='Recovery Plan')
external_consult = Transition(label='External Consult')
status_update = Transition(label='Status Update')
post_review = Transition(label='Post Review')
skip = SilentTransition()

# Define the structure of the POWL model
alert_verify_to_impact_assess = OperatorPOWL(operator=Operator.XOR, children=[impact_assess, skip])
impact_assess_to_team_assemble = OperatorPOWL(operator=Operator.XOR, children=[team_assemble, skip])
team_assemble_to_resource_allocate = OperatorPOWL(operator=Operator.XOR, children=[resource_allocate, skip])
resource_allocate_to_stakeholder_notify = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_notify, skip])
stakeholder_notify_to_legal_review = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
legal_review_to_media_brief = OperatorPOWL(operator=Operator.XOR, children=[media_brief, skip])
media_brief_to_response_deploy = OperatorPOWL(operator=Operator.XOR, children=[response_deploy, skip])
response_deploy_to_situation_monitor = OperatorPOWL(operator=Operator.XOR, children=[situation_monitor, skip])
situation_monitor_to_data_collect = OperatorPOWL(operator=Operator.XOR, children=[data_collect, skip])
data_collect_to_risk_mitigate = OperatorPOWL(operator=Operator.XOR, children=[risk_mitigate, skip])
risk_mitigate_to_recovery_plan = OperatorPOWL(operator=Operator.XOR, children=[recovery_plan, skip])
recovery_plan_to_external_consult = OperatorPOWL(operator=Operator.XOR, children=[external_consult, skip])
external_consult_to_status_update = OperatorPOWL(operator=Operator.XOR, children=[status_update, skip])
status_update_to_post_review = OperatorPOWL(operator=Operator.XOR, children=[post_review, skip])

# Define the root of the POWL model
root = StrictPartialOrder(nodes=[alert_verify, impact_assess, team_assemble, resource_allocate, stakeholder_notify, legal_review, media_brief, response_deploy, situation_monitor, data_collect, risk_mitigate, recovery_plan, external_consult, status_update, post_review])
root.order.add_edge(alert_verify, impact_assess)
root.order.add_edge(impact_assess, team_assemble)
root.order.add_edge(team_assemble, resource_allocate)
root.order.add_edge(resource_allocate, stakeholder_notify)
root.order.add_edge(stakeholder_notify, legal_review)
root.order.add_edge(legal_review, media_brief)
root.order.add_edge(media_brief, response_deploy)
root.order.add_edge(response_deploy, situation_monitor)
root.order.add_edge(situation_monitor, data_collect)
root.order.add_edge(data_collect, risk_mitigate)
root.order.add_edge(risk_mitigate, recovery_plan)
root.order.add_edge(recovery_plan, external_consult)
root.order.add_edge(external_consult, status_update)
root.order.add_edge(status_update, post_review)