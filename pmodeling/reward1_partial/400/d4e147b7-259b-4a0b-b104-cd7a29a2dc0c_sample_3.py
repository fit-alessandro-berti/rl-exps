import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_intake = Transition(label='Artifact Intake')
visual_scan = Transition(label='Visual Scan')
material_test = Transition(label='Material Test')
radiocarbon_check = Transition(label='Radiocarbon Check')
provenance_search = Transition(label='Provenance Search')
archive_review = Transition(label='Archive Review')
expert_consult = Transition(label='Expert Consult')
microscope_exam = Transition(label='Microscope Exam')
infrared_scan = Transition(label='Infrared Scan')
legal_verify = Transition(label='Legal Verify')
condition_report = Transition(label='Condition Report')
digital_catalog = Transition(label='Digital Catalog')
ownership_audit = Transition(label='Ownership Audit')
restoration_plan = Transition(label='Restoration Plan')
final_approval = Transition(label='Final Approval')
authentication_cert = Transition(label='Authentication Cert')

skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[artifact_intake])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[visual_scan, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[material_test, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[radiocarbon_check, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[provenance_search, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[archive_review, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[expert_consult, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[microscope_exam, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[infrared_scan, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[legal_verify, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[condition_report, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[digital_catalog, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[ownership_audit, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[restoration_plan, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[final_approval, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[authentication_cert, skip])

root = StrictPartialOrder(nodes=[loop, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15])
root.order.add_edge(loop, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)