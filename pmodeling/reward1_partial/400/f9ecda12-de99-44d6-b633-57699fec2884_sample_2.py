import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
concept_approve = Transition(label='Concept Approve')
budget_align = Transition(label='Budget Align')
design_review = Transition(label='Design Review')
structure_simulate = Transition(label='Structure Simulate')
material_procure = Transition(label='Material Procure')
vendor_select = Transition(label='Vendor Select')
permit_apply = Transition(label='Permit Apply')
safety_check = Transition(label='Safety Check')
site_prep = Transition(label='Site Prep')
logistics_plan = Transition(label='Logistics Plan')
fabricate_parts = Transition(label='Fabricate Parts')
assemble_onsite = Transition(label='Assemble Onsite')
quality_inspect = Transition(label='Quality Inspect')
weather_monitor = Transition(label='Weather Monitor')
public_unveil = Transition(label='Public Unveil')
maintenance_plan = Transition(label='Maintenance Plan')
stakeholder_meet = Transition(label='Stakeholder Meet')

# Define the process
concept_approve_order = StrictPartialOrder(nodes=[concept_approve, budget_align])
budget_align_order = StrictPartialOrder(nodes=[budget_align, design_review])
design_review_order = StrictPartialOrder(nodes=[design_review, structure_simulate])
structure_simulate_order = StrictPartialOrder(nodes=[structure_simulate, material_procure])
material_procure_order = StrictPartialOrder(nodes=[material_procure, vendor_select])
vendor_select_order = StrictPartialOrder(nodes=[vendor_select, permit_apply])
permit_apply_order = StrictPartialOrder(nodes=[permit_apply, safety_check])
safety_check_order = StrictPartialOrder(nodes=[safety_check, site_prep])
site_prep_order = StrictPartialOrder(nodes=[site_prep, logistics_plan])
logistics_plan_order = StrictPartialOrder(nodes=[logistics_plan, fabricate_parts])
fabricate_parts_order = StrictPartialOrder(nodes=[fabricate_parts, assemble_onsite])
assemble_onsite_order = StrictPartialOrder(nodes=[assemble_onsite, quality_inspect])
quality_inspect_order = StrictPartialOrder(nodes=[quality_inspect, weather_monitor])
weather_monitor_order = StrictPartialOrder(nodes=[weather_monitor, public_unveil])
public_unveil_order = StrictPartialOrder(nodes=[public_unveil, maintenance_plan])
maintenance_plan_order = StrictPartialOrder(nodes=[maintenance_plan, stakeholder_meet])

# Define the order dependencies
root = StrictPartialOrder(nodes=[concept_approve_order, budget_align_order, design_review_order, structure_simulate_order, material_procure_order, vendor_select_order, permit_apply_order, safety_check_order, site_prep_order, logistics_plan_order, fabricate_parts_order, assemble_onsite_order, quality_inspect_order, weather_monitor_order, public_unveil_order, maintenance_plan_order, stakeholder_meet])
root.order.add_edge(concept_approve_order, budget_align_order)
root.order.add_edge(budget_align_order, design_review_order)
root.order.add_edge(design_review_order, structure_simulate_order)
root.order.add_edge(structure_simulate_order, material_procure_order)
root.order.add_edge(material_procure_order, vendor_select_order)
root.order.add_edge(vendor_select_order, permit_apply_order)
root.order.add_edge(permit_apply_order, safety_check_order)
root.order.add_edge(safety_check_order, site_prep_order)
root.order.add_edge(site_prep_order, logistics_plan_order)
root.order.add_edge(logistics_plan_order, fabricate_parts_order)
root.order.add_edge(fabricate_parts_order, assemble_onsite_order)
root.order.add_edge(assemble_onsite_order, quality_inspect_order)
root.order.add_edge(quality_inspect_order, weather_monitor_order)
root.order.add_edge(weather_monitor_order, public_unveil_order)
root.order.add_edge(public_unveil_order, maintenance_plan_order)
root.order.add_edge(maintenance_plan_order, stakeholder_meet)