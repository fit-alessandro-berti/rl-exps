from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# Define transitions
seed_selection = Transition(label='Seed Selection')
ai_prediction = Transition(label='AI Prediction')
automated_planting = Transition(label='Automated Planting')
sensor_calibration = Transition(label='Sensor Calibration')
environment_adjust = Transition(label='Environment Adjust')
nutrient_dosing = Transition(label='Nutrient Dosing')
hydroponic_flow = Transition(label='Hydroponic Flow')
robotic_pruning = Transition(label='Robotic Pruning')
health_monitor = Transition(label='Health Monitor')
harvesting_ops = Transition(label='Harvesting Ops')
data_analysis = Transition(label='Data Analysis')
predictive_check = Transition(label='Predictive Check')
waste_composting = Transition(label='Waste Composting')
water_recycling = Transition(label='Water Recycling')
eco_packaging = Transition(label='Eco Packaging')
carbon_tracking = Transition(label='Carbon Tracking')
logistics_dispatch = Transition(label='Logistics Dispatch')

# Define loops and XORs
sensor_calibration_loop = OperatorPOWL(operator=Operator.LOOP, children=[sensor_calibration])
environment_adjust_loop = OperatorPOWL(operator=Operator.LOOP, children=[environment_adjust])
nutrient_dosing_loop = OperatorPOWL(operator=Operator.LOOP, children=[nutrient_dosing])
hydroponic_flow_loop = OperatorPOWL(operator=Operator.LOOP, children=[hydroponic_flow])
robotic_pruning_loop = OperatorPOWL(operator=Operator.LOOP, children=[robotic_pruning])
health_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[health_monitor])
harvesting_ops_loop = OperatorPOWL(operator=Operator.LOOP, children=[harvesting_ops])
data_analysis_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_analysis])
predictive_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[predictive_check])
waste_composting_loop = OperatorPOWL(operator=Operator.LOOP, children=[waste_composting])
water_recycling_loop = OperatorPOWL(operator=Operator.LOOP, children=[water_recycling])
eco_packaging_loop = OperatorPOWL(operator=Operator.LOOP, children=[eco_packaging])
carbon_tracking_loop = OperatorPOWL(operator=Operator.LOOP, children=[carbon_tracking])
logistics_dispatch_loop = OperatorPOWL(operator=Operator.LOOP, children=[logistics_dispatch])

# Define XORs
sensor_calibration_xor = OperatorPOWL(operator=Operator.XOR, children=[sensor_calibration, sensor_calibration_loop])
environment_adjust_xor = OperatorPOWL(operator=Operator.XOR, children=[environment_adjust, environment_adjust_loop])
nutrient_dosing_xor = OperatorPOWL(operator=Operator.XOR, children=[nutrient_dosing, nutrient_dosing_loop])
hydroponic_flow_xor = OperatorPOWL(operator=Operator.XOR, children=[hydroponic_flow, hydroponic_flow_loop])
robotic_pruning_xor = OperatorPOWL(operator=Operator.XOR, children=[robotic_pruning, robotic_pruning_loop])
health_monitor_xor = OperatorPOWL(operator=Operator.XOR, children=[health_monitor, health_monitor_loop])
harvesting_ops_xor = OperatorPOWL(operator=Operator.XOR, children=[harvesting_ops, harvesting_ops_loop])
data_analysis_xor = OperatorPOWL(operator=Operator.XOR, children=[data_analysis, data_analysis_loop])
predictive_check_xor = OperatorPOWL(operator=Operator.XOR, children=[predictive_check, predictive_check_loop])
waste_composting_xor = OperatorPOWL(operator=Operator.XOR, children=[waste_composting, waste_composting_loop])
water_recycling_xor = OperatorPOWL(operator=Operator.XOR, children=[water_recycling, water_recycling_loop])
eco_packaging_xor = OperatorPOWL(operator=Operator.XOR, children=[eco_packaging, eco_packaging_loop])
carbon_tracking_xor = OperatorPOWL(operator=Operator.XOR, children=[carbon_tracking, carbon_tracking_loop])
logistics_dispatch_xor = OperatorPOWL(operator=Operator.XOR, children=[logistics_dispatch, logistics_dispatch_loop])

# Define strict partial order
root = StrictPartialOrder(nodes=[seed_selection, ai_prediction, automated_planting, sensor_calibration_xor, environment_adjust_xor, nutrient_dosing_xor, hydroponic_flow_xor, robotic_pruning_xor, health_monitor_xor, harvesting_ops_xor, data_analysis_xor, predictive_check_xor, waste_composting_xor, water_recycling_xor, eco_packaging_xor, carbon_tracking_xor, logistics_dispatch_xor])
root.order.add_edge(seed_selection, ai_prediction)
root.order.add_edge(ai_prediction, automated_planting)
root.order.add_edge(automated_planting, sensor_calibration_xor)
root.order.add_edge(sensor_calibration_xor, environment_adjust_xor)
root.order.add_edge(environment_adjust_xor, nutrient_dosing_xor)
root.order.add_edge(nutrient_dosing_xor, hydroponic_flow_xor)
root.order.add_edge(hydroponic_flow_xor, robotic_pruning_xor)
root.order.add_edge(robotic_pruning_xor, health_monitor_xor)
root.order.add_edge(health_monitor_xor, harvesting_ops_xor)
root.order.add_edge(harvesting_ops_xor, data_analysis_xor)
root.order.add_edge(data_analysis_xor, predictive_check_xor)
root.order.add_edge(predictive_check_xor, waste_composting_xor)
root.order.add_edge(waste_composting_xor, water_recycling_xor)
root.order.add_edge(water_recycling_xor, eco_packaging_xor)
root.order.add_edge(eco_packaging_xor, carbon_tracking_xor)
root.order.add_edge(carbon_tracking_xor, logistics_dispatch_xor)