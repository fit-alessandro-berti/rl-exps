from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# Define activities
concept_ideation = Transition(label='Concept Ideation')
sponsor_alignment = Transition(label='Sponsor Alignment')
participant_sign_up = Transition(label='Participant SignUp')
team_formation = Transition(label='Team Formation')
workshop_setup = Transition(label='Workshop Setup')
workshop_delivery = Transition(label='Workshop Delivery')
progress_monitor = Transition(label='Progress Monitor')
live_support = Transition(label='Live Support')
feedback_loop = Transition(label='Feedback Loop')
submission_check = Transition(label='Submission Check')
plagiarism_scan = Transition(label='Plagiarism Scan')
jury_evaluation = Transition(label='Jury Evaluation')
result_compilation = Transition(label='Result Compilation')
winner_announcement = Transition(label='Winner Announcement')
post_analytics = Transition(label='Post Analytics')

# Define operators
xor1 = OperatorPOWL(operator=Operator.XOR, children=[sponsor_alignment, participant_sign_up])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[team_formation, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[workshop_setup, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[workshop_delivery, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[progress_monitor, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[live_support, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[submission_check, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[plagiarism_scan, xor8])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[jury_evaluation, xor9])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[result_compilation, xor10])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[winner_announcement, xor11])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[post_analytics, xor12])

# Define root
root = StrictPartialOrder(nodes=[xor13])
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor12, xor11)
root.order.add_edge(xor11, xor10)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor9, xor8)
root.order.add_edge(xor8, xor7)
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor1)