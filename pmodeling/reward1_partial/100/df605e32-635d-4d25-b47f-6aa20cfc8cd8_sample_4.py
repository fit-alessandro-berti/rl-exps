import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_scan = Transition(label='Artifact Scan')
ownership_verify = Transition(label='Ownership Verify')
risk_assess = Transition(label='Risk Assess')
legal_review = Transition(label='Legal Review')
stakeholder_notify = Transition(label='Stakeholder Notify')
recovery_plan = Transition(label='Recovery Plan')
third_party_contact = Transition(label='Third-Party Contact')
negotiation_setup = Transition(label='Negotiation Setup')
secure_transport = Transition(label='Secure Transport')
condition_inspect = Transition(label='Condition Inspect')
restoration_begin = Transition(label='Restoration Begin')
documentation_log = Transition(label='Documentation Log')
heritage_archive = Transition(label='Heritage Archive')
final_audit = Transition(label='Final Audit')
process_close = Transition(label='Process Close')

skip = SilentTransition()

artifact_scan_xor = OperatorPOWL(operator=Operator.XOR, children=[artifact_scan, skip])
ownership_verify_xor = OperatorPOWL(operator=Operator.XOR, children=[ownership_verify, skip])
risk_assess_xor = OperatorPOWL(operator=Operator.XOR, children=[risk_assess, skip])
legal_review_xor = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
stakeholder_notify_xor = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_notify, skip])
recovery_plan_xor = OperatorPOWL(operator=Operator.XOR, children=[recovery_plan, skip])
third_party_contact_xor = OperatorPOWL(operator=Operator.XOR, children=[third_party_contact, skip])
negotiation_setup_xor = OperatorPOWL(operator=Operator.XOR, children=[negotiation_setup, skip])
secure_transport_xor = OperatorPOWL(operator=Operator.XOR, children=[secure_transport, skip])
condition_inspect_xor = OperatorPOWL(operator=Operator.XOR, children=[condition_inspect, skip])
restoration_begin_xor = OperatorPOWL(operator=Operator.XOR, children=[restoration_begin, skip])
documentation_log_xor = OperatorPOWL(operator=Operator.XOR, children=[documentation_log, skip])
heritage_archive_xor = OperatorPOWL(operator=Operator.XOR, children=[heritage_archive, skip])
final_audit_xor = OperatorPOWL(operator=Operator.XOR, children=[final_audit, skip])
process_close_xor = OperatorPOWL(operator=Operator.XOR, children=[process_close, skip])

loop_artifact_scan = OperatorPOWL(operator=Operator.LOOP, children=[artifact_scan_xor, ownership_verify_xor, risk_assess_xor, legal_review_xor, stakeholder_notify_xor, recovery_plan_xor, third_party_contact_xor, negotiation_setup_xor, secure_transport_xor, condition_inspect_xor, restoration_begin_xor, documentation_log_xor, heritage_archive_xor, final_audit_xor, process_close_xor])

root = StrictPartialOrder(nodes=[loop_artifact_scan])
root.order.add_edge(loop_artifact_scan, artifact_scan_xor)
root.order.add_edge(loop_artifact_scan, ownership_verify_xor)
root.order.add_edge(loop_artifact_scan, risk_assess_xor)
root.order.add_edge(loop_artifact_scan, legal_review_xor)
root.order.add_edge(loop_artifact_scan, stakeholder_notify_xor)
root.order.add_edge(loop_artifact_scan, recovery_plan_xor)
root.order.add_edge(loop_artifact_scan, third_party_contact_xor)
root.order.add_edge(loop_artifact_scan, negotiation_setup_xor)
root.order.add_edge(loop_artifact_scan, secure_transport_xor)
root.order.add_edge(loop_artifact_scan, condition_inspect_xor)
root.order.add_edge(loop_artifact_scan, restoration_begin_xor)
root.order.add_edge(loop_artifact_scan, documentation_log_xor)
root.order.add_edge(loop_artifact_scan, heritage_archive_xor)
root.order.add_edge(loop_artifact_scan, final_audit_xor)
root.order.add_edge(loop_artifact_scan, process_close_xor)