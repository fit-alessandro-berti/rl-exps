import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
MilkSourcing = Transition(label='Milk Sourcing')
FarmAudit = Transition(label='Farm Audit')
MilkTesting = Transition(label='Milk Testing')
BatchForming = Transition(label='Batch Forming')
CurdCutting = Transition(label='Curd Cutting')
MoldingCheese = Transition(label='Molding Cheese')
SaltingProcess = Transition(label='Salting Process')
AgingControl = Transition(label='Aging Control')
QualityCheck = Transition(label='Quality Check')
PackagingDesign = Transition(label='Packaging Design')
LabelPrinting = Transition(label='Label Printing')
InventoryUpdate = Transition(label='Inventory Update')
OrderReceiving = Transition(label='Order Receiving')
RetailCoordination = Transition(label='Retail Coordination')
ShippingPrep = Transition(label='Shipping Prep')
CustomerFeedback = Transition(label='Customer Feedback')
DemandForecast = Transition(label='Demand Forecast')
LimitedRelease = Transition(label='Limited Release')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[MilkSourcing, FarmAudit, MilkTesting, BatchForming, CurdCutting, MoldingCheese, SaltingProcess, AgingControl, QualityCheck])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[PackagingDesign, LabelPrinting])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[InventoryUpdate, OrderReceiving])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[RetailCoordination, ShippingPrep])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[CustomerFeedback, DemandForecast])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[LimitedRelease, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[skip, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[skip, xor6])
root = StrictPartialOrder(nodes=[loop, xor1, xor2, xor3, xor4, xor5, xor6, xor7])
root.order.add_edge(loop, xor1)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor1, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor5, xor7)
root.order.add_edge(xor6, xor7)