import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
structure_prep = Transition(label='Structure Prep')
system_install = Transition(label='System Install')
env_control = Transition(label='Env Control')
nutrient_mix = Transition(label='Nutrient Mix')
crop_select = Transition(label='Crop Select')
ai_setup = Transition(label='AI Setup')
worker_train = Transition(label='Worker Train')
pest_control = Transition(label='Pest Control')
irrigation_plan = Transition(label='Irrigation Plan')
data_monitor = Transition(label='Data Monitor')
yield_forecast = Transition(label='Yield Forecast')
energy_audit = Transition(label='Energy Audit')
market_setup = Transition(label='Market Setup')
logistics_plan = Transition(label='Logistics Plan')
waste_manage = Transition(label='Waste Manage')

# Define the workflow
site_survey_to_structure_prep = OperatorPOWL(operator=Operator.XOR, children=[site_survey, structure_prep])
structure_prep_to_system_install = OperatorPOWL(operator=Operator.XOR, children=[structure_prep, system_install])
system_install_to_env_control = OperatorPOWL(operator=Operator.XOR, children=[system_install, env_control])
env_control_to_nutrient_mix = OperatorPOWL(operator=Operator.XOR, children=[env_control, nutrient_mix])
nutrient_mix_to_crop_select = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, crop_select])
crop_select_to_ai_setup = OperatorPOWL(operator=Operator.XOR, children=[crop_select, ai_setup])
ai_setup_to_worker_train = OperatorPOWL(operator=Operator.XOR, children=[ai_setup, worker_train])
worker_train_to_pest_control = OperatorPOWL(operator=Operator.XOR, children=[worker_train, pest_control])
pest_control_to_irrigation_plan = OperatorPOWL(operator=Operator.XOR, children=[pest_control, irrigation_plan])
irrigation_plan_to_data_monitor = OperatorPOWL(operator=Operator.XOR, children=[irrigation_plan, data_monitor])
data_monitor_to_yield_forecast = OperatorPOWL(operator=Operator.XOR, children=[data_monitor, yield_forecast])
yield_forecast_to_energy_audit = OperatorPOWL(operator=Operator.XOR, children=[yield_forecast, energy_audit])
energy_audit_to_market_setup = OperatorPOWL(operator=Operator.XOR, children=[energy_audit, market_setup])
market_setup_to_logistics_plan = OperatorPOWL(operator=Operator.XOR, children=[market_setup, logistics_plan])
logistics_plan_to_waste_manage = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, waste_manage])

root = StrictPartialOrder(nodes=[site_survey_to_structure_prep, structure_prep_to_system_install, system_install_to_env_control, env_control_to_nutrient_mix, nutrient_mix_to_crop_select, crop_select_to_ai_setup, ai_setup_to_worker_train, worker_train_to_pest_control, pest_control_to_irrigation_plan, irrigation_plan_to_data_monitor, data_monitor_to_yield_forecast, yield_forecast_to_energy_audit, energy_audit_to_market_setup, market_setup_to_logistics_plan, logistics_plan_to_waste_manage])
root.order.add_edge(site_survey_to_structure_prep, structure_prep_to_system_install)
root.order.add_edge(structure_prep_to_system_install, system_install_to_env_control)
root.order.add_edge(system_install_to_env_control, env_control_to_nutrient_mix)
root.order.add_edge(env_control_to_nutrient_mix, nutrient_mix_to_crop_select)
root.order.add_edge(nutrient_mix_to_crop_select, crop_select_to_ai_setup)
root.order.add_edge(crop_select_to_ai_setup, ai_setup_to_worker_train)
root.order.add_edge(ai_setup_to_worker_train, worker_train_to_pest_control)
root.order.add_edge(worker_train_to_pest_control, pest_control_to_irrigation_plan)
root.order.add_edge(pest_control_to_irrigation_plan, irrigation_plan_to_data_monitor)
root.order.add_edge(irrigation_plan_to_data_monitor, data_monitor_to_yield_forecast)
root.order.add_edge(data_monitor_to_yield_forecast, yield_forecast_to_energy_audit)
root.order.add_edge(yield_forecast_to_energy_audit, energy_audit_to_market_setup)
root.order.add_edge(energy_audit_to_market_setup, market_setup_to_logistics_plan)
root.order.add_edge(market_setup_to_logistics_plan, logistics_plan_to_waste_manage)