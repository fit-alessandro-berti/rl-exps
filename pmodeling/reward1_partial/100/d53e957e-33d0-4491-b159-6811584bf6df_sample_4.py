import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions (activities)
data_capture = Transition(label='Data Capture')
trend_scan = Transition(label='Trend Scan')
idea_workshop = Transition(label='Idea Workshop')
concept_draft = Transition(label='Concept Draft')
expert_review = Transition(label='Expert Review')
prototype_build = Transition(label='Prototype Build')
regulation_check = Transition(label='Regulation Check')
ip_alignment = Transition(label='IP Alignment')
supply_sync = Transition(label='Supply Sync')
market_mapping = Transition(label='Market Mapping')
pilot_launch = Transition(label='Pilot Launch')
feedback_loop = Transition(label='Feedback Loop')
design_iterate = Transition(label='Design Iterate')
impact_measure = Transition(label='Impact Measure')
strategy_adapt = Transition(label='Strategy Adapt')

# Define silent transitions
skip = SilentTransition()

# Define the POWL model
loop = OperatorPOWL(operator=Operator.LOOP, children=[trend_scan, data_capture])
xor = OperatorPOWL(operator=Operator.XOR, children=[idea_workshop, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[concept_draft, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[expert_review, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[prototype_build, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[regulation_check, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[ip_alignment, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[supply_sync, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[market_mapping, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[pilot_launch, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[design_iterate, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[impact_measure, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[strategy_adapt, skip])

root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)