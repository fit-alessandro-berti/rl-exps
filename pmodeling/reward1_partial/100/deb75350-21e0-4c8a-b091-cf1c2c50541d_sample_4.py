import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
intake_review = Transition(label='Intake Review')
visual_inspect = Transition(label='Visual Inspect')
material_test = Transition(label='Material Test')
provenance_check = Transition(label='Provenance Check')
archival_search = Transition(label='Archival Search')
expert_consult = Transition(label='Expert Consult')
digital_scan = Transition(label='Digital Scan')
condition_report = Transition(label='Condition Report')
forger_assess = Transition(label='Forgery Assess')
legal_review = Transition(label='Legal Review')
risk_analysis = Transition(label='Risk Analysis')
acquisition_vote = Transition(label='Acquisition Vote')
catalog_entry = Transition(label='Catalog Entry')
storage_prep = Transition(label='Storage Prep')
final_approval = Transition(label='Final Approval')

# Define the relationships between activities
intake_review_next = OperatorPOWL(operator=Operator.XOR, children=[visual_inspect, material_test])
visual_inspect_next = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, archival_search])
material_test_next = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, archival_search])
provenance_check_next = OperatorPOWL(operator=Operator.XOR, children=[expert_consult, digital_scan])
archival_search_next = OperatorPOWL(operator=Operator.XOR, children=[expert_consult, digital_scan])
expert_consult_next = OperatorPOWL(operator=Operator.XOR, children=[condition_report, forger_assess])
digital_scan_next = OperatorPOWL(operator=Operator.XOR, children=[condition_report, forger_assess])
condition_report_next = OperatorPOWL(operator=Operator.XOR, children=[legal_review, risk_analysis])
forger_assess_next = OperatorPOWL(operator=Operator.XOR, children=[legal_review, risk_analysis])
legal_review_next = OperatorPOWL(operator=Operator.XOR, children=[acquisition_vote, storage_prep])
risk_analysis_next = OperatorPOWL(operator=Operator.XOR, children=[acquisition_vote, storage_prep])
acquisition_vote_next = OperatorPOWL(operator=Operator.XOR, children=[catalog_entry, final_approval])
storage_prep_next = OperatorPOWL(operator=Operator.XOR, children=[catalog_entry, final_approval])
final_approval_next = OperatorPOWL(operator=Operator.XOR, children=[catalog_entry, final_approval])

# Construct the Partial Order
root = StrictPartialOrder(nodes=[intake_review, intake_review_next, visual_inspect, visual_inspect_next, material_test, material_test_next, provenance_check, provenance_check_next, archival_search, archival_search_next, expert_consult, expert_consult_next, digital_scan, digital_scan_next, condition_report, condition_report_next, forger_assess, forger_assess_next, legal_review, legal_review_next, risk_analysis, risk_analysis_next, acquisition_vote, acquisition_vote_next, storage_prep, storage_prep_next, final_approval, final_approval_next])
root.order.add_edge(intake_review, intake_review_next)
root.order.add_edge(intake_review_next, visual_inspect)
root.order.add_edge(intake_review_next, material_test)
root.order.add_edge(visual_inspect, visual_inspect_next)
root.order.add_edge(visual_inspect_next, provenance_check)
root.order.add_edge(visual_inspect_next, archival_search)
root.order.add_edge(material_test, material_test_next)
root.order.add_edge(material_test_next, provenance_check)
root.order.add_edge(material_test_next, archival_search)
root.order.add_edge(provenance_check, provenance_check_next)
root.order.add_edge(provenance_check_next, expert_consult)
root.order.add_edge(provenance_check_next, digital_scan)
root.order.add_edge(archival_search, archival_search_next)
root.order.add_edge(archival_search_next, expert_consult)
root.order.add_edge(archival_search_next, digital_scan)
root.order.add_edge(expert_consult, expert_consult_next)
root.order.add_edge(expert_consult_next, condition_report)
root.order.add_edge(expert_consult_next, forger_assess)
root.order.add_edge(digital_scan, digital_scan_next)
root.order.add_edge(digital_scan_next, condition_report)
root.order.add_edge(digital_scan_next, forger_assess)
root.order.add_edge(condition_report, condition_report_next)
root.order.add_edge(condition_report_next, legal_review)
root.order.add_edge(condition_report_next, risk_analysis)
root.order.add_edge(forger_assess, forger_assess_next)
root.order.add_edge(forger_assess_next, legal_review)
root.order.add_edge(forger_assess_next, risk_analysis)
root.order.add_edge(legal_review, legal_review_next)
root.order.add_edge(legal_review_next, acquisition_vote)
root.order.add_edge(legal_review_next, storage_prep)
root.order.add_edge(risk_analysis, risk_analysis_next)
root.order.add_edge(risk_analysis_next, acquisition_vote)
root.order.add_edge(risk_analysis_next, storage_prep)
root.order.add_edge(acquisition_vote, acquisition_vote_next)
root.order.add_edge(acquisition_vote_next, catalog_entry)
root.order.add_edge(acquisition_vote_next, storage_prep)
root.order.add_edge(storage_prep, storage_prep_next)
root.order.add_edge(storage_prep_next, catalog_entry)
root.order.add_edge(final_approval, final_approval_next)
root.order.add_edge(final_approval_next, catalog_entry)