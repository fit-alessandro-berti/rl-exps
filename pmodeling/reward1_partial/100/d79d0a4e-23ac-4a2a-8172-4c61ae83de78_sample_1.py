from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# Define transitions
spec_review = Transition(label='Spec Review')
component_pick = Transition(label='Component Pick')
frame_build = Transition(label='Frame Build')
motor_mount = Transition(label='Motor Mount')
sensor_fit = Transition(label='Sensor Fit')
wiring_setup = Transition(label='Wiring Setup')
software_load = Transition(label='Software Load')
calibration_test = Transition(label='Calibration Test')
stress_check = Transition(label='Stress Check')
firmware_flash = Transition(label='Firmware Flash')
feedback_loop = Transition(label='Feedback Loop')
package_prep = Transition(label='Package Prep')
doc_compile = Transition(label='Doc Compile')
ship_arrange = Transition(label='Ship Arrange')
remote_setup = Transition(label='Remote Setup')

# Define nodes
spec_review_node = OperatorPOWL(operator=Operator.POWL, children=[spec_review, component_pick])
component_pick_node = OperatorPOWL(operator=Operator.POWL, children=[frame_build, motor_mount, sensor_fit, wiring_setup])
frame_build_node = OperatorPOWL(operator=Operator.POWL, children=[software_load, calibration_test, stress_check, firmware_flash])
motor_mount_node = OperatorPOWL(operator=Operator.POWL, children=[calibration_test, stress_check, firmware_flash])
sensor_fit_node = OperatorPOWL(operator=Operator.POWL, children=[calibration_test, stress_check, firmware_flash])
wiring_setup_node = OperatorPOWL(operator=Operator.POWL, children=[calibration_test, stress_check, firmware_flash])
software_load_node = OperatorPOWL(operator=Operator.POWL, children=[calibration_test, stress_check, firmware_flash])
calibration_test_node = OperatorPOWL(operator=Operator.POWL, children=[stress_check, firmware_flash])
stress_check_node = OperatorPOWL(operator=Operator.POWL, children=[firmware_flash])
firmware_flash_node = OperatorPOWL(operator=Operator.POWL, children=[package_prep])
package_prep_node = OperatorPOWL(operator=Operator.POWL, children=[doc_compile, ship_arrange])
doc_compile_node = OperatorPOWL(operator=Operator.POWL, children=[ship_arrange])
ship_arrange_node = OperatorPOWL(operator=Operator.POWL, children=[remote_setup])

# Define root node
root = StrictPartialOrder(nodes=[spec_review_node, component_pick_node, frame_build_node, motor_mount_node, sensor_fit_node, wiring_setup_node, software_load_node, calibration_test_node, stress_check_node, firmware_flash_node, package_prep_node, doc_compile_node, ship_arrange_node, remote_setup])

# Define edges
root.order.add_edge(spec_review_node, component_pick_node)
root.order.add_edge(component_pick_node, frame_build_node)
root.order.add_edge(component_pick_node, motor_mount_node)
root.order.add_edge(component_pick_node, sensor_fit_node)
root.order.add_edge(component_pick_node, wiring_setup_node)
root.order.add_edge(frame_build_node, software_load_node)
root.order.add_edge(frame_build_node, calibration_test_node)
root.order.add_edge(frame_build_node, stress_check_node)
root.order.add_edge(frame_build_node, firmware_flash_node)
root.order.add_edge(motor_mount_node, calibration_test_node)
root.order.add_edge(motor_mount_node, stress_check_node)
root.order.add_edge(motor_mount_node, firmware_flash_node)
root.order.add_edge(sensor_fit_node, calibration_test_node)
root.order.add_edge(sensor_fit_node, stress_check_node)
root.order.add_edge(sensor_fit_node, firmware_flash_node)
root.order.add_edge(wiring_setup_node, calibration_test_node)
root.order.add_edge(wiring_setup_node, stress_check_node)
root.order.add_edge(wiring_setup_node, firmware_flash_node)
root.order.add_edge(software_load_node, calibration_test_node)
root.order.add_edge(software_load_node, stress_check_node)
root.order.add_edge(software_load_node, firmware_flash_node)
root.order.add_edge(calibration_test_node, stress_check_node)
root.order.add_edge(calibration_test_node, firmware_flash_node)
root.order.add_edge(stress_check_node, firmware_flash_node)
root.order.add_edge(firmware_flash_node, package_prep_node)
root.order.add_edge(package_prep_node, doc_compile_node)
root.order.add_edge(package_prep_node, ship_arrange_node)
root.order.add_edge(doc_compile_node, ship_arrange_node)
root.order.add_edge(ship_arrange_node, remote_setup)

print(root)