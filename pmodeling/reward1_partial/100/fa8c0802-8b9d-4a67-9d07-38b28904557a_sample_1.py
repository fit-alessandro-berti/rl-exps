import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions
data_aggregation = Transition(label='Data Aggregation')
anomaly_detect = Transition(label='Anomaly Detect')
risk_assess = Transition(label='Risk Assess')
demand_model = Transition(label='Demand Model')
stakeholder_sync = Transition(label='Stakeholder Sync')
auto_negotiate = Transition(label='Auto Negotiate')
inventory_optimize = Transition(label='Inventory Optimize')
contingency_plan = Transition(label='Contingency Plan')
resource_allocate = Transition(label='Resource Allocate')
sustainability_check = Transition(label='Sustainability Check')
compliance_verify = Transition(label='Compliance Verify')
impact_score = Transition(label='Impact Score')
distribution_plan = Transition(label='Distribution Plan')
feedback_loop = Transition(label='Feedback Loop')
performance_audit = Transition(label='Performance Audit')
schedule_execute = Transition(label='Schedule Execute')

# Define the partial order
root = StrictPartialOrder(
    nodes=[data_aggregation, anomaly_detect, risk_assess, demand_model, stakeholder_sync, auto_negotiate, inventory_optimize, contingency_plan, resource_allocate, sustainability_check, compliance_verify, impact_score, distribution_plan, feedback_loop, performance_audit, schedule_execute]
)

# Define the dependencies between transitions
root.order.add_edge(data_aggregation, anomaly_detect)
root.order.add_edge(data_aggregation, risk_assess)
root.order.add_edge(data_aggregation, demand_model)
root.order.add_edge(data_aggregation, stakeholder_sync)
root.order.add_edge(data_aggregation, auto_negotiate)
root.order.add_edge(data_aggregation, inventory_optimize)
root.order.add_edge(data_aggregation, contingency_plan)
root.order.add_edge(data_aggregation, resource_allocate)
root.order.add_edge(data_aggregation, sustainability_check)
root.order.add_edge(data_aggregation, compliance_verify)
root.order.add_edge(data_aggregation, impact_score)
root.order.add_edge(data_aggregation, distribution_plan)
root.order.add_edge(data_aggregation, feedback_loop)
root.order.add_edge(data_aggregation, performance_audit)
root.order.add_edge(data_aggregation, schedule_execute)

root.order.add_edge(anomaly_detect, stakeholder_sync)
root.order.add_edge(anomaly_detect, auto_negotiate)
root.order.add_edge(anomaly_detect, inventory_optimize)
root.order.add_edge(anomaly_detect, contingency_plan)
root.order.add_edge(anomaly_detect, resource_allocate)
root.order.add_edge(anomaly_detect, sustainability_check)
root.order.add_edge(anomaly_detect, compliance_verify)
root.order.add_edge(anomaly_detect, impact_score)
root.order.add_edge(anomaly_detect, distribution_plan)
root.order.add_edge(anomaly_detect, feedback_loop)
root.order.add_edge(anomaly_detect, performance_audit)
root.order.add_edge(anomaly_detect, schedule_execute)

root.order.add_edge(risk_assess, stakeholder_sync)
root.order.add_edge(risk_assess, auto_negotiate)
root.order.add_edge(risk_assess, inventory_optimize)
root.order.add_edge(risk_assess, contingency_plan)
root.order.add_edge(risk_assess, resource_allocate)
root.order.add_edge(risk_assess, sustainability_check)
root.order.add_edge(risk_assess, compliance_verify)
root.order.add_edge(risk_assess, impact_score)
root.order.add_edge(risk_assess, distribution_plan)
root.order.add_edge(risk_assess, feedback_loop)
root.order.add_edge(risk_assess, performance_audit)
root.order.add_edge(risk_assess, schedule_execute)

root.order.add_edge(demand_model, stakeholder_sync)
root.order.add_edge(demand_model, auto_negotiate)
root.order.add_edge(demand_model, inventory_optimize)
root.order.add_edge(demand_model, contingency_plan)
root.order.add_edge(demand_model, resource_allocate)
root.order.add_edge(demand_model, sustainability_check)
root.order.add_edge(demand_model, compliance_verify)
root.order.add_edge(demand_model, impact_score)
root.order.add_edge(demand_model, distribution_plan)
root.order.add_edge(demand_model, feedback_loop)
root.order.add_edge(demand_model, performance_audit)
root.order.add_edge(demand_model, schedule_execute)

root.order.add_edge(stakeholder_sync, auto_negotiate)
root.order.add_edge(stakeholder_sync, inventory_optimize)
root.order.add_edge(stakeholder_sync, contingency_plan)
root.order.add_edge(stakeholder_sync, resource_allocate)
root.order.add_edge(stakeholder_sync, sustainability_check)
root.order.add_edge(stakeholder_sync, compliance_verify)
root.order.add_edge(stakeholder_sync, impact_score)
root.order.add_edge(stakeholder_sync, distribution_plan)
root.order.add_edge(stakeholder_sync, feedback_loop)
root.order.add_edge(stakeholder_sync, performance_audit)
root.order.add_edge(stakeholder_sync, schedule_execute)

root.order.add_edge(auto_negotiate, inventory_optimize)
root.order.add_edge(auto_negotiate, contingency_plan)
root.order.add_edge(auto_negotiate, resource_allocate)
root.order.add_edge(auto_negotiate, sustainability_check)
root.order.add_edge(auto_negotiate, compliance_verify)
root.order.add_edge(auto_negotiate, impact_score)
root.order.add_edge(auto_negotiate, distribution_plan)
root.order.add_edge(auto_negotiate, feedback_loop)
root.order.add_edge(auto_negotiate, performance_audit)
root.order.add_edge(auto_negotiate, schedule_execute)

root.order.add_edge(inventory_optimize, contingency_plan)
root.order.add_edge(inventory_optimize, resource_allocate)
root.order.add_edge(inventory_optimize, sustainability_check)
root.order.add_edge(inventory_optimize, compliance_verify)
root.order.add_edge(inventory_optimize, impact_score)
root.order.add_edge(inventory_optimize, distribution_plan)
root.order.add_edge(inventory_optimize, feedback_loop)
root.order.add_edge(inventory_optimize, performance_audit)
root.order.add_edge(inventory_optimize, schedule_execute)

root.order.add_edge(contingency_plan, resource_allocate)
root.order.add_edge(contingency_plan, sustainability_check)
root.order.add_edge(contingency_plan, compliance_verify)
root.order.add_edge(contingency_plan, impact_score)
root.order.add_edge(contingency_plan, distribution_plan)
root.order.add_edge(contingency_plan, feedback_loop)
root.order.add_edge(contingency_plan, performance_audit)
root.order.add_edge(contingency_plan, schedule_execute)

root.order.add_edge(resource_allocate, sustainability_check)
root.order.add_edge(resource_allocate, compliance_verify)
root.order.add_edge(resource_allocate, impact_score)
root.order.add_edge(resource_allocate, distribution_plan)
root.order.add_edge(resource_allocate, feedback_loop)
root.order.add_edge(resource_allocate, performance_audit)
root.order.add_edge(resource_allocate, schedule_execute)

root.order.add_edge(sustainability_check, compliance_verify)
root.order.add_edge(sustainability_check, impact_score)
root.order.add_edge(sustainability_check, distribution_plan)
root.order.add_edge(sustainability_check, feedback_loop)
root.order.add_edge(sustainability_check, performance_audit)
root.order.add_edge(sustainability_check, schedule_execute)

root.order.add_edge(compliance_verify, impact_score)
root.order.add_edge(compliance_verify, distribution_plan)
root.order.add_edge(compliance_verify, feedback_loop)
root.order.add_edge(compliance_verify, performance_audit)
root.order.add_edge(compliance_verify, schedule_execute)

root.order.add_edge(impact_score, distribution_plan)
root.order.add_edge(impact_score, feedback_loop)
root.order.add_edge(impact_score, performance_audit)
root.order.add_edge(impact_score, schedule_execute)

root.order.add_edge(distribution_plan, feedback_loop)
root.order.add_edge(distribution_plan, performance_audit)
root.order.add_edge(distribution_plan, schedule_execute)

root.order.add_edge(feedback_loop, performance_audit)
root.order.add_edge(feedback_loop, schedule_execute)

root.order.add_edge(performance_audit, schedule_execute)