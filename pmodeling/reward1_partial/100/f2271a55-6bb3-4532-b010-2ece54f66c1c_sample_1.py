import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions (activities)
provenance_check = Transition(label='Provenance Check')
spectroscopy_test = Transition(label='Spectroscopy Test')
carbon_dating = Transition(label='Carbon Dating')
style_analysis = Transition(label='Style Analysis')
image_scanning = Transition(label='Image Scanning')
restoration_scan = Transition(label='Restoration Scan')
appraiser_review = Transition(label='Appraiser Review')
database_match = Transition(label='Database Match')
blockchain_entry = Transition(label='Blockchain Entry')
certificate_issue = Transition(label='Certificate Issue')
forgery_detect = Transition(label='Forgery Detect')
report_compilation = Transition(label='Report Compilation')
client_briefing = Transition(label='Client Briefing')
secure_storage = Transition(label='Secure Storage')
final_approval = Transition(label='Final Approval')

# Define silent transitions
skip = SilentTransition()

# Define loops and exclusive choices
provenance_loop = OperatorPOWL(operator=Operator.LOOP, children=[provenance_check])
spectroscopy_loop = OperatorPOWL(operator=Operator.LOOP, children=[spectroscopy_test, carbon_dating])
style_loop = OperatorPOWL(operator=Operator.LOOP, children=[style_analysis])
image_loop = OperatorPOWL(operator=Operator.LOOP, children=[image_scanning])
restoration_loop = OperatorPOWL(operator=Operator.LOOP, children=[restoration_scan])
appraiser_loop = OperatorPOWL(operator=Operator.LOOP, children=[appraiser_review])
database_loop = OperatorPOWL(operator=Operator.LOOP, children=[database_match])
blockchain_loop = OperatorPOWL(operator=Operator.LOOP, children=[blockchain_entry])
certificate_loop = OperatorPOWL(operator=Operator.LOOP, children=[certificate_issue])
forgery_loop = OperatorPOWL(operator=Operator.LOOP, children=[forgery_detect])
report_loop = OperatorPOWL(operator=Operator.LOOP, children=[report_compilation])
client_loop = OperatorPOWL(operator=Operator.LOOP, children=[client_briefing])
storage_loop = OperatorPOWL(operator=Operator.LOOP, children=[secure_storage])
approval_loop = OperatorPOWL(operator=Operator.LOOP, children=[final_approval])

# Define exclusive choices
provenance_xor = OperatorPOWL(operator=Operator.XOR, children=[provenance_loop, skip])
spectroscopy_xor = OperatorPOWL(operator=Operator.XOR, children=[spectroscopy_loop, skip])
style_xor = OperatorPOWL(operator=Operator.XOR, children=[style_loop, skip])
image_xor = OperatorPOWL(operator=Operator.XOR, children=[image_loop, skip])
restoration_xor = OperatorPOWL(operator=Operator.XOR, children=[restoration_loop, skip])
appraiser_xor = OperatorPOWL(operator=Operator.XOR, children=[appraiser_loop, skip])
database_xor = OperatorPOWL(operator=Operator.XOR, children=[database_loop, skip])
blockchain_xor = OperatorPOWL(operator=Operator.XOR, children=[blockchain_loop, skip])
certificate_xor = OperatorPOWL(operator=Operator.XOR, children=[certificate_loop, skip])
forgery_xor = OperatorPOWL(operator=Operator.XOR, children=[forgery_loop, skip])
report_xor = OperatorPOWL(operator=Operator.XOR, children=[report_loop, skip])
client_xor = OperatorPOWL(operator=Operator.XOR, children=[client_loop, skip])
storage_xor = OperatorPOWL(operator=Operator.XOR, children=[storage_loop, skip])
approval_xor = OperatorPOWL(operator=Operator.XOR, children=[approval_loop, skip])

# Define the root POWL model
root = StrictPartialOrder(nodes=[provenance_xor, spectroscopy_xor, style_xor, image_xor, restoration_xor, appraiser_xor, database_xor, blockchain_xor, certificate_xor, forgery_xor, report_xor, client_xor, storage_xor, approval_xor])
root.order.add_edge(provenance_xor, spectroscopy_xor)
root.order.add_edge(spectroscopy_xor, style_xor)
root.order.add_edge(style_xor, image_xor)
root.order.add_edge(image_xor, restoration_xor)
root.order.add_edge(restoration_xor, appraiser_xor)
root.order.add_edge(appraiser_xor, database_xor)
root.order.add_edge(database_xor, blockchain_xor)
root.order.add_edge(blockchain_xor, certificate_xor)
root.order.add_edge(certificate_xor, forgery_xor)
root.order.add_edge(forgery_xor, report_xor)
root.order.add_edge(report_xor, client_xor)
root.order.add_edge(client_xor, storage_xor)
root.order.add_edge(storage_xor, approval_xor)