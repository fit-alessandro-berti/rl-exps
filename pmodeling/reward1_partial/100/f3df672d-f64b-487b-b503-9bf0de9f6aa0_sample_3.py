import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

data_collection = Transition(label='Data Collection')
provenance_check = Transition(label='Provenance Check')
material_scan = Transition(label='Material Scan')
historical_review = Transition(label='Historical Review')
expert_panel = Transition(label='Expert Panel')
blockchain_verify = Transition(label='Blockchain Verify')
oral_history = Transition(label='Oral History')
condition_report = Transition(label='Condition Report')
legal_review = Transition(label='Legal Review')
certification = Transition(label='Certification')
archival_update = Transition(label='Archival Update')
insurance_setup = Transition(label='Insurance Setup')
exhibition_prep = Transition(label='Exhibition Prep')
iot_monitoring = Transition(label='IoT Monitoring')
re_validation = Transition(label='Re-validation')

skip = SilentTransition()

# Step 1: Data Collection
data_collection_to_provenance_check = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, skip])
provenance_check_to_material_scan = OperatorPOWL(operator=Operator.XOR, children=[material_scan, skip])
material_scan_to_historical_review = OperatorPOWL(operator=Operator.XOR, children=[historical_review, skip])
historical_review_to_expert_panel = OperatorPOWL(operator=Operator.XOR, children=[expert_panel, skip])
expert_panel_to_blockchain_verify = OperatorPOWL(operator=Operator.XOR, children=[blockchain_verify, skip])
blockchain_verify_to_oral_history = OperatorPOWL(operator=Operator.XOR, children=[oral_history, skip])
oral_history_to_condition_report = OperatorPOWL(operator=Operator.XOR, children=[condition_report, skip])
condition_report_to_legal_review = OperatorPOWL(operator=Operator.XOR, children=[legal_review, skip])
legal_review_to_certification = OperatorPOWL(operator=Operator.XOR, children=[certification, skip])
certification_to_archival_update = OperatorPOWL(operator=Operator.XOR, children=[archival_update, skip])
archival_update_to_insurance_setup = OperatorPOWL(operator=Operator.XOR, children=[insurance_setup, skip])
insurance_setup_to_exhibition_prep = OperatorPOWL(operator=Operator.XOR, children=[exhibition_prep, skip])
exhibition_prep_to_iot_monitoring = OperatorPOWL(operator=Operator.XOR, children=[iot_monitoring, skip])
iot_monitoring_to_re_validation = OperatorPOWL(operator=Operator.XOR, children=[re_validation, skip])

root = StrictPartialOrder(nodes=[data_collection_to_provenance_check, provenance_check_to_material_scan, material_scan_to_historical_review, historical_review_to_expert_panel, expert_panel_to_blockchain_verify, blockchain_verify_to_oral_history, oral_history_to_condition_report, condition_report_to_legal_review, legal_review_to_certification, certification_to_archival_update, archival_update_to_insurance_setup, insurance_setup_to_exhibition_prep, exhibition_prep_to_iot_monitoring, iot_monitoring_to_re_validation])
root.order.add_edge(data_collection_to_provenance_check, provenance_check_to_material_scan)
root.order.add_edge(provenance_check_to_material_scan, material_scan_to_historical_review)
root.order.add_edge(material_scan_to_historical_review, historical_review_to_expert_panel)
root.order.add_edge(historical_review_to_expert_panel, expert_panel_to_blockchain_verify)
root.order.add_edge(expert_panel_to_blockchain_verify, blockchain_verify_to_oral_history)
root.order.add_edge(blockchain_verify_to_oral_history, oral_history_to_condition_report)
root.order.add_edge(oral_history_to_condition_report, condition_report_to_legal_review)
root.order.add_edge(condition_report_to_legal_review, legal_review_to_certification)
root.order.add_edge(legal_review_to_certification, certification_to_archival_update)
root.order.add_edge(certification_to_archival_update, archival_update_to_insurance_setup)
root.order.add_edge(archival_update_to_insurance_setup, insurance_setup_to_exhibition_prep)
root.order.add_edge(insurance_setup_to_exhibition_prep, exhibition_prep_to_iot_monitoring)
root.order.add_edge(exhibition_prep_to_iot_monitoring, iot_monitoring_to_re_validation)

print(root)