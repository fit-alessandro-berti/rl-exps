from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
artifact_scan = Transition(label='Artifact Scan')
ownership_verify = Transition(label='Ownership Verify')
risk_assess = Transition(label='Risk Assess')
legal_review = Transition(label='Legal Review')
stakeholder_notify = Transition(label='Stakeholder Notify')
recovery_plan = Transition(label='Recovery Plan')
third_party_contact = Transition(label='Third-Party Contact')
negotiation_setup = Transition(label='Negotiation Setup')
secure_transport = Transition(label='Secure Transport')
condition_inspect = Transition(label='Condition Inspect')
restoration_begin = Transition(label='Restoration Begin')
documentation_log = Transition(label='Documentation Log')
heritage_archive = Transition(label='Heritage Archive')
final_audit = Transition(label='Final Audit')
process_close = Transition(label='Process Close')

# Define the process steps
artifact_scan_next = OperatorPOWL(operator=Operator.XOR, children=[risk_assess, legal_review])
risk_assess_next = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_notify, recovery_plan])
legal_review_next = OperatorPOWL(operator=Operator.XOR, children=[third_party_contact, recovery_plan])
stakeholder_notify_next = OperatorPOWL(operator=Operator.XOR, children=[negotiation_setup, recovery_plan])
third_party_contact_next = OperatorPOWL(operator=Operator.XOR, children=[secure_transport, recovery_plan])
negotiation_setup_next = OperatorPOWL(operator=Operator.XOR, children=[condition_inspect, recovery_plan])
secure_transport_next = OperatorPOWL(operator=Operator.XOR, children=[restoration_begin, recovery_plan])
condition_inspect_next = OperatorPOWL(operator=Operator.XOR, children=[documentation_log, recovery_plan])
restoration_begin_next = OperatorPOWL(operator=Operator.XOR, children=[heritage_archive, recovery_plan])
documentation_log_next = OperatorPOWL(operator=Operator.XOR, children=[final_audit, recovery_plan])
heritage_archive_next = OperatorPOWL(operator=Operator.XOR, children=[process_close, recovery_plan])
recovery_plan_next = OperatorPOWL(operator=Operator.XOR, children=[secure_transport, documentation_log])

# Define the partial order
root = StrictPartialOrder(nodes=[artifact_scan, ownership_verify, risk_assess, legal_review, stakeholder_notify, recovery_plan, third_party_contact, negotiation_setup, secure_transport, condition_inspect, restoration_begin, documentation_log, heritage_archive, final_audit, process_close])
root.order.add_edge(artifact_scan, risk_assess_next)
root.order.add_edge(risk_assess, stakeholder_notify_next)
root.order.add_edge(legal_review, recovery_plan_next)
root.order.add_edge(stakeholder_notify, third_party_contact_next)
root.order.add_edge(third_party_contact, negotiation_setup_next)
root.order.add_edge(negotiation_setup, secure_transport_next)
root.order.add_edge(secure_transport, condition_inspect_next)
root.order.add_edge(condition_inspect, restoration_begin_next)
root.order.add_edge(restoration_begin, documentation_log_next)
root.order.add_edge(documentation_log, heritage_archive_next)
root.order.add_edge(heritage_archive, final_audit_next)
root.order.add_edge(final_audit, process_close_next)
root.order.add_edge(recovery_plan, secure_transport_next)
root.order.add_edge(recovery_plan, documentation_log_next)