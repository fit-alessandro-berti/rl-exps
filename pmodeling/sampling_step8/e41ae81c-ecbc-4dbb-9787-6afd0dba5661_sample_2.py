import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
structure_reinforce = Transition(label='Structure Reinforce')
hydroponic_setup = Transition(label='Hydroponic Setup')
climate_install = Transition(label='Climate Install')
ai_integration = Transition(label='AI Integration')
seed_sourcing = Transition(label='Seed Sourcing')
nutrient_prep = Transition(label='Nutrient Prep')
system_testing = Transition(label='System Testing')
staff_training = Transition(label='Staff Training')
crop_planting = Transition(label='Crop Planting')
growth_monitor = Transition(label='Growth Monitor')
pest_control = Transition(label='Pest Control')
harvest_schedule = Transition(label='Harvest Schedule')
quality_check = Transition(label='Quality Check')
market_dispatch = Transition(label='Market Dispatch')
waste_recycle = Transition(label='Waste Recycle')
data_analysis = Transition(label='Data Analysis')

skip = SilentTransition()
xor1 = OperatorPOWL(operator=Operator.XOR, children=[data_analysis, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[quality_check, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[market_dispatch, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[waste_recycle, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[harvest_schedule, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[staff_training, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[system_testing, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[nutrient_prep, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[crop_planting, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[ai_integration, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[seed_sourcing, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[hydroponic_setup, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[climate_install, skip])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[structure_reinforce, skip])
xor17 = OperatorPOWL(operator=Operator.XOR, children=[site_survey, skip])

root = StrictPartialOrder(nodes=[
    site_survey, structure_reinforce, hydroponic_setup, climate_install, ai_integration, seed_sourcing, nutrient_prep, system_testing, staff_training, crop_planting, growth_monitor, pest_control, harvest_schedule, quality_check, market_dispatch, waste_recycle, data_analysis, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15, xor16, xor17
])
root.order.add_edge(site_survey, xor16)
root.order.add_edge(structure_reinforce, xor15)
root.order.add_edge(hydroponic_setup, xor14)
root.order.add_edge(climate_install, xor13)
root.order.add_edge(ai_integration, xor12)
root.order.add_edge(seed_sourcing, xor11)
root.order.add_edge(nutrient_prep, xor10)
root.order.add_edge(system_testing, xor9)
root.order.add_edge(staff_training, xor8)
root.order.add_edge(crop_planting, xor7)
root.order.add_edge(growth_monitor, xor6)
root.order.add_edge(pest_control, xor5)
root.order.add_edge(harvest_schedule, xor4)
root.order.add_edge(quality_check, xor3)
root.order.add_edge(market_dispatch, xor2)
root.order.add_edge(waste_recycle, xor1)