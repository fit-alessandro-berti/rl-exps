import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

spec_review = Transition(label='Spec Review')
component_pick = Transition(label='Component Pick')
frame_build = Transition(label='Frame Build')
motor_mount = Transition(label='Motor Mount')
sensor_fit = Transition(label='Sensor Fit')
wiring_setup = Transition(label='Wiring Setup')
software_load = Transition(label='Software Load')
calibration_test = Transition(label='Calibration Test')
stress_check = Transition(label='Stress Check')
firmware_flash = Transition(label='Firmware Flash')
feedback_loop = Transition(label='Feedback Loop')
package_prep = Transition(label='Package Prep')
doc_compile = Transition(label='Doc Compile')
ship_arrange = Transition(label='Ship Arrange')
remote_setup = Transition(label='Remote Setup')

spec_review_to_component_pick = OperatorPOWL(operator=Operator.XOR, children=[spec_review, component_pick])
component_pick_to_frame_build = OperatorPOWL(operator=Operator.XOR, children=[component_pick, frame_build])
frame_build_to_motor_mount = OperatorPOWL(operator=Operator.XOR, children=[frame_build, motor_mount])
motor_mount_to_sensor_fit = OperatorPOWL(operator=Operator.XOR, children=[motor_mount, sensor_fit])
sensor_fit_to_wiring_setup = OperatorPOWL(operator=Operator.XOR, children=[sensor_fit, wiring_setup])
wiring_setup_to_software_load = OperatorPOWL(operator=Operator.XOR, children=[wiring_setup, software_load])
software_load_to_calibration_test = OperatorPOWL(operator=Operator.XOR, children=[software_load, calibration_test])
calibration_test_to_stress_check = OperatorPOWL(operator=Operator.XOR, children=[calibration_test, stress_check])
stress_check_to_firmware_flash = OperatorPOWL(operator=Operator.XOR, children=[stress_check, firmware_flash])
firmware_flash_to_feedback_loop = OperatorPOWL(operator=Operator.XOR, children=[firmware_flash, feedback_loop])
feedback_loop_to_package_prep = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, package_prep])
package_prep_to_doc_compile = OperatorPOWL(operator=Operator.XOR, children=[package_prep, doc_compile])
doc_compile_to_ship_arrange = OperatorPOWL(operator=Operator.XOR, children=[doc_compile, ship_arrange])
ship_arrange_to_remote_setup = OperatorPOWL(operator=Operator.XOR, children=[ship_arrange, remote_setup])

root = StrictPartialOrder(nodes=[spec_review_to_component_pick, component_pick_to_frame_build, frame_build_to_motor_mount, motor_mount_to_sensor_fit, sensor_fit_to_wiring_setup, wiring_setup_to_software_load, software_load_to_calibration_test, calibration_test_to_stress_check, stress_check_to_firmware_flash, firmware_flash_to_feedback_loop, feedback_loop_to_package_prep, package_prep_to_doc_compile, doc_compile_to_ship_arrange, ship_arrange_to_remote_setup])
root.order.add_edge(spec_review_to_component_pick, component_pick_to_frame_build)
root.order.add_edge(component_pick_to_frame_build, frame_build_to_motor_mount)
root.order.add_edge(frame_build_to_motor_mount, motor_mount_to_sensor_fit)
root.order.add_edge(motor_mount_to_sensor_fit, sensor_fit_to_wiring_setup)
root.order.add_edge(sensor_fit_to_wiring_setup, wiring_setup_to_software_load)
root.order.add_edge(wiring_setup_to_software_load, software_load_to_calibration_test)
root.order.add_edge(software_load_to_calibration_test, calibration_test_to_stress_check)
root.order.add_edge(calibration_test_to_stress_check, stress_check_to_firmware_flash)
root.order.add_edge(stress_check_to_firmware_flash, firmware_flash_to_feedback_loop)
root.order.add_edge(firmware_flash_to_feedback_loop, feedback_loop_to_package_prep)
root.order.add_edge(feedback_loop_to_package_prep, package_prep_to_doc_compile)
root.order.add_edge(package_prep_to_doc_compile, doc_compile_to_ship_arrange)
root.order.add_edge(doc_compile_to_ship_arrange, ship_arrange_to_remote_setup)