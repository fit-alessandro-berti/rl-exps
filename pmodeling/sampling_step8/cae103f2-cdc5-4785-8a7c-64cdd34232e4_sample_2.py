import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_acq = Transition(label='Site Acquisition')
impact_assess = Transition(label='Impact Assess')
modular_setup = Transition(label='Modular Setup')
crop_planting = Transition(label='Crop Planting')
nutrient_control = Transition(label='Nutrient Control')
pest_control = Transition(label='Pest Control')
growth_monitor = Transition(label='Growth Monitor')
community_engage = Transition(label='Community Engage')
yield_forecast = Transition(label='Yield Forecast')
supply_coordinate = Transition(label='Supply Coordinate')
compliance_check = Transition(label='Compliance Check')
waste_recycle = Transition(label='Waste Recycle')
energy_optimize = Transition(label='Energy Optimize')
market_strategy = Transition(label='Market Strategy')
performance_review = Transition(label='Performance Review')
skip = SilentTransition()

site_acq_to_impact_assess = OperatorPOWL(operator=Operator.XOR, children=[impact_assess, skip])
impact_assess_to_modular_setup = OperatorPOWL(operator=Operator.XOR, children=[modular_setup, skip])
modular_setup_to_crop_planting = OperatorPOWL(operator=Operator.XOR, children=[crop_planting, skip])
crop_planting_to_nutrient_control = OperatorPOWL(operator=Operator.XOR, children=[nutrient_control, skip])
nutrient_control_to_pest_control = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
pest_control_to_growth_monitor = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor, skip])
growth_monitor_to_community_engage = OperatorPOWL(operator=Operator.XOR, children=[community_engage, skip])
community_engage_to_yield_forecast = OperatorPOWL(operator=Operator.XOR, children=[yield_forecast, skip])
yield_forecast_to_supply_coordinate = OperatorPOWL(operator=Operator.XOR, children=[supply_coordinate, skip])
supply_coordinate_to_compliance_check = OperatorPOWL(operator=Operator.XOR, children=[compliance_check, skip])
compliance_check_to_waste_recycle = OperatorPOWL(operator=Operator.XOR, children=[waste_recycle, skip])
waste_recycle_to_energy_optimize = OperatorPOWL(operator=Operator.XOR, children=[energy_optimize, skip])
energy_optimize_to_market_strategy = OperatorPOWL(operator=Operator.XOR, children=[market_strategy, skip])
market_strategy_to_performance_review = OperatorPOWL(operator=Operator.XOR, children=[performance_review, skip])

root = StrictPartialOrder(nodes=[site_acq, impact_assess, modular_setup, crop_planting, nutrient_control, pest_control, growth_monitor, community_engage, yield_forecast, supply_coordinate, compliance_check, waste_recycle, energy_optimize, market_strategy, performance_review])
root.order.add_edge(site_acq, impact_assess)
root.order.add_edge(impact_assess, modular_setup)
root.order.add_edge(modular_setup, crop_planting)
root.order.add_edge(crop_planting, nutrient_control)
root.order.add_edge(nutrient_control, pest_control)
root.order.add_edge(pest_control, growth_monitor)
root.order.add_edge(growth_monitor, community_engage)
root.order.add_edge(community_engage, yield_forecast)
root.order.add_edge(yield_forecast, supply_coordinate)
root.order.add_edge(supply_coordinate, compliance_check)
root.order.add_edge(compliance_check, waste_recycle)
root.order.add_edge(waste_recycle, energy_optimize)
root.order.add_edge(energy_optimize, market_strategy)
root.order.add_edge(market_strategy, performance_review)