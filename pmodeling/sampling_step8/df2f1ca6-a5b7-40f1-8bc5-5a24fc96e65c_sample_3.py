import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
material_sourcing = Transition(label='Material Sourcing')
artisan_vetting = Transition(label='Artisan Vetting')
sample_review = Transition(label='Sample Review')
design_finalize = Transition(label='Design Finalize')
batch_scheduling = Transition(label='Batch Scheduling')
quality_check = Transition(label='Quality Check')
custom_packaging = Transition(label='Custom Packaging')
demand_forecast = Transition(label='Demand Forecast')
price_adjust = Transition(label='Price Adjust')
inventory_sync = Transition(label='Inventory Sync')
order_processing = Transition(label='Order Processing')
craft_coordination = Transition(label='Craft Coordination')
shipment_plan = Transition(label='Shipment Plan')
market_analysis = Transition(label='Market Analysis')
feedback_loop = Transition(label='Feedback Loop')
trend_monitor = Transition(label='Trend Monitor')

# Define the POWL model
xor1 = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, price_adjust])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[inventory_sync, order_processing])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[craft_coordination, shipment_plan])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[market_analysis, feedback_loop])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[trend_monitor, price_adjust])
root = StrictPartialOrder(nodes=[material_sourcing, artisan_vetting, sample_review, design_finalize, batch_scheduling, quality_check, custom_packaging, xor1, xor2, xor3, xor4, xor5])
root.order.add_edge(material_sourcing, artisan_vetting)
root.order.add_edge(artisan_vetting, sample_review)
root.order.add_edge(sample_review, design_finalize)
root.order.add_edge(design_finalize, batch_scheduling)
root.order.add_edge(batch_scheduling, quality_check)
root.order.add_edge(quality_check, custom_packaging)
root.order.add_edge(custom_packaging, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, price_adjust)