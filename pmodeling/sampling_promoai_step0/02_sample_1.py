import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Begin_onboarding_process = Transition(label='Begin onboarding process')
Choose_candidate = Transition(label='Choose candidate')
Collect_resumes = Transition(label='Collect resumes')
Complete_orientation = Transition(label='Complete orientation')
Complete_paperwork = Transition(label='Complete paperwork')
Complete_training = Transition(label='Complete training')
Conduct_a_virtual_interview = Transition(label='Conduct a virtual interview')
Conduct_an_in_person_interview = Transition(label='Conduct an in-person interview')
Conduct_initial_phone_interviews = Transition(label='Conduct initial phone interviews')
Create_job_description = Transition(label='Create job description')
Extend_offer = Transition(label='Extend offer')
Identify_need_for_new_hire = Transition(label='Identify need for new hire')
Invite_candidates_for_interviews = Transition(label='Invite candidates for interviews')
Negotiate_salary = Transition(label='Negotiate salary')
Post_job_description = Transition(label='Post job description')
Screen_resumes = Transition(label='Screen resumes')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Conduct_initial_phone_interviews, Conduct_a_virtual_interview, Conduct_an_in_person_interview])
xor = OperatorPOWL(operator=Operator.XOR, children=[Choose_candidate, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Complete_paperwork, Complete_orientation])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Complete_training, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Create_job_description, Post_job_description])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Identify_need_for_new_hire, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Collect_resumes, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Invite_candidates_for_interviews, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Negotiate_salary, skip])
root = StrictPartialOrder(nodes=[xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, loop])
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, loop)