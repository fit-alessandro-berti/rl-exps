import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
milk_sourcing = Transition(label='Milk Sourcing')
culture_prep = Transition(label='Culture Prep')
milk_pasteurize = Transition(label='Milk Pasteurize')
coagulation = Transition(label='Coagulation')
curd_cutting = Transition(label='Curd Cutting')
whey_draining = Transition(label='Whey Draining')
hand_molding = Transition(label='Hand Molding')
pressing = Transition(label='Pressing')
salting = Transition(label='Salting')
rind_treatment = Transition(label='Rind Treatment')
aging_setup = Transition(label='Aging Setup')
microclimate_control = Transition(label='Microclimate Control')
flavor_profiling = Transition(label='Flavor Profiling')
quality_check = Transition(label='Quality Check')
sensory_review = Transition(label='Sensory Review')
texture_inspect = Transition(label='Texture Inspect')
eco_packaging = Transition(label='Eco Packaging')
batch_labeling = Transition(label='Batch Labeling')
blockchain_log = Transition(label='Blockchain Log')
niche_shipping = Transition(label='Niche Shipping')
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[milk_sourcing, culture_prep, milk_pasteurize, coagulation, curd_cutting, whey_draining, hand_molding, pressing, salting, rind_treatment])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[aging_setup, microclimate_control, flavor_profiling])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[quality_check, sensory_review, texture_inspect])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[eco_packaging, loop1])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[batch_labeling, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[blockchain_log, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[niche_shipping, xor3])
root = StrictPartialOrder(nodes=[loop1, loop2, loop3, xor1, xor2, xor3, xor4])
root.order.add_edge(loop1, loop2)
root.order.add_edge(loop2, loop3)
root.order.add_edge(loop3, xor1)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)