import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label='Site Survey')
B = Transition(label='Design Planning')
C = Transition(label='Permit Filing')
D = Transition(label='Structural Reinforce')
E = Transition(label='Hydroponic Setup')
F = Transition(label='Sensor Install')
G = Transition(label='Energy Audit')
H = Transition(label='Crop Selection')
I = Transition(label='Nutrient Mix')
J = Transition(label='Waste Process')
K = Transition(label='Climate Control')
L = Transition(label='Staff Training')
M = Transition(label='Market Study')
N = Transition(label='Community Meet')
O = Transition(label='Launch Trial')
P = Transition(label='Data Monitor')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[M, skip])
loop = OperatorPOWL(operator=Operator.LOOP, children=[P, xor])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[F, loop])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[G, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[I, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[K, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[O, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[N, xor6])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[J, xor7])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[L, xor8])
root = StrictPartialOrder(nodes=[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, xor, loop, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9])
root.order.add_edge(A, B)
root.order.add_edge(B, C)
root.order.add_edge(C, D)
root.order.add_edge(D, E)
root.order.add_edge(E, F)
root.order.add_edge(F, xor)
root.order.add_edge(G, xor)
root.order.add_edge(H, xor)
root.order.add_edge(I, xor)
root.order.add_edge(J, xor)
root.order.add_edge(K, xor)
root.order.add_edge(L, xor)
root.order.add_edge(M, xor)
root.order.add_edge(N, xor)
root.order.add_edge(O, xor)
root.order.add_edge(P, xor)
root.order.add_edge(xor, xor)
root.order.add_edge(loop, xor)
root.order.add_edge(xor2, xor)
root.order.add_edge(xor3, xor)
root.order.add_edge(xor4, xor)
root.order.add_edge(xor5, xor)
root.order.add_edge(xor6, xor)
root.order.add_edge(xor7, xor)
root.order.add_edge(xor8, xor)
root.order.add_edge(xor9, xor)