import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Return_Request = Transition(label='Return Request')
Authorization_Check = Transition(label='Authorization Check')
Pickup_Schedule = Transition(label='Pickup Schedule')
Transport_Dispatch = Transition(label='Transport Dispatch')
Receiving_Goods = Transition(label='Receiving Goods')
Quality_Inspect = Transition(label='Quality Inspect')
Sort_Items = Transition(label='Sort Items')
Refurbish_Prep = Transition(label='Refurbish Prep')
Recycle_Process = Transition(label='Recycle Process')
Inventory_Update = Transition(label='Inventory Update')
Customer_Notify = Transition(label='Customer Notify')
Disposal_Arrange = Transition(label='Disposal Arrange')
Compliance_Audit = Transition(label='Compliance Audit')
Cost_Analysis = Transition(label='Cost Analysis')
Report_Generate = Transition(label='Report Generate')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Authorization_Check, Pickup_Schedule])
xor = OperatorPOWL(operator=Operator.XOR, children=[Transport_Dispatch, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Quality_Inspect, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Sort_Items, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Refurbish_Prep, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Recycle_Process, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[Inventory_Update, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[Customer_Notify, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[Disposal_Arrange, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[Compliance_Audit, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[Cost_Analysis, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[Report_Generate, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, loop)