from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition

# Define activities
data_capture = Transition(label='Data Capture')
quantum_calc = Transition(label='Quantum Calc')
demand_forecast = Transition(label='Demand Forecast')
inventory_check = Transition(label='Inventory Check')
route_update = Transition(label='Route Update')
shipment_plan = Transition(label='Shipment Plan')
supplier_sync = Transition(label='Supplier Sync')
contract_mod = Transition(label='Contract Mod')
blockchain_verify = Transition(label='Blockchain Verify')
risk_assess = Transition(label='Risk Assess')
scenario_sim = Transition(label='Scenario Sim')
feedback_loop = Transition(label='Feedback Loop')
ai_adjust = Transition(label='AI Adjust')
waste_audit = Transition(label='Waste Audit')
report_generate = Transition(label='Report Generate')
stakeholder_alert = Transition(label='Stakeholder Alert')
compliance_review = Transition(label='Compliance Review')

# Define silent activities (tau labels)
skip = SilentTransition()

# Define loops and choices
loop_quantum_calc = OperatorPOWL(operator=Operator.LOOP, children=[quantum_calc])
loop_scenario_sim = OperatorPOWL(operator=Operator.LOOP, children=[scenario_sim])
loop_ai_adjust = OperatorPOWL(operator=Operator.LOOP, children=[ai_adjust])
loop_feedback_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_loop])
loop_compliance_review = OperatorPOWL(operator=Operator.LOOP, children=[compliance_review])
xor_blockchain_verify = OperatorPOWL(operator=Operator.XOR, children=[blockchain_verify, skip])
xor_ai_adjust = OperatorPOWL(operator=Operator.XOR, children=[ai_adjust, skip])
xor_scenario_sim = OperatorPOWL(operator=Operator.XOR, children=[scenario_sim, skip])
xor_stakeholder_alert = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_alert, skip])
xor_compliance_review = OperatorPOWL(operator=Operator.XOR, children=[compliance_review, skip])
xor_risk_assess = OperatorPOWL(operator=Operator.XOR, children=[risk_assess, skip])
xor_inventory_check = OperatorPOWL(operator=Operator.XOR, children=[inventory_check, skip])
xor_route_update = OperatorPOWL(operator=Operator.XOR, children=[route_update, skip])
xor_shipment_plan = OperatorPOWL(operator=Operator.XOR, children=[shipment_plan, skip])
xor_contract_mod = OperatorPOWL(operator=Operator.XOR, children=[contract_mod, skip])
xor_supplier_sync = OperatorPOWL(operator=Operator.XOR, children=[supplier_sync, skip])
xor_data_capture = OperatorPOWL(operator=Operator.XOR, children=[data_capture, skip])

# Define the root process
root = StrictPartialOrder(nodes=[loop_quantum_calc, xor_blockchain_verify, loop_scenario_sim, loop_ai_adjust, loop_feedback_loop, loop_compliance_review, xor_risk_assess, xor_inventory_check, xor_route_update, xor_shipment_plan, xor_contract_mod, xor_supplier_sync, xor_data_capture])
root.order.add_edge(loop_quantum_calc, xor_blockchain_verify)
root.order.add_edge(loop_quantum_calc, loop_scenario_sim)
root.order.add_edge(loop_quantum_calc, loop_ai_adjust)
root.order.add_edge(loop_quantum_calc, loop_feedback_loop)
root.order.add_edge(loop_quantum_calc, loop_compliance_review)
root.order.add_edge(loop_scenario_sim, xor_risk_assess)
root.order.add_edge(loop_scenario_sim, xor_inventory_check)
root.order.add_edge(loop_scenario_sim, xor_route_update)
root.order.add_edge(loop_scenario_sim, xor_shipment_plan)
root.order.add_edge(loop_scenario_sim, xor_contract_mod)
root.order.add_edge(loop_scenario_sim, xor_supplier_sync)
root.order.add_edge(loop_scenario_sim, xor_data_capture)
root.order.add_edge(loop_ai_adjust, xor_risk_assess)
root.order.add_edge(loop_ai_adjust, xor_inventory_check)
root.order.add_edge(loop_ai_adjust, xor_route_update)
root.order.add_edge(loop_ai_adjust, xor_shipment_plan)
root.order.add_edge(loop_ai_adjust, xor_contract_mod)
root.order.add_edge(loop_ai_adjust, xor_supplier_sync)
root.order.add_edge(loop_ai_adjust, xor_data_capture)
root.order.add_edge(loop_feedback_loop, xor_risk_assess)
root.order.add_edge(loop_feedback_loop, xor_inventory_check)
root.order.add_edge(loop_feedback_loop, xor_route_update)
root.order.add_edge(loop_feedback_loop, xor_shipment_plan)
root.order.add_edge(loop_feedback_loop, xor_contract_mod)
root.order.add_edge(loop_feedback_loop, xor_supplier_sync)
root.order.add_edge(loop_feedback_loop, xor_data_capture)
root.order.add_edge(loop_compliance_review, xor_risk_assess)
root.order.add_edge(loop_compliance_review, xor_inventory_check)
root.order.add_edge(loop_compliance_review, xor_route_update)
root.order.add_edge(loop_compliance_review, xor_shipment_plan)
root.order.add_edge(loop_compliance_review, xor_contract_mod)
root.order.add_edge(loop_compliance_review, xor_supplier_sync)
root.order.add_edge(loop_compliance_review, xor_data_capture)

# Print the root
print(root)