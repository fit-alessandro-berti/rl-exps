import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
from pm4py.objects.petri.obj import Marking

data_capture = Transition(label='Data Capture')
fingerprint_art = Transition(label='Fingerprint Art')
record_input = Transition(label='Record Input')
historical_check = Transition(label='Historical Check')
stakeholder_vote = Transition(label='Stakeholder Vote')
consensus_validate = Transition(label='Consensus Validate')
timestamp_entry = Transition(label='Timestamp Entry')
ledger_update = Transition(label='Ledger Update')
ai_pattern_scan = Transition(label='AI PatternScan')
flag_anomaly = Transition(label='Flag Anomaly')
dispute_submit = Transition(label='Dispute Submit')
panel_review = Transition(label='Panel Review')
arbitrate_case = Transition(label='Arbitrate Case')
trade_monitor = Transition(label='Trade Monitor')
feedback_loop = Transition(label='Feedback Loop')
insurance_sync = Transition(label='Insurance Sync')
collector_notify = Transition(label='Collector Notify')

skip = SilentTransition()
xor1 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_vote, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[historical_check, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[ai_pattern_scan, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[flag_anomaly, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[dispute_submit, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[trade_monitor, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[insurance_sync, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[collector_notify, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[stakeholder_vote, xor1])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[historical_check, xor2])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[ai_pattern_scan, xor3])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[flag_anomaly, xor4])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[dispute_submit, xor5])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[trade_monitor, xor6])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[insurance_sync, xor7])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[collector_notify, xor8])

root = StrictPartialOrder(nodes=[data_capture, fingerprint_art, record_input, loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8])
root.order.add_edge(data_capture, fingerprint_art)
root.order.add_edge(fingerprint_art, record_input)
root.order.add_edge(record_input, loop1)
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop1, xor2)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop2, xor3)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop3, xor4)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop4, xor5)
root.order.add_edge(loop5, xor5)
root.order.add_edge(loop5, xor6)
root.order.add_edge(loop6, xor6)
root.order.add_edge(loop6, xor7)
root.order.add_edge(loop7, xor7)
root.order.add_edge(loop7, xor8)
root.order.add_edge(loop8, xor8)