import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
seed_selection = Transition(label='Seed Selection')
germination_setup = Transition(label='Germination Setup')
nutrient_mix = Transition(label='Nutrient Mix')
water_control = Transition(label='Water Control')
climate_adjust = Transition(label='Climate Adjust')
sensor_monitor = Transition(label='Sensor Monitor')
lighting_tune = Transition(label='Lighting Tune')
airflow_manage = Transition(label='Airflow Manage')
health_scan = Transition(label='Health Scan')
pest_control = Transition(label='Pest Control')
harvest_timing = Transition(label='Harvest Timing')
cold_storage = Transition(label='Cold Storage')
package_prep = Transition(label='Package Prep')
delivery_plan = Transition(label='Delivery Plan')
feedback_loop = Transition(label='Feedback Loop')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[seed_selection, germination_setup])
xor = OperatorPOWL(operator=Operator.XOR, children=[nutrient_mix, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[water_control, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[climate_adjust, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[sensor_monitor, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[lighting_tune, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[airflow_manage, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[health_scan, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[pest_control, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[harvest_timing, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[cold_storage, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[package_prep, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[delivery_plan, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[feedback_loop, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, loop)