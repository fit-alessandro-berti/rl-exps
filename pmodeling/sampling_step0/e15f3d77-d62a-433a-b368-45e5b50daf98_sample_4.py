import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

Gather_Specs = Transition(label='Gather Specs')
Adapt_Design = Transition(label='Adapt Design')
Source_Parts = Transition(label='Source Parts')
Component_Test = Transition(label='Component Test')
Assemble_Frame = Transition(label='Assemble Frame')
Install_Firmware = Transition(label='Install Firmware')
Calibrate_Sensors = Transition(label='Calibrate Sensors')
Stress_Test = Transition(label='Stress Test')
Flight_Simulate = Transition(label='Flight Simulate')
Validate_Battery = Transition(label='Validate Battery')
Check_Accuracy = Transition(label='Check Accuracy')
Package_Units = Transition(label='Package Units')
Create_Manuals = Transition(label='Create Manuals')
Ship_Drones = Transition(label='Ship Drones')
Collect_Feedback = Transition(label='Collect Feedback')
Skip = SilentTransition()

Gather_Design = OperatorPOWL(operator=Operator.XOR, children=[Gather_Specs, Adapt_Design])
Source_Components = OperatorPOWL(operator=Operator.XOR, children=[Source_Parts, Skip])
Test_Components = OperatorPOWL(operator=Operator.XOR, children=[Component_Test, Skip])
Assemble_Frame = OperatorPOWL(operator=Operator.XOR, children=[Assemble_Frame, Skip])
Install_Firmware = OperatorPOWL(operator=Operator.XOR, children=[Install_Firmware, Skip])
Calibrate_Sensors = OperatorPOWL(operator=Operator.XOR, children=[Calibrate_Sensors, Skip])
Stress_Test = OperatorPOWL(operator=Operator.XOR, children=[Stress_Test, Skip])
Flight_Simulate = OperatorPOWL(operator=Operator.XOR, children=[Flight_Simulate, Skip])
Validate_Battery = OperatorPOWL(operator=Operator.XOR, children=[Validate_Battery, Skip])
Check_Accuracy = OperatorPOWL(operator=Operator.XOR, children=[Check_Accuracy, Skip])
Package_Units = OperatorPOWL(operator=Operator.XOR, children=[Package_Units, Skip])
Create_Manuals = OperatorPOWL(operator=Operator.XOR, children=[Create_Manuals, Skip])
Ship_Drones = OperatorPOWL(operator=Operator.XOR, children=[Ship_Drones, Skip])
Collect_Feedback = OperatorPOWL(operator=Operator.XOR, children=[Collect_Feedback, Skip])

root = StrictPartialOrder(nodes=[Gather_Design, Source_Components, Test_Components, Assemble_Frame, Install_Firmware, Calibrate_Sensors, Stress_Test, Flight_Simulate, Validate_Battery, Check_Accuracy, Package_Units, Create_Manuals, Ship_Drones, Collect_Feedback])
root.order.add_edge(Gather_Design, Source_Components)
root.order.add_edge(Source_Components, Test_Components)
root.order.add_edge(Test_Components, Assemble_Frame)
root.order.add_edge(Assemble_Frame, Install_Firmware)
root.order.add_edge(Install_Firmware, Calibrate_Sensors)
root.order.add_edge(Calibrate_Sensors, Stress_Test)
root.order.add_edge(Stress_Test, Flight_Simulate)
root.order.add_edge(Flight_Simulate, Validate_Battery)
root.order.add_edge(Validate_Battery, Check_Accuracy)
root.order.add_edge(Check_Accuracy, Package_Units)
root.order.add_edge(Package_Units, Create_Manuals)
root.order.add_edge(Create_Manuals, Ship_Drones)
root.order.add_edge(Ship_Drones, Collect_Feedback)

print(root)