import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
# Define transitions for each activity
site_survey = Transition(label='Site Survey')
regulation_check = Transition(label='Regulation Check')
design_modules = Transition(label='Design Modules')
install_hydroponics = Transition(label='Install Hydroponics')
integrate_sensors = Transition(label='Integrate Sensors')
calibrate_nutrients = Transition(label='Calibrate Nutrients')
program_climate = Transition(label='Program Climate')
select_crops = Transition(label='Select Crops')
optimize_lighting = Transition(label='Optimize Lighting')
train_staff = Transition(label='Train Staff')
plan_harvest = Transition(label='Plan Harvest')
recycle_waste = Transition(label='Recycle Waste')
analyze_demand = Transition(label='Analyze Demand')
plan_logistics = Transition(label='Plan Logistics')
monitor_systems = Transition(label='Monitor Systems')
# Define the loop nodes
# Site Survey --> Regulation Check (Loop)
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, regulation_check])
# Regulation Check --> Design Modules (Loop)
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[regulation_check, design_modules])
# Design Modules --> Install Hydroponics (Loop)
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[design_modules, install_hydroponics])
# Install Hydroponics --> Integrate Sensors (Loop)
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[install_hydroponics, integrate_sensors])
# Integrate Sensors --> Calibrate Nutrients (Loop)
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[integrate_sensors, calibrate_nutrients])
# Calibrate Nutrients --> Program Climate (Loop)
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[calibrate_nutrients, program_climate])
# Program Climate --> Select Crops (Loop)
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[program_climate, select_crops])
# Select Crops --> Optimize Lighting (Loop)
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[select_crops, optimize_lighting])
# Optimize Lighting --> Train Staff (Loop)
loop9 = OperatorPOWL(operator=Operator.LOOP, children=[optimize_lighting, train_staff])
# Train Staff --> Plan Harvest (Loop)
loop10 = OperatorPOWL(operator=Operator.LOOP, children=[train_staff, plan_harvest])
# Plan Harvest --> Recycle Waste (Loop)
loop11 = OperatorPOWL(operator=Operator.LOOP, children=[plan_harvest, recycle_waste])
# Recycle Waste --> Analyze Demand (Loop)
loop12 = OperatorPOWL(operator=Operator.LOOP, children=[recycle_waste, analyze_demand])
# Analyze Demand --> Plan Logistics (Loop)
loop13 = OperatorPOWL(operator=Operator.LOOP, children=[analyze_demand, plan_logistics])
# Plan Logistics --> Monitor Systems (Loop)
loop14 = OperatorPOWL(operator=Operator.LOOP, children=[plan_logistics, monitor_systems])
# Define the exclusive choice nodes
# Site Survey --> Design Modules (Exclusive Choice)
xor1 = OperatorPOWL(operator=Operator.XOR, children=[site_survey, design_modules])
# Design Modules --> Install Hydroponics (Exclusive Choice)
xor2 = OperatorPOWL(operator=Operator.XOR, children=[design_modules, install_hydroponics])
# Install Hydroponics --> Integrate Sensors (Exclusive Choice)
xor3 = OperatorPOWL(operator=Operator.XOR, children=[install_hydroponics, integrate_sensors])
# Integrate Sensors --> Calibrate Nutrients (Exclusive Choice)
xor4 = OperatorPOWL(operator=Operator.XOR, children=[integrate_sensors, calibrate_nutrients])
# Calibrate Nutrients --> Program Climate (Exclusive Choice)
xor5 = OperatorPOWL(operator=Operator.XOR, children=[calibrate_nutrients, program_climate])
# Program Climate --> Select Crops (Exclusive Choice)
xor6 = OperatorPOWL(operator=Operator.XOR, children=[program_climate, select_crops])
# Select Crops --> Optimize Lighting (Exclusive Choice)
xor7 = OperatorPOWL(operator=Operator.XOR, children=[select_crops, optimize_lighting])
# Optimize Lighting --> Train Staff (Exclusive Choice)
xor8 = OperatorPOWL(operator=Operator.XOR, children=[optimize_lighting, train_staff])
# Train Staff --> Plan Harvest (Exclusive Choice)
xor9 = OperatorPOWL(operator=Operator.XOR, children=[train_staff, plan_harvest])
# Plan Harvest --> Recycle Waste (Exclusive Choice)
xor10 = OperatorPOWL(operator=Operator.XOR, children=[plan_harvest, recycle_waste])
# Recycle Waste --> Analyze Demand (Exclusive Choice)
xor11 = OperatorPOWL(operator=Operator.XOR, children=[recycle_waste, analyze_demand])
# Analyze Demand --> Plan Logistics (Exclusive Choice)
xor12 = OperatorPOWL(operator=Operator.XOR, children=[analyze_demand, plan_logistics])
# Plan Logistics --> Monitor Systems (Exclusive Choice)
xor13 = OperatorPOWL(operator=Operator.XOR, children=[plan_logistics, monitor_systems])
# Define the root node
root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8, loop9, loop10, loop11, loop12, loop13, loop14, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
# Add the edges between the nodes
root.order.add_edge(loop1, xor1)
root.order.add_edge(loop2, xor2)
root.order.add_edge(loop3, xor3)
root.order.add_edge(loop4, xor4)
root.order.add_edge(loop5, xor5)
root.order.add_edge(loop6, xor6)
root.order.add_edge(loop7, xor7)
root.order.add_edge(loop8, xor8)
root.order.add_edge(loop9, xor9)
root.order.add_edge(loop10, xor10)
root.order.add_edge(loop11, xor11)
root.order.add_edge(loop12, xor12)
root.order.add_edge(loop13, xor13)
root.order.add_edge(xor1, loop2)
root.order.add_edge(xor2, loop3)
root.order.add_edge(xor3, loop4)
root.order.add_edge(xor4, loop5)
root.order.add_edge(xor5, loop6)
root.order.add_edge(xor6, loop7)
root.order.add_edge(xor7, loop8)
root.order.add_edge(xor8, loop9)
root.order.add_edge(xor9, loop10)
root.order.add_edge(xor10, loop11)
root.order.add_edge(xor11, loop12)
root.order.add_edge(xor12, loop13)
root.order.add_edge(xor13, loop14)