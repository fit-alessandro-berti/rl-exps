import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the transitions
material_sourcing = Transition(label='Material Sourcing')
cultural_verify = Transition(label='Cultural Verify')
eco_transport = Transition(label='Eco Transport')
batch_storytelling = Transition(label='Batch Storytelling')
craftsman_assignment = Transition(label='Craftsman Assignment')
product_creation = Transition(label='Product Creation')
provenance_catalog = Transition(label='Provenance Catalog')
community_marketing = Transition(label='Community Marketing')
collector_targeting = Transition(label='Collector Targeting')
package_assembly = Transition(label='Package Assembly')
local_cooperatives = Transition(label='Local Cooperatives')
environmental_audit = Transition(label='Environmental Audit')
ethical_logistics = Transition(label='Ethical Logistics')
global_shipping = Transition(label='Global Shipping')
feedback_collection = Transition(label='Feedback Collection')

# Define the silent transitions
skip_material_sourcing = SilentTransition()
skip_cultural_verify = SilentTransition()
skip_eco_transport = SilentTransition()
skip_batch_storytelling = SilentTransition()
skip_craftsman_assignment = SilentTransition()
skip_product_creation = SilentTransition()
skip_provenance_catalog = SilentTransition()
skip_community_marketing = SilentTransition()
skip_collector_targeting = SilentTransition()
skip_package_assembly = SilentTransition()
skip_local_cooperatives = SilentTransition()
skip_environmental_audit = SilentTransition()
skip_ethical_logistics = SilentTransition()
skip_global_shipping = SilentTransition()
skip_feedback_collection = SilentTransition()

# Define the loops
material_sourcing_loop = OperatorPOWL(operator=Operator.LOOP, children=[material_sourcing, skip_material_sourcing])
cultural_verify_loop = OperatorPOWL(operator=Operator.LOOP, children=[cultural_verify, skip_cultural_verify])
eco_transport_loop = OperatorPOWL(operator=Operator.LOOP, children=[eco_transport, skip_eco_transport])
batch_storytelling_loop = OperatorPOWL(operator=Operator.LOOP, children=[batch_storytelling, skip_batch_storytelling])
craftsman_assignment_loop = OperatorPOWL(operator=Operator.LOOP, children=[craftsman_assignment, skip_craftsman_assignment])
product_creation_loop = OperatorPOWL(operator=Operator.LOOP, children=[product_creation, skip_product_creation])
provenance_catalog_loop = OperatorPOWL(operator=Operator.LOOP, children=[provenance_catalog, skip_provenance_catalog])
community_marketing_loop = OperatorPOWL(operator=Operator.LOOP, children=[community_marketing, skip_community_marketing])
collector_targeting_loop = OperatorPOWL(operator=Operator.LOOP, children=[collector_targeting, skip_collector_targeting])
package_assembly_loop = OperatorPOWL(operator=Operator.LOOP, children=[package_assembly, skip_package_assembly])
local_cooperatives_loop = OperatorPOWL(operator=Operator.LOOP, children=[local_cooperatives, skip_local_cooperatives])
environmental_audit_loop = OperatorPOWL(operator=Operator.LOOP, children=[environmental_audit, skip_environmental_audit])
ethical_logistics_loop = OperatorPOWL(operator=Operator.LOOP, children=[ethical_logistics, skip_ethical_logistics])
global_shipping_loop = OperatorPOWL(operator=Operator.LOOP, children=[global_shipping, skip_global_shipping])
feedback_collection_loop = OperatorPOWL(operator=Operator.LOOP, children=[feedback_collection, skip_feedback_collection])

# Define the XORs
material_sourcing_xor = OperatorPOWL(operator=Operator.XOR, children=[material_sourcing_loop, skip_material_sourcing])
cultural_verify_xor = OperatorPOWL(operator=Operator.XOR, children=[cultural_verify_loop, skip_cultural_verify])
eco_transport_xor = OperatorPOWL(operator=Operator.XOR, children=[eco_transport_loop, skip_eco_transport])
batch_storytelling_xor = OperatorPOWL(operator=Operator.XOR, children=[batch_storytelling_loop, skip_batch_storytelling])
craftsman_assignment_xor = OperatorPOWL(operator=Operator.XOR, children=[craftsman_assignment_loop, skip_craftsman_assignment])
product_creation_xor = OperatorPOWL(operator=Operator.XOR, children=[product_creation_loop, skip_product_creation])
provenance_catalog_xor = OperatorPOWL(operator=Operator.XOR, children=[provenance_catalog_loop, skip_provenance_catalog])
community_marketing_xor = OperatorPOWL(operator=Operator.XOR, children=[community_marketing_loop, skip_community_marketing])
collector_targeting_xor = OperatorPOWL(operator=Operator.XOR, children=[collector_targeting_loop, skip_collector_targeting])
package_assembly_xor = OperatorPOWL(operator=Operator.XOR, children=[package_assembly_loop, skip_package_assembly])
local_cooperatives_xor = OperatorPOWL(operator=Operator.XOR, children=[local_cooperatives_loop, skip_local_cooperatives])
environmental_audit_xor = OperatorPOWL(operator=Operator.XOR, children=[environmental_audit_loop, skip_environmental_audit])
ethical_logistics_xor = OperatorPOWL(operator=Operator.XOR, children=[ethical_logistics_loop, skip_ethical_logistics])
global_shipping_xor = OperatorPOWL(operator=Operator.XOR, children=[global_shipping_loop, skip_global_shipping])
feedback_collection_xor = OperatorPOWL(operator=Operator.XOR, children=[feedback_collection_loop, skip_feedback_collection])

# Define the root POWL model
root = StrictPartialOrder(nodes=[material_sourcing_xor, cultural_verify_xor, eco_transport_xor, batch_storytelling_xor, craftsman_assignment_xor, product_creation_xor, provenance_catalog_xor, community_marketing_xor, collector_targeting_xor, package_assembly_xor, local_cooperatives_xor, environmental_audit_xor, ethical_logistics_xor, global_shipping_xor, feedback_collection_xor])
root.order.add_edge(material_sourcing_xor, cultural_verify_xor)
root.order.add_edge(cultural_verify_xor, eco_transport_xor)
root.order.add_edge(eco_transport_xor, batch_storytelling_xor)
root.order.add_edge(batch_storytelling_xor, craftsman_assignment_xor)
root.order.add_edge(craftsman_assignment_xor, product_creation_xor)
root.order.add_edge(product_creation_xor, provenance_catalog_xor)
root.order.add_edge(provenance_catalog_xor, community_marketing_xor)
root.order.add_edge(community_marketing_xor, collector_targeting_xor)
root.order.add_edge(collector_targeting_xor, package_assembly_xor)
root.order.add_edge(package_assembly_xor, local_cooperatives_xor)
root.order.add_edge(local_cooperatives_xor, environmental_audit_xor)
root.order.add_edge(environmental_audit_xor, ethical_logistics_xor)
root.order.add_edge(ethical_logistics_xor, global_shipping_xor)
root.order.add_edge(global_shipping_xor, feedback_collection_xor)

# Print the root POWL model
print(root)