import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Milk_Sourcing = Transition(label='Milk Sourcing')
Quality_Testing = Transition(label='Quality Testing')
Starter_Culture = Transition(label='Starter Culture')
Milk_Pasteurize = Transition(label='Milk Pasteurize')
Curd_Cutting = Transition(label='Curd Cutting')
Whey_Draining = Transition(label='Whey Draining')
Pressing_Cheese = Transition(label='Pressing Cheese')
Salting_Stage = Transition(label='Salting Stage')
Fermentation = Transition(label='Fermentation')
Aging_Control = Transition(label='Aging Control')
Flavor_Tasting = Transition(label='Flavor Tasting')
Packaging_Artisanal = Transition(label='Packaging Artisanal')
Label_Printing = Transition(label='Label Printing')
Order_Processing = Transition(label='Order Processing')
Direct_Delivery = Transition(label='Direct Delivery')
Customer_Feedback = Transition(label='Customer Feedback')
skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[Quality_Testing, Starter_Culture])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[Milk_Pasteurize, Curd_Cutting])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[Whey_Draining, Pressing_Cheese])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[Salting_Stage, Fermentation])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[Aging_Control, Flavor_Tasting])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[Packaging_Artisanal, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Label_Printing, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Order_Processing, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Direct_Delivery, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Customer_Feedback, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[loop1, loop2, loop3, loop4, loop5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[xor1, xor2, xor3, xor4, xor5])
root = StrictPartialOrder(nodes=[xor6, xor7])
root.order.add_edge(xor6, xor7)