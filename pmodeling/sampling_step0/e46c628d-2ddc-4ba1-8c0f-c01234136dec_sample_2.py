import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
# Define the activities
threat_assess = Transition(label='Threat Assess')
alert_dispatch = Transition(label='Alert Dispatch')
resource_check = Transition(label='Resource Check')
team_mobilize = Transition(label='Team Mobilize')
command_setup = Transition(label='Command Setup')
intel_gather = Transition(label='Intel Gather')
risk_evaluate = Transition(label='Risk Evaluate')
priority_set = Transition(label='Priority Set')
field_deploy = Transition(label='Field Deploy')
comm_sync = Transition(label='Comm Sync')
public_update = Transition(label='Public Update')
supply_manage = Transition(label='Supply Manage')
safety_monitor = Transition(label='Safety Monitor')
incident_log = Transition(label='Incident Log')
recovery_plan = Transition(label='Recovery Plan')
debrief_team = Transition(label='Debrief Team')
data_archive = Transition(label='Data Archive')
# Define the silent transitions
skip = SilentTransition()
# Define the loops and XORs
loop_threat = OperatorPOWL(operator=Operator.LOOP, children=[threat_assess, alert_dispatch])
loop_resource = OperatorPOWL(operator=Operator.LOOP, children=[resource_check, team_mobilize])
loop_command = OperatorPOWL(operator=Operator.LOOP, children=[command_setup, intel_gather])
loop_risk = OperatorPOWL(operator=Operator.LOOP, children=[risk_evaluate, priority_set])
loop_field = OperatorPOWL(operator=Operator.LOOP, children=[field_deploy, comm_sync])
loop_public = OperatorPOWL(operator=Operator.LOOP, children=[public_update, supply_manage])
loop_safety = OperatorPOWL(operator=Operator.LOOP, children=[safety_monitor, incident_log])
loop_recovery = OperatorPOWL(operator=Operator.LOOP, children=[recovery_plan, debrief_team])
loop_data = OperatorPOWL(operator=Operator.LOOP, children=[data_archive, skip])
xor_team = OperatorPOWL(operator=Operator.XOR, children=[loop_threat, loop_resource])
xor_command = OperatorPOWL(operator=Operator.XOR, children=[loop_command, loop_risk])
xor_field = OperatorPOWL(operator=Operator.XOR, children=[loop_field, loop_public])
xor_safety = OperatorPOWL(operator=Operator.XOR, children=[loop_safety, loop_recovery])
xor_data = OperatorPOWL(operator=Operator.XOR, children=[loop_data, skip])
# Define the partial order
root = StrictPartialOrder(nodes=[xor_team, xor_command, xor_field, xor_safety, xor_data])
root.order.add_edge(xor_team, xor_command)
root.order.add_edge(xor_command, xor_field)
root.order.add_edge(xor_field, xor_safety)
root.order.add_edge(xor_safety, xor_data)