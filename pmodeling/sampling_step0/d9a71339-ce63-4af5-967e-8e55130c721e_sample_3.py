import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
site_survey = Transition(label='Site Survey')
structural_check = Transition(label='Structural Check')
modular_install = Transition(label='Modular Install')
hydroponic_setup = Transition(label='Hydroponic Setup')
nutrient_mix = Transition(label='Nutrient Mix')
sensor_setup = Transition(label='Sensor Setup')
ai_training = Transition(label='AI Training')
data_capture = Transition(label='Data Capture')
maintenance_plan = Transition(label='Maintenance Plan')
pest_scan = Transition(label='Pest Scan')
growth_monitor = Transition(label='Growth Monitor')
harvest_sync = Transition(label='Harvest Sync')
quality_test = Transition(label='Quality Test')
package_prep = Transition(label='Package Prep')
logistics_plan = Transition(label='Logistics Plan')

# Define the silent transitions
skip = SilentTransition()

# Define the loops and XORs
site_check_loop = OperatorPOWL(operator=Operator.LOOP, children=[site_survey, structural_check])
modular_install_loop = OperatorPOWL(operator=Operator.LOOP, children=[modular_install])
sensor_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[sensor_setup])
ai_training_loop = OperatorPOWL(operator=Operator.LOOP, children=[ai_training])
data_capture_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_capture])
maintenance_plan_loop = OperatorPOWL(operator=Operator.LOOP, children=[maintenance_plan])
pest_scan_loop = OperatorPOWL(operator=Operator.LOOP, children=[pest_scan])
growth_monitor_loop = OperatorPOWL(operator=Operator.LOOP, children=[growth_monitor])
harvest_sync_loop = OperatorPOWL(operator=Operator.LOOP, children=[harvest_sync])
quality_test_loop = OperatorPOWL(operator=Operator.LOOP, children=[quality_test])
package_prep_loop = OperatorPOWL(operator=Operator.LOOP, children=[package_prep])
logistics_plan_loop = OperatorPOWL(operator=Operator.LOOP, children=[logistics_plan])

# Define the XORs
modular_install_xor = OperatorPOWL(operator=Operator.XOR, children=[modular_install_loop, skip])
sensor_setup_xor = OperatorPOWL(operator=Operator.XOR, children=[sensor_setup_loop, skip])
ai_training_xor = OperatorPOWL(operator=Operator.XOR, children=[ai_training_loop, skip])
data_capture_xor = OperatorPOWL(operator=Operator.XOR, children=[data_capture_loop, skip])
maintenance_plan_xor = OperatorPOWL(operator=Operator.XOR, children=[maintenance_plan_loop, skip])
pest_scan_xor = OperatorPOWL(operator=Operator.XOR, children=[pest_scan_loop, skip])
growth_monitor_xor = OperatorPOWL(operator=Operator.XOR, children=[growth_monitor_loop, skip])
harvest_sync_xor = OperatorPOWL(operator=Operator.XOR, children=[harvest_sync_loop, skip])
quality_test_xor = OperatorPOWL(operator=Operator.XOR, children=[quality_test_loop, skip])
package_prep_xor = OperatorPOWL(operator=Operator.XOR, children=[package_prep_loop, skip])
logistics_plan_xor = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan_loop, skip])

# Define the partial order
root = StrictPartialOrder(nodes=[site_check_loop, modular_install_xor, sensor_setup_xor, ai_training_xor, data_capture_xor, maintenance_plan_xor, pest_scan_xor, growth_monitor_xor, harvest_sync_xor, quality_test_xor, package_prep_xor, logistics_plan_xor])
root.order.add_edge(site_check_loop, modular_install_xor)
root.order.add_edge(site_check_loop, sensor_setup_xor)
root.order.add_edge(site_check_loop, ai_training_xor)
root.order.add_edge(site_check_loop, data_capture_xor)
root.order.add_edge(site_check_loop, maintenance_plan_xor)
root.order.add_edge(site_check_loop, pest_scan_xor)
root.order.add_edge(site_check_loop, growth_monitor_xor)
root.order.add_edge(site_check_loop, harvest_sync_xor)
root.order.add_edge(site_check_loop, quality_test_xor)
root.order.add_edge(site_check_loop, package_prep_xor)
root.order.add_edge(site_check_loop, logistics_plan_xor)
root.order.add_edge(modular_install_xor, sensor_setup_xor)
root.order.add_edge(modular_install_xor, ai_training_xor)
root.order.add_edge(modular_install_xor, data_capture_xor)
root.order.add_edge(modular_install_xor, maintenance_plan_xor)
root.order.add_edge(modular_install_xor, pest_scan_xor)
root.order.add_edge(modular_install_xor, growth_monitor_xor)
root.order.add_edge(modular_install_xor, harvest_sync_xor)
root.order.add_edge(modular_install_xor, quality_test_xor)
root.order.add_edge(modular_install_xor, package_prep_xor)
root.order.add_edge(modular_install_xor, logistics_plan_xor)
root.order.add_edge(sensor_setup_xor, ai_training_xor)
root.order.add_edge(sensor_setup_xor, data_capture_xor)
root.order.add_edge(sensor_setup_xor, maintenance_plan_xor)
root.order.add_edge(sensor_setup_xor, pest_scan_xor)
root.order.add_edge(sensor_setup_xor, growth_monitor_xor)
root.order.add_edge(sensor_setup_xor, harvest_sync_xor)
root.order.add_edge(sensor_setup_xor, quality_test_xor)
root.order.add_edge(sensor_setup_xor, package_prep_xor)
root.order.add_edge(sensor_setup_xor, logistics_plan_xor)
root.order.add_edge(ai_training_xor, data_capture_xor)
root.order.add_edge(ai_training_xor, maintenance_plan_xor)
root.order.add_edge(ai_training_xor, pest_scan_xor)
root.order.add_edge(ai_training_xor, growth_monitor_xor)
root.order.add_edge(ai_training_xor, harvest_sync_xor)
root.order.add_edge(ai_training_xor, quality_test_xor)
root.order.add_edge(ai_training_xor, package_prep_xor)
root.order.add_edge(ai_training_xor, logistics_plan_xor)
root.order.add_edge(data_capture_xor, maintenance_plan_xor)
root.order.add_edge(data_capture_xor, pest_scan_xor)
root.order.add_edge(data_capture_xor, growth_monitor_xor)
root.order.add_edge(data_capture_xor, harvest_sync_xor)
root.order.add_edge(data_capture_xor, quality_test_xor)
root.order.add_edge(data_capture_xor, package_prep_xor)
root.order.add_edge(data_capture_xor, logistics_plan_xor)
root.order.add_edge(maintenance_plan_xor, pest_scan_xor)
root.order.add_edge(maintenance_plan_xor, growth_monitor_xor)
root.order.add_edge(maintenance_plan_xor, harvest_sync_xor)
root.order.add_edge(maintenance_plan_xor, quality_test_xor)
root.order.add_edge(maintenance_plan_xor, package_prep_xor)
root.order.add_edge(maintenance_plan_xor, logistics_plan_xor)
root.order.add_edge(pest_scan_xor, growth_monitor_xor)
root.order.add_edge(pest_scan_xor, harvest_sync_xor)
root.order.add_edge(pest_scan_xor, quality_test_xor)
root.order.add_edge(pest_scan_xor, package_prep_xor)
root.order.add_edge(pest_scan_xor, logistics_plan_xor)
root.order.add_edge(growth_monitor_xor, harvest_sync_xor)
root.order.add_edge(growth_monitor_xor, quality_test_xor)
root.order.add_edge(growth_monitor_xor, package_prep_xor)
root.order.add_edge(growth_monitor_xor, logistics_plan_xor)
root.order.add_edge(harvest_sync_xor, quality_test_xor)
root.order.add_edge(harvest_sync_xor, package_prep_xor)
root.order.add_edge(harvest_sync_xor, logistics_plan_xor)
root.order.add_edge(quality_test_xor, package_prep_xor)
root.order.add_edge(quality_test_xor, logistics_plan_xor)
root.order.add_edge(package_prep_xor, logistics_plan_xor)

print(root)