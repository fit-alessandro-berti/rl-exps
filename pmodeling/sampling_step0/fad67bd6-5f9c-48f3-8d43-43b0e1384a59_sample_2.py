import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
regulatory_check = Transition(label='Regulatory Check')
path_design = Transition(label='Path Design')
weather_sync = Transition(label='Weather Sync')
traffic_align = Transition(label='Traffic Align')
package_secure = Transition(label='Package Secure')
customer_alert = Transition(label='Customer Alert')
drone_assemble = Transition(label='Drone Assemble')
flight_test = Transition(label='Flight Test')
data_monitor = Transition(label='Data Monitor')
safety_audit = Transition(label='Safety Audit')
emergency_plan = Transition(label='Emergency Plan')
maintenance_plan = Transition(label='Maintenance Plan')
battery_cycle = Transition(label='Battery Cycle')
route_update = Transition(label='Route Update')
performance_review = Transition(label='Performance Review')
impact_study = Transition(label='Impact Study')
compliance_review = Transition(label='Compliance Review')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[battery_cycle, route_update, performance_review, impact_study, compliance_review])
xor = OperatorPOWL(operator=Operator.XOR, children=[maintenance_plan, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[emergency_plan, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[drone_assemble, flight_test])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[data_monitor, safety_audit])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[customer_alert, package_secure])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[traffic_align, weather_sync])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[path_design, regulatory_check])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[xor7, xor6])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[xor8, xor5])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[xor9, xor4])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[xor10, xor3])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[xor11, xor2])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[xor12, loop])
root = StrictPartialOrder(nodes=[xor13])
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor13, xor3)
root.order.add_edge(xor13, xor2)
root.order.add_edge(xor13, xor)
root.order.add_edge(xor13, loop)
root.order.add_edge(xor13, xor12)
root.order.add_edge(xor13, xor11)
root.order.add_edge(xor13, xor10)
root.order.add_edge(xor13, xor9)
root.order.add_edge(xor13, xor8)
root.order.add_edge(xor13, xor7)
root.order.add_edge(xor13, xor6)
root.order.add_edge(xor13, xor5)
root.order.add_edge(xor13, xor4)
root.order.add_edge(xor1