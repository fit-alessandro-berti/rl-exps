import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
root = StrictPartialOrder()

# Add transitions for each activity
provenance_check = Transition(label='Provenance Check')
image_capture = Transition(label='Image Capture')
material_scan = Transition(label='Material Scan')
expert_review = Transition(label='Expert Review')
historical_cross = Transition(label='Historical Cross')
legal_verify = Transition(label='Legal Verify')
registry_search = Transition(label='Registry Search')
customs_clear = Transition(label='Customs Clear')
condition_assess = Transition(label='Condition Assess')
data_log = Transition(label='Data Log')
chain_custody = Transition(label='Chain Custody')
report_draft = Transition(label='Report Draft')
certification = Transition(label='Certification')
secure_archive = Transition(label='Secure Archive')
auction_prep = Transition(label='Auction Prep')

# Add silent transitions for parallel paths
image_capture_silent = SilentTransition()
material_scan_silent = SilentTransition()
expert_review_silent = SilentTransition()
historical_cross_silent = SilentTransition()
legal_verify_silent = SilentTransition()
registry_search_silent = SilentTransition()
customs_clear_silent = SilentTransition()
condition_assess_silent = SilentTransition()
data_log_silent = SilentTransition()
chain_custody_silent = SilentTransition()
report_draft_silent = SilentTransition()
certification_silent = SilentTransition()
secure_archive_silent = SilentTransition()
auction_prep_silent = SilentTransition()

# Add exclusive choices for parallel paths
provenance_choice = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, image_capture_silent])
image_choice = OperatorPOWL(operator=Operator.XOR, children=[image_capture, material_scan_silent])
material_choice = OperatorPOWL(operator=Operator.XOR, children=[material_scan, expert_review_silent])
expert_choice = OperatorPOWL(operator=Operator.XOR, children=[expert_review, historical_cross_silent])
historical_choice = OperatorPOWL(operator=Operator.XOR, children=[historical_cross, legal_verify_silent])
legal_choice = OperatorPOWL(operator=Operator.XOR, children=[legal_verify, registry_search_silent])
registry_choice = OperatorPOWL(operator=Operator.XOR, children=[registry_search, customs_clear_silent])
customs_choice = OperatorPOWL(operator=Operator.XOR, children=[customs_clear, condition_assess_silent])
condition_choice = OperatorPOWL(operator=Operator.XOR, children=[condition_assess, data_log_silent])
data_choice = OperatorPOWL(operator=Operator.XOR, children=[data_log, chain_custody_silent])
chain_choice = OperatorPOWL(operator=Operator.XOR, children=[chain_custody, report_draft_silent])
report_choice = OperatorPOWL(operator=Operator.XOR, children=[report_draft, certification_silent])
certification_choice = OperatorPOWL(operator=Operator.XOR, children=[certification, secure_archive_silent])
secure_choice = OperatorPOWL(operator=Operator.XOR, children=[secure_archive, auction_prep_silent])

# Add loops for parallel paths
provenance_loop = OperatorPOWL(operator=Operator.LOOP, children=[provenance_check, image_choice])
image_loop = OperatorPOWL(operator=Operator.LOOP, children=[image_capture, material_choice])
material_loop = OperatorPOWL(operator=Operator.LOOP, children=[material_scan, expert_choice])
expert_loop = OperatorPOWL(operator=Operator.LOOP, children=[expert_review, historical_choice])
historical_loop = OperatorPOWL(operator=Operator.LOOP, children=[historical_cross, legal_choice])
legal_loop = OperatorPOWL(operator=Operator.LOOP, children=[legal_verify, registry_choice])
registry_loop = OperatorPOWL(operator=Operator.LOOP, children=[registry_search, customs_choice])
customs_loop = OperatorPOWL(operator=Operator.LOOP, children=[customs_clear, condition_choice])
condition_loop = OperatorPOWL(operator=Operator.LOOP, children=[condition_assess, data_choice])
data_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_log, chain_choice])
chain_loop = OperatorPOWL(operator=Operator.LOOP, children=[chain_custody, report_choice])
report_loop = OperatorPOWL(operator=Operator.LOOP, children=[report_draft, certification_choice])
certification_loop = OperatorPOWL(operator=Operator.LOOP, children=[certification, secure_choice])
secure_loop = OperatorPOWL(operator=Operator.LOOP, children=[secure_archive, auction_prep_choice])

# Add dependencies
root.nodes.add(provenance_check)
root.nodes.add(image_capture)
root.nodes.add(material_scan)
root.nodes.add(expert_review)
root.nodes.add(historical_cross)
root.nodes.add(legal_verify)
root.nodes.add(registry_search)
root.nodes.add(customs_clear)
root.nodes.add(condition_assess)
root.nodes.add(data_log)
root.nodes.add(chain_custody)
root.nodes.add(report_draft)
root.nodes.add(certification)
root.nodes.add(secure_archive)
root.nodes.add(auction_prep)
root.nodes.add(provenance_choice)
root.nodes.add(image_choice)
root.nodes.add(material_choice)
root.nodes.add(expert_choice)
root.nodes.add(historical_choice)
root.nodes.add(legal_choice)
root.nodes.add(registry_choice)
root.nodes.add(customs_choice)
root.nodes.add(condition_choice)
root.nodes.add(data_choice)
root.nodes.add(chain_choice)
root.nodes.add(report_choice)
root.nodes.add(certification_choice)
root.nodes.add(secure_choice)
root.nodes.add(auction_prep_choice)
root.nodes.add(provenance_loop)
root.nodes.add(image_loop)
root.nodes.add(material_loop)
root.nodes.add(expert_loop)
root.nodes.add(historical_loop)
root.nodes.add(legal_loop)
root.nodes.add(registry_loop)
root.nodes.add(customs_loop)
root.nodes.add(condition_loop)
root.nodes.add(data_loop)
root.nodes.add(chain_loop)
root.nodes.add(report_loop)
root.nodes.add(certification_loop)
root.nodes.add(secure_loop)
root.nodes.add(auction_prep_loop)

root.order.add_edge(provenance_loop, image_loop)
root.order.add_edge(image_loop, material_loop)
root.order.add_edge(material_loop, expert_loop)
root.order.add_edge(expert_loop, historical_loop)
root.order.add_edge(historical_loop, legal_loop)
root.order.add_edge(legal_loop, registry_loop)
root.order.add_edge(registry_loop, customs_loop)
root.order.add_edge(customs_loop, condition_loop)
root.order.add_edge(condition_loop, data_loop)
root.order.add_edge(data_loop, chain_loop)
root.order.add_edge(chain_loop, report_loop)
root.order.add_edge(report_loop, certification_loop)
root.order.add_edge(certification_loop, secure_loop)
root.order.add_edge(secure_loop, auction_prep_loop)

# Add silent transitions to the root
root.order.add_edge(provenance_choice, provenance_loop)
root.order.add_edge(image_choice, image_loop)
root.order.add_edge(material_choice, material_loop)
root.order.add_edge(expert_choice, expert_loop)
root.order.add_edge(historical_choice, historical_loop)
root.order.add_edge(legal_choice, legal_loop)
root.order.add_edge(registry_choice, registry_loop)
root.order.add_edge(customs_choice, customs_loop)
root.order.add_edge(condition_choice, condition_loop)
root.order.add_edge(data_choice, data_loop)
root.order.add_edge(chain_choice, chain_loop)
root.order.add_edge(report_choice, report_loop)
root.order.add_edge(certification_choice, certification_loop)
root.order.add_edge(secure_choice, secure_loop)
root.order.add_edge(auction_prep_choice, auction_prep_loop)

# Print the root POWL model
print(root)