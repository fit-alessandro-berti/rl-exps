from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
receive_artifact = Transition(label='Receive Artifact')
condition_log = Transition(label='Condition Log')
radiocarbon_test = Transition(label='Radiocarbon Test')
spectroscopy_scan = Transition(label='Spectroscopy Scan')
expert_consult = Transition(label='Expert Consult')
provenance_check = Transition(label='Provenance Check')
archive_search = Transition(label='Archive Search')
risk_assess = Transition(label='Risk Assess')
three_d_scan = Transition(label='3D Scan')
legal_review = Transition(label='Legal Review')
insurance_setup = Transition(label='Insurance Setup')
certificate_draft = Transition(label='Certificate Draft')
certificate_approve = Transition(label='Certificate Approve')
climate_pack = Transition(label='Climate Pack')
conservation_plan = Transition(label='Conservation Plan')
monitoring_schedule = Transition(label='Monitoring Schedule')

# Define the control-flow operators
xor1 = OperatorPOWL(operator=Operator.XOR, children=[radiocarbon_test, spectroscopy_scan])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[provenance_check, archive_search])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[risk_assess, legal_review])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[insurance_setup, certificate_draft])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[certificate_approve, climate_pack])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[conservation_plan, monitoring_schedule])

# Define the partial order
root = StrictPartialOrder(nodes=[receive_artifact, condition_log, xor1, xor2, xor3, xor4, xor5, xor6])
root.order.add_edge(receive_artifact, condition_log)
root.order.add_edge(condition_log, xor1)
root.order.add_edge(condition_log, xor2)
root.order.add_edge(condition_log, xor3)
root.order.add_edge(condition_log, xor4)
root.order.add_edge(condition_log, xor5)
root.order.add_edge(condition_log, xor6)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor1, xor4)
root.order.add_edge(xor1, xor5)
root.order.add_edge(xor1, xor6)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor2, xor6)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor3, xor6)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor4, xor6)
root.order.add_edge(xor5, xor6)