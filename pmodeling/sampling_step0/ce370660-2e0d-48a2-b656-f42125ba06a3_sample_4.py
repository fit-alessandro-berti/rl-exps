import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

StructuralCheck = Transition(label='Structural Check')
PermitApply = Transition(label='Permit Apply')
DesignLayout = Transition(label='Design Layout')
SoilPrep = Transition(label='Soil Prep')
BedInstall = Transition(label='Bed Install')
IrrigationSetup = Transition(label='Irrigation Setup')
SensorMount = Transition(label='Sensor Mount')
SolarConnect = Transition(label='Solar Connect')
SeedOrder = Transition(label='Seed Order')
NutrientMix = Transition(label='Nutrient Mix')
CommunityMeet = Transition(label='Community Meet')
StaffTrain = Transition(label='Staff Train')
PlantCrop = Transition(label='Plant Crop')
MaintenancePlan = Transition(label='Maintenance Plan')
HarvestSchedule = Transition(label='Harvest Schedule')
WasteManage = Transition(label='Waste Manage')

skip = SilentTransition()

StructuralCheckLoop = OperatorPOWL(operator=Operator.LOOP, children=[StructuralCheck])
PermitApplyLoop = OperatorPOWL(operator=Operator.LOOP, children=[PermitApply])
DesignLayoutLoop = OperatorPOWL(operator=Operator.LOOP, children=[DesignLayout])
SoilPrepLoop = OperatorPOWL(operator=Operator.LOOP, children=[SoilPrep])
BedInstallLoop = OperatorPOWL(operator=Operator.LOOP, children=[BedInstall])
IrrigationSetupLoop = OperatorPOWL(operator=Operator.LOOP, children=[IrrigationSetup])
SensorMountLoop = OperatorPOWL(operator=Operator.LOOP, children=[SensorMount])
SolarConnectLoop = OperatorPOWL(operator=Operator.LOOP, children=[SolarConnect])
SeedOrderLoop = OperatorPOWL(operator=Operator.LOOP, children=[SeedOrder])
NutrientMixLoop = OperatorPOWL(operator=Operator.LOOP, children=[NutrientMix])
CommunityMeetLoop = OperatorPOWL(operator=Operator.LOOP, children=[CommunityMeet])
StaffTrainLoop = OperatorPOWL(operator=Operator.LOOP, children=[StaffTrain])
PlantCropLoop = OperatorPOWL(operator=Operator.LOOP, children=[PlantCrop])
MaintenancePlanLoop = OperatorPOWL(operator=Operator.LOOP, children=[MaintenancePlan])
HarvestScheduleLoop = OperatorPOWL(operator=Operator.LOOP, children=[HarvestSchedule])
WasteManageLoop = OperatorPOWL(operator=Operator.LOOP, children=[WasteManage])

xor = OperatorPOWL(operator=Operator.XOR, children=[skip, MaintenancePlanLoop])

root = StrictPartialOrder(nodes=[StructuralCheckLoop, PermitApplyLoop, DesignLayoutLoop, SoilPrepLoop, BedInstallLoop, IrrigationSetupLoop, SensorMountLoop, SolarConnectLoop, SeedOrderLoop, NutrientMixLoop, CommunityMeetLoop, StaffTrainLoop, PlantCropLoop, xor, HarvestScheduleLoop, WasteManageLoop])
root.order.add_edge(StructuralCheckLoop, PermitApplyLoop)
root.order.add_edge(PermitApplyLoop, DesignLayoutLoop)
root.order.add_edge(DesignLayoutLoop, SoilPrepLoop)
root.order.add_edge(SoilPrepLoop, BedInstallLoop)
root.order.add_edge(BedInstallLoop, IrrigationSetupLoop)
root.order.add_edge(IrrigationSetupLoop, SensorMountLoop)
root.order.add_edge(SensorMountLoop, SolarConnectLoop)
root.order.add_edge(SolarConnectLoop, SeedOrderLoop)
root.order.add_edge(SeedOrderLoop, NutrientMixLoop)
root.order.add_edge(NutrientMixLoop, CommunityMeetLoop)
root.order.add_edge(CommunityMeetLoop, StaffTrainLoop)
root.order.add_edge(StaffTrainLoop, PlantCropLoop)
root.order.add_edge(PlantCropLoop, xor)
root.order.add_edge(xor, HarvestScheduleLoop)
root.order.add_edge(HarvestScheduleLoop, WasteManageLoop)