import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

client_brief = Transition(label='Client Brief')
spec_analysis = Transition(label='Spec Analysis')
material_sourcing = Transition(label='Material Sourcing')
component_vetting = Transition(label='Component Vetting')
frame_assembly = Transition(label='Frame Assembly')
sensor_install = Transition(label='Sensor Install')
propulsion_setup = Transition(label='Propulsion Setup')
calibration = Transition(label='Calibration')
software_load = Transition(label='Software Load')
flight_test = Transition(label='Flight Test')
ai_training = Transition(label='AI Training')
qa_review = Transition(label='QA Review')
mission_pack = Transition(label='Mission Pack')
client_training = Transition(label='Client Training')
deployment_support = Transition(label='Deployment Support')

# Choices and Loops
client_brief_to_spec_analysis = OperatorPOWL(operator=Operator.XOR, children=[client_brief, spec_analysis])
spec_analysis_to_material_sourcing = OperatorPOWL(operator=Operator.XOR, children=[spec_analysis, material_sourcing])
material_sourcing_to_component_vetting = OperatorPOWL(operator=Operator.XOR, children=[material_sourcing, component_vetting])
component_vetting_to_frame_assembly = OperatorPOWL(operator=Operator.XOR, children=[component_vetting, frame_assembly])
frame_assembly_to_sensor_install = OperatorPOWL(operator=Operator.XOR, children=[frame_assembly, sensor_install])
sensor_install_to_propulsion_setup = OperatorPOWL(operator=Operator.XOR, children=[sensor_install, propulsion_setup])
propulsion_setup_to_calibration = OperatorPOWL(operator=Operator.XOR, children=[propulsion_setup, calibration])
calibration_to_software_load = OperatorPOWL(operator=Operator.XOR, children=[calibration, software_load])
software_load_to_flight_test = OperatorPOWL(operator=Operator.XOR, children=[software_load, flight_test])
flight_test_to_ai_training = OperatorPOWL(operator=Operator.XOR, children=[flight_test, ai_training])
ai_training_to_qa_review = OperatorPOWL(operator=Operator.XOR, children=[ai_training, qa_review])
qa_review_to_mission_pack = OperatorPOWL(operator=Operator.XOR, children=[qa_review, mission_pack])
mission_pack_to_client_training = OperatorPOWL(operator=Operator.XOR, children=[mission_pack, client_training])
client_training_to_deployment_support = OperatorPOWL(operator=Operator.XOR, children=[client_training, deployment_support])

# Loops
loop_1 = OperatorPOWL(operator=Operator.LOOP, children=[flight_test, software_load, calibration])
loop_2 = OperatorPOWL(operator=Operator.LOOP, children=[qa_review, mission_pack])

# Root
root = StrictPartialOrder(nodes=[client_brief_to_spec_analysis, spec_analysis_to_material_sourcing, material_sourcing_to_component_vetting, component_vetting_to_frame_assembly, frame_assembly_to_sensor_install, sensor_install_to_propulsion_setup, propulsion_setup_to_calibration, calibration_to_software_load, software_load_to_flight_test, flight_test_to_ai_training, ai_training_to_qa_review, qa_review_to_mission_pack, mission_pack_to_client_training, client_training_to_deployment_support, loop_1, loop_2])
root.order.add_edge(client_brief_to_spec_analysis, spec_analysis_to_material_sourcing)
root.order.add_edge(spec_analysis_to_material_sourcing, material_sourcing_to_component_vetting)
root.order.add_edge(material_sourcing_to_component_vetting, component_vetting_to_frame_assembly)
root.order.add_edge(component_vetting_to_frame_assembly, frame_assembly_to_sensor_install)
root.order.add_edge(frame_assembly_to_sensor_install, sensor_install_to_propulsion_setup)
root.order.add_edge(sensor_install_to_propulsion_setup, propulsion_setup_to_calibration)
root.order.add_edge(propulsion_setup_to_calibration, calibration_to_software_load)
root.order.add_edge(calibration_to_software_load, software_load_to_flight_test)
root.order.add_edge(software_load_to_flight_test, flight_test_to_ai_training)
root.order.add_edge(flight_test_to_ai_training, ai_training_to_qa_review)
root.order.add_edge(ai_training_to_qa_review, qa_review_to_mission_pack)
root.order.add_edge(qa_review_to_mission_pack, mission_pack_to_client_training)
root.order.add_edge(mission_pack_to_client_training, client_training_to_deployment_support)
root.order.add_edge(client_training_to_deployment_support, loop_1)
root.order.add_edge(client_training_to_deployment_support, loop_2)
root.order.add_edge(loop_1, flight_test_to_ai_training)
root.order.add_edge(loop_1, software_load_to_calibration)
root.order.add_edge(loop_2, qa_review_to_mission_pack)
root.order.add_edge(loop_2, mission_pack_to_client_training)