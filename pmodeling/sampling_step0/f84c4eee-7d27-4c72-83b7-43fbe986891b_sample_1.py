import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
ComponentSourcing = Transition(label='Component Sourcing')
FrameAssembly = Transition(label='Frame Assembly')
SensorMounting = Transition(label='Sensor Mounting')
WiringHarness = Transition(label='Wiring Harness')
CircuitTesting = Transition(label='Circuit Testing')
FirmwareLoading = Transition(label='Firmware Loading')
InitialCalibration = Transition(label='Initial Calibration')
SoftwareIntegration = Transition(label='Software Integration')
FlightTesting = Transition(label='Flight Testing')
DataLogging = Transition(label='Data Logging')
PerformanceTuning = Transition(label='Performance Tuning')
PackagingPrep = Transition(label='Packaging Prep')
CustomLabeling = Transition(label='Custom Labeling')
DocumentationPrint = Transition(label='Documentation Print')
QualityReview = Transition(label='Quality Review')
ClientTraining = Transition(label='Client Training')
RemoteMonitoring = Transition(label='Remote Monitoring')
FirmwareUpdate = Transition(label='Firmware Update')

# Define the control-flow operators
xor1 = OperatorPOWL(operator=Operator.XOR, children=[CircuitTesting, FirmwareLoading])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[InitialCalibration, SoftwareIntegration])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[FlightTesting, DataLogging])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[PerformanceTuning, PackagingPrep])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[CustomLabeling, DocumentationPrint])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[QualityReview, ClientTraining])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[RemoteMonitoring, FirmwareUpdate])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[ComponentSourcing, FrameAssembly])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[SensorMounting, WiringHarness])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[xor1, xor2])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[xor3, xor4])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[xor5, xor6])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[xor7, xor8])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[xor9, xor10])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[xor11, xor12])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[xor13, xor14])
xor17 = OperatorPOWL(operator=Operator.XOR, children=[xor15, xor16])
xor18 = OperatorPOWL(operator=Operator.XOR, children=[xor17, xor18])

# Define the loop
loop = OperatorPOWL(operator=Operator.LOOP, children=[xor18])

# Define the partial order
root = StrictPartialOrder(nodes=[loop])
root.order.add_edge(loop, xor1)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(loop, xor11)
root.order.add_edge(loop, xor12)
root.order.add_edge(loop, xor13)
root.order.add_edge(loop, xor14)
root.order.add_edge(loop, xor15)
root.order.add_edge(loop, xor16)
root.order.add_edge(loop, xor17)
root.order.add_edge(loop, xor18)