import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
concept_approve = Transition(label='Concept Approve')
budget_align = Transition(label='Budget Align')
design_review = Transition(label='Design Review')
structure_simulate = Transition(label='Structure Simulate')
material_procure = Transition(label='Material Procure')
vendor_select = Transition(label='Vendor Select')
permit_apply = Transition(label='Permit Apply')
safety_check = Transition(label='Safety Check')
site_prep = Transition(label='Site Prep')
logistics_plan = Transition(label='Logistics Plan')
fabricate_parts = Transition(label='Fabricate Parts')
assemble_onsite = Transition(label='Assemble Onsite')
quality_inspect = Transition(label='Quality Inspect')
weather_monitor = Transition(label='Weather Monitor')
public_unveil = Transition(label='Public Unveil')
maintenance_plan = Transition(label='Maintenance Plan')
stakeholder_meet = Transition(label='Stakeholder Meet')

# Define the silent transitions
skip = SilentTransition()

# Define the partial order
loop = OperatorPOWL(operator=Operator.LOOP, children=[fabricate_parts, assemble_onsite])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[quality_inspect, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[weather_monitor, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[maintenance_plan, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_meet, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[public_unveil, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[permit_apply, safety_check])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[logistics_plan, site_prep])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[material_procure, vendor_select])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[structure_simulate, design_review])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[budget_align, concept_approve])

# Define the root
root = StrictPartialOrder(nodes=[loop, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10])
root.order.add_edge(loop, xor1)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(loop, xor6)
root.order.add_edge(loop, xor7)
root.order.add_edge(loop, xor8)
root.order.add_edge(loop, xor9)
root.order.add_edge(loop, xor10)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor1, xor3)
root.order.add_edge(xor1, xor4)
root.order.add_edge(xor1, xor5)
root.order.add_edge(xor1, xor6)
root.order.add_edge(xor1, xor7)
root.order.add_edge(xor1, xor8)
root.order.add_edge(xor1, xor9)
root.order.add_edge(xor1, xor10)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor2, xor6)
root.order.add_edge(xor2, xor7)
root.order.add_edge(xor2, xor8)
root.order.add_edge(xor2, xor9)
root.order.add_edge(xor2, xor10)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor3, xor6)
root.order.add_edge(xor3, xor7)
root.order.add_edge(xor3, xor8)
root.order.add_edge(xor3, xor9)
root.order.add_edge(xor3, xor10)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor4, xor6)
root.order.add_edge(xor4, xor7)
root.order.add_edge(xor4, xor8)
root.order.add_edge(xor4, xor9)
root.order.add_edge(xor4, xor10)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor5, xor7)
root.order.add_edge(xor5, xor8)
root.order.add_edge(xor5, xor9)
root.order.add_edge(xor5, xor10)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor6, xor8)
root.order.add_edge(xor6, xor9)
root.order.add_edge(xor6, xor10)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor7, xor9)
root.order.add_edge(xor7, xor10)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor8, xor10)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor6)
root.order.add_edge(xor10, xor7)
root.order.add_edge(xor10, xor8)
root.order.add_edge(xor10, xor9)
root.order.add_edge(xor6, xor10)
root.order.add_edge(xor7, xor10)
root.order.add_edge(xor8, xor10)
root.order.add_edge(xor9, xor10)

# Print the root
print(root)