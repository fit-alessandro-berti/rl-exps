import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label='Site Survey')
B = Transition(label='Design Planning')
C = Transition(label='Permit Filing')
D = Transition(label='Structural Reinforce')
E = Transition(label='Hydroponic Setup')
F = Transition(label='Sensor Install')
G = Transition(label='Energy Audit')
H = Transition(label='Crop Selection')
I = Transition(label='Nutrient Mix')
J = Transition(label='Waste Process')
K = Transition(label='Climate Control')
L = Transition(label='Staff Training')
M = Transition(label='Market Study')
N = Transition(label='Community Meet')
O = Transition(label='Launch Trial')
P = Transition(label='Data Monitor')

skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[A, B])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[C, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[D, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[E, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[F, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[G, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[H, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[I, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[J, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[K, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[L, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[M, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[N, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[O, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[P, skip])
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[xor1])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor2])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[xor3])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[xor4])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor5])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[xor6])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[xor7])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[xor8])
loop9 = OperatorPOWL(operator=Operator.LOOP, children=[xor9])
loop10 = OperatorPOWL(operator=Operator.LOOP, children=[xor10])
loop11 = OperatorPOWL(operator=Operator.LOOP, children=[xor11])
loop12 = OperatorPOWL(operator=Operator.LOOP, children=[xor12])
loop13 = OperatorPOWL(operator=Operator.LOOP, children=[xor13])
loop14 = OperatorPOWL(operator=Operator.LOOP, children=[xor14])

root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8, loop9, loop10, loop11, loop12, loop13, loop14])
root.order.add_edge(loop1, xor)
root.order.add_edge(loop2, xor1)
root.order.add_edge(loop3, xor2)
root.order.add_edge(loop4, xor3)
root.order.add_edge(loop5, xor4)
root.order.add_edge(loop6, xor5)
root.order.add_edge(loop7, xor6)
root.order.add_edge(loop8, xor7)
root.order.add_edge(loop9, xor8)
root.order.add_edge(loop10, xor9)
root.order.add_edge(loop11, xor10)
root.order.add_edge(loop12, xor11)
root.order.add_edge(loop13, xor12)
root.order.add_edge(loop14, xor13)
root.order.add_edge(xor14, xor14)