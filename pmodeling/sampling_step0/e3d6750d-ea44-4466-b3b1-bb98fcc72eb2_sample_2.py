import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

site_survey = Transition(label='Site Survey')
structural_check = Transition(label='Structural Check')
iot_setup = Transition(label='IoT Setup')
crop_selection = Transition(label='Crop Selection')
hydroponic_install = Transition(label='Hydroponic Install')
water_recycling = Transition(label='Water Recycling')
energy_audit = Transition(label='Energy Audit')
plant_scheduling = Transition(label='Plant Scheduling')
yield_monitoring = Transition(label='Yield Monitoring')
regulation_review = Transition(label='Regulation Review')
staff_training = Transition(label='Staff Training')
data_integration = Transition(label='Data Integration')
supply_setup = Transition(label='Supply Setup')
quality_audit = Transition(label='Quality Audit')
logistics_plan = Transition(label='Logistics Plan')

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[structural_check, iot_setup])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[crop_selection, hydroponic_install])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[water_recycling, energy_audit])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[plant_scheduling, yield_monitoring])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[regulation_review, staff_training])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[data_integration, supply_setup])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[quality_audit, logistics_plan])

xor1 = OperatorPOWL(operator=Operator.XOR, children=[loop1, site_survey])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[loop2, xor1])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[loop3, xor2])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[loop4, xor3])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[loop5, xor4])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[loop6, xor5])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[loop7, xor6])

root = StrictPartialOrder(nodes=[xor7])
root.order.add_edge(xor7, xor6)
root.order.add_edge(xor6, xor5)
root.order.add_edge(xor5, xor4)
root.order.add_edge(xor4, xor3)
root.order.add_edge(xor3, xor2)
root.order.add_edge(xor2, xor1)
root.order.add_edge(xor1, site_survey)