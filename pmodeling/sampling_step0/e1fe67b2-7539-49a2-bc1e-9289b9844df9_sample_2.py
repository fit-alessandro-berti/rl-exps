import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label='Gather Specs')
B = Transition(label='Design Custom')
C = Transition(label='Source Parts')
D = Transition(label='Firmware Load')
E = Transition(label='Mechanical Fit')
F = Transition(label='Cable Routing')
G = Transition(label='Sensor Align')
H = Transition(label='Component Test')
I = Transition(label='Software Sync')
J = Transition(label='Flight Calibrate')
K = Transition(label='Enviro Test')
L = Transition(label='Remote Pair')
M = Transition(label='Quality Check')
N = Transition(label='Package Unit')
O = Transition(label='Register Drone')
P = Transition(label='Client Train')
skip = SilentTransition()
gather_specs = OperatorPOWL(operator=Operator.SILENT, children=[A])
design_custom = OperatorPOWL(operator=Operator.SILENT, children=[B])
source_parts = OperatorPOWL(operator=Operator.SILENT, children=[C])
firmware_load = OperatorPOWL(operator=Operator.SILENT, children=[D])
mechanical_fit = OperatorPOWL(operator=Operator.SILENT, children=[E])
cable_routing = OperatorPOWL(operator=Operator.SILENT, children=[F])
sensor_align = OperatorPOWL(operator=Operator.SILENT, children=[G])
component_test = OperatorPOWL(operator=Operator.SILENT, children=[H])
software_sync = OperatorPOWL(operator=Operator.SILENT, children=[I])
flight_calibrate = OperatorPOWL(operator=Operator.SILENT, children=[J])
enviro_test = OperatorPOWL(operator=Operator.SILENT, children=[K])
remote_pair = OperatorPOWL(operator=Operator.SILENT, children=[L])
quality_check = OperatorPOWL(operator=Operator.SILENT, children=[M])
package_unit = OperatorPOWL(operator=Operator.SILENT, children=[N])
register_drone = OperatorPOWL(operator=Operator.SILENT, children=[O])
client_train = OperatorPOWL(operator=Operator.SILENT, children=[P])
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[G, H, I, J, K, L, M, N])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[O, P])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[gather_specs, source_parts, firmware_load, mechanical_fit, cable_routing, sensor_align, component_test, software_sync, flight_calibrate, enviro_test, remote_pair, quality_check, package_unit, register_drone, client_train])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[loop1, loop2])
root = StrictPartialOrder(nodes=[xor1, xor2])
root.order.add_edge(xor1, xor2)