import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define activities
site_survey = Transition(label='Site Survey')
soil_testing = Transition(label='Soil Testing')
stakeholder_meet = Transition(label='Stakeholder Meet')
resource_plan = Transition(label='Resource Plan')
crop_selection = Transition(label='Crop Selection')
volunteer_sign_up = Transition(label='Volunteer Sign-up')
tech_setup = Transition(label='Tech Setup')
irrigation_check = Transition(label='Irrigation Check')
data_collection = Transition(label='Data Collection')
growth_monitoring = Transition(label='Growth Monitoring')
conflict_mediate = Transition(label='Conflict Mediate')
workshop_prep = Transition(label='Workshop Prep')
market_forecast = Transition(label='Market Forecast')
yield_analysis = Transition(label='Yield Analysis')
sustainability_audit = Transition(label='Sustainability Audit')
community_feedback = Transition(label='Community Feedback')
equipment_maintain = Transition(label='Equipment Maintain')
waste_manage = Transition(label='Waste Manage')

# Define transitions
xor1 = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_meet, site_survey])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[resource_plan, soil_testing])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[crop_selection, tech_setup])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[volunteer_sign_up, irrigation_check])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[data_collection, growth_monitoring])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[conflict_mediate, workshop_prep])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[market_forecast, yield_analysis])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[sustainability_audit, community_feedback])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[equipment_maintain, waste_manage])

# Define loops
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[xor1, xor2])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor3, xor4])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[xor5, xor6])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[xor7, xor8])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor9, xor1])

# Define root
root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5])
root.order.add_edge(loop1, xor2)
root.order.add_edge(loop2, xor3)
root.order.add_edge(loop3, xor4)
root.order.add_edge(loop4, xor5)
root.order.add_edge(loop5, xor6)
root.order.add_edge(xor1, loop1)
root.order.add_edge(xor2, loop2)
root.order.add_edge(xor3, loop3)
root.order.add_edge(xor4, loop4)
root.order.add_edge(xor5, loop5)
root.order.add_edge(xor6, loop1)
root.order.add_edge(xor7, loop2)
root.order.add_edge(xor8, loop3)
root.order.add_edge(xor9, loop4)
root.order.add_edge(xor1, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor1)