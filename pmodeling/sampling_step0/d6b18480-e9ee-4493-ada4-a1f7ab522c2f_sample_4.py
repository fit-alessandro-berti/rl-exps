import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
material_sourcing = Transition(label='Material Sourcing')
forager_dispatch = Transition(label='Forager Dispatch')
authenticity_check = Transition(label='Authenticity Check')
batch_scheduling = Transition(label='Batch Scheduling')
artisan_allocation = Transition(label='Artisan Allocation')
craft_assembly = Transition(label='Craft Assembly')
quality_inspection = Transition(label='Quality Inspection')
blockchain_update = Transition(label='Blockchain Update')
demand_forecast = Transition(label='Demand Forecast')
price_adjustment = Transition(label='Price Adjustment')
compliance_review = Transition(label='Compliance Review')
logistics_planning = Transition(label='Logistics Planning')
distributor_sync = Transition(label='Distributor Sync')
customer_feedback = Transition(label='Customer Feedback')
product_refinement = Transition(label='Product Refinement')
reputation_audit = Transition(label='Reputation Audit')
seasonal_review = Transition(label='Seasonal Review')

# Define the workflow
xor1 = OperatorPOWL(operator=Operator.XOR, children=[seasonal_review, SilentTransition()])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[craft_assembly, SilentTransition()])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[quality_inspection, SilentTransition()])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[logistics_planning, SilentTransition()])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[distributor_sync, SilentTransition()])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, SilentTransition()])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[product_refinement, SilentTransition()])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[reputation_audit, SilentTransition()])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[batch_scheduling, artisan_allocation])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[authenticity_check, blockchain_update])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[demand_forecast, price_adjustment])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[compliance_review, SilentTransition()])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[xor1, xor2])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[xor3, xor4])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[xor5, xor6])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[xor7, xor8])

root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8])
root.order.add_edge(loop1, loop2)
root.order.add_edge(loop1, loop3)
root.order.add_edge(loop1, loop4)
root.order.add_edge(loop2, loop5)
root.order.add_edge(loop2, loop6)
root.order.add_edge(loop3, loop7)
root.order.add_edge(loop3, loop8)
root.order.add_edge(loop4, loop5)
root.order.add_edge(loop4, loop6)
root.order.add_edge(loop4, loop7)
root.order.add_edge(loop4, loop8)
root.order.add_edge(loop5, loop1)
root.order.add_edge(loop6, loop1)
root.order.add_edge(loop7, loop1)
root.order.add_edge(loop8, loop1)
root.order.add_edge(loop1, loop5)
root.order.add_edge(loop2, loop6)
root.order.add_edge(loop3, loop7)
root.order.add_edge(loop4, loop8)
root.order.add_edge(loop5, loop2)
root.order.add_edge(loop6, loop3)
root.order.add_edge(loop7, loop4)
root.order.add_edge(loop8, loop4)