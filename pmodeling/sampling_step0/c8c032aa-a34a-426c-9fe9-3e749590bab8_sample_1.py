import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
light_sourcing = Transition(label='Light Sourcing')
nutrient_order = Transition(label='Nutrient Order')
climate_setup = Transition(label='Climate Setup')
growth_planning = Transition(label='Growth Planning')
seed_planting = Transition(label='Seed Planting')
irrigation_check = Transition(label='Irrigation Check')
pest_monitoring = Transition(label='Pest Monitoring')
energy_tracking = Transition(label='Energy Tracking')
quality_testing = Transition(label='Quality Testing')
data_analysis = Transition(label='Data Analysis')
equipment_repair = Transition(label='Equipment Repair')
packaging_prep = Transition(label='Packaging Prep')
inventory_update = Transition(label='Inventory Update')
delivery_scheduling = Transition(label='Delivery Scheduling')
customer_feedback = Transition(label='Customer Feedback')
market_forecast = Transition(label='Market Forecast')
skip = SilentTransition()
xor = OperatorPOWL(operator=Operator.XOR, children=[market_forecast, skip])
loop = OperatorPOWL(operator=Operator.LOOP, children=[equipment_repair, data_analysis])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[delivery_scheduling, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[inventory_update, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[packaging_prep, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[quality_testing, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[energy_tracking, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[pest_monitoring, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[irrigation_check, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[growth_planning, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[seed_planting, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[climate_setup, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[nutrient_order, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[light_sourcing, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[market_forecast, skip])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, skip])
xor17 = OperatorPOWL(operator=Operator.XOR, children=[delivery_scheduling, skip])
xor18 = OperatorPOWL(operator=Operator.XOR, children=[inventory_update, skip])
xor19 = OperatorPOWL(operator=Operator.XOR, children=[packaging_prep, skip])
xor20 = OperatorPOWL(operator=Operator.XOR, children=[quality_testing, skip])
xor21 = OperatorPOWL(operator=Operator.XOR, children=[energy_tracking, skip])
xor22 = OperatorPOWL(operator=Operator.XOR, children=[pest_monitoring, skip])
xor23 = OperatorPOWL(operator=Operator.XOR, children=[irrigation_check, skip])
xor24 = OperatorPOWL(operator=Operator.XOR, children=[growth_planning, skip])
xor25 = OperatorPOWL(operator=Operator.XOR, children=[seed_planting, skip])
xor26 = OperatorPOWL(operator=Operator.XOR, children=[climate_setup, skip])
xor27 = OperatorPOWL(operator=Operator.XOR, children=[nutrient_order, skip])
xor28 = OperatorPOWL(operator=Operator.XOR, children=[light_sourcing, skip])
root = StrictPartialOrder(nodes=[xor, loop, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15, xor16, xor17, xor18, xor19, xor20, xor21, xor22, xor23, xor24, xor25, xor26, xor27, xor28])
root.order.add_edge(xor, loop)
root.order.add_edge(loop, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)
root.order.add_edge(xor15, xor16)
root.order.add_edge(xor16, xor17)
root.order.add_edge(xor17, xor18)
root.order.add_edge(xor18, xor19)
root.order.add_edge(xor19, xor20)
root.order.add_edge(xor20, xor21)
root.order.add_edge(xor21, xor22)
root.order.add_edge(xor22, xor23)
root.order.add_edge(xor23, xor24)
root.order.add_edge(xor24, xor25)
root.order.add_edge(xor25, xor26)
root.order.add_edge(xor26, xor27)
root.order.add_edge(xor27, xor28)
root.order.add_edge(xor28, xor)
root.order.add_edge(xor28, xor2)
root.order.add_edge(xor28, xor3)
root.order.add_edge(xor28, xor4)
root.order.add_edge(xor28, xor5)
root.order.add_edge(xor28, xor6)
root.order.add_edge(xor28, xor7)
root.order.add_edge(xor28, xor8)
root.order.add_edge(xor28, xor9)
root.order.add_edge(xor28, xor10)
root.order.add_edge(xor28, xor11)
root.order.add_edge(xor28, xor12)
root.order.add_edge(xor28, xor13)
root.order.add_edge(xor28, xor14)
root.order.add_edge(xor28, xor15)
root.order.add_edge(xor28, xor16)
root.order.add_edge(xor28, xor17)
root.order.add_edge(xor28, xor18)
root.order.add_edge(xor28, xor19)
root.order.add_edge(xor28, xor20)
root.order.add_edge(xor28, xor21)
root.order.add_edge(xor28, xor22)
root.order.add_edge(xor28, xor23)
root.order.add_edge(xor28, xor24)
root.order.add_edge(xor28, xor25)
root.order.add_edge(xor28, xor26)
root.order.add_edge(xor28, xor27)
root.order.add_edge(xor28, xor28)