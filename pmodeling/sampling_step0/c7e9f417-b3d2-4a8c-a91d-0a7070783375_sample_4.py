import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
# Define the activities
brand_audit = Transition(label='Brand Audit')
equity_review = Transition(label='Equity Review')
market_analysis = Transition(label='Market Analysis')
legal_clearance = Transition(label='Legal Clearance')
trademark_check = Transition(label='Trademark Check')
portfolio_merge = Transition(label='Portfolio Merge')
customer_sync = Transition(label='Customer Sync')
cultural_align = Transition(label='Cultural Align')
internal_brief = Transition(label='Internal Brief')
campaign_design = Transition(label='Campaign Design')
resource_plan = Transition(label='Resource Plan')
stakeholder_meet = Transition(label='Stakeholder Meet')
launch_prep = Transition(label='Launch Prep')
feedback_loop = Transition(label='Feedback Loop')
performance_track = Transition(label='Performance Track')
# Define the control flow
xor = OperatorPOWL(operator=Operator.XOR, children=[internal_brief, feedback_loop])
loop = OperatorPOWL(operator=Operator.LOOP, children=[market_analysis, legal_clearance])
xor_1 = OperatorPOWL(operator=Operator.XOR, children=[cultural_align, feedback_loop])
xor_2 = OperatorPOWL(operator=Operator.XOR, children=[resource_plan, stakeholder_meet])
xor_3 = OperatorPOWL(operator=Operator.XOR, children=[campaign_design, launch_prep])
xor_4 = OperatorPOWL(operator=Operator.XOR, children=[performance_track, feedback_loop])
xor_5 = OperatorPOWL(operator=Operator.XOR, children=[brand_audit, feedback_loop])
xor_6 = OperatorPOWL(operator=Operator.XOR, children=[equity_review, feedback_loop])
xor_7 = OperatorPOWL(operator=Operator.XOR, children=[customer_sync, feedback_loop])
xor_8 = OperatorPOWL(operator=Operator.XOR, children=[trademark_check, feedback_loop])
xor_9 = OperatorPOWL(operator=Operator.XOR, children=[portfolio_merge, feedback_loop])
xor_10 = OperatorPOWL(operator=Operator.XOR, children=[xor_1, xor_2])
xor_11 = OperatorPOWL(operator=Operator.XOR, children=[xor_3, xor_4])
xor_12 = OperatorPOWL(operator=Operator.XOR, children=[xor_5, xor_6])
xor_13 = OperatorPOWL(operator=Operator.XOR, children=[xor_7, xor_8])
xor_14 = OperatorPOWL(operator=Operator.XOR, children=[xor_9, xor_10])
xor_15 = OperatorPOWL(operator=Operator.XOR, children=[xor_11, xor_12])
xor_16 = OperatorPOWL(operator=Operator.XOR, children=[xor_13, xor_14])
xor_17 = OperatorPOWL(operator=Operator.XOR, children=[xor_15, xor_16])
root = StrictPartialOrder(nodes=[xor_17, loop, xor, xor_1, xor_2, xor_3, xor_4, xor_5, xor_6, xor_7, xor_8, xor_9, xor_10, xor_11, xor_12, xor_13, xor_14, xor_15, xor_16, xor_17])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor_1)
root.order.add_edge(xor, xor_2)
root.order.add_edge(xor_1, xor_3)
root.order.add_edge(xor_2, xor_4)
root.order.add_edge(xor_3, xor_5)
root.order.add_edge(xor_4, xor_6)
root.order.add_edge(xor_5, xor_7)
root.order.add_edge(xor_6, xor_8)
root.order.add_edge(xor_7, xor_9)
root.order.add_edge(xor_8, xor_10)
root.order.add_edge(xor_9, xor_11)
root.order.add_edge(xor_10, xor_12)
root.order.add_edge(xor_11, xor_13)
root.order.add_edge(xor_12, xor_14)
root.order.add_edge(xor_13, xor_15)
root.order.add_edge(xor_14, xor_16)
root.order.add_edge(xor_15, xor_17)
root.order.add_edge(xor_16, xor_17)