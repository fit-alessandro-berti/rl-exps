import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

artifact_intake = Transition(label='Artifact Intake')
condition_check = Transition(label='Condition Check')
material_test = Transition(label='Material Test')
archival_search = Transition(label='Archival Search')
style_compare = Transition(label='Style Compare')
expert_review = Transition(label='Expert Review')
restoration_check = Transition(label='Restoration Check')
provenance_trace = Transition(label='Provenance Trace')
legal_verify = Transition(label='Legal Verify')
value_appraise = Transition(label='Value Appraise')
catalog_entry = Transition(label='Catalog Entry')
marketing_plan = Transition(label='Marketing Plan')
auction_setup = Transition(label='Auction Setup')
certify_final = Transition(label='Certify Final')
sales_report = Transition(label='Sales Report')

skip = SilentTransition()
xor1 = OperatorPOWL(operator=Operator.XOR, children=[material_test, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[expert_review, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[restoration_check, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[legal_verify, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[style_compare, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[archival_search, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[provenance_trace, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[value_appraise, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[catalog_entry, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[marketing_plan, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[auction_setup, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[certify_final, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[sales_report, skip])

loop1 = OperatorPOWL(operator=Operator.LOOP, children=[artifact_intake, xor1])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])

root = StrictPartialOrder(nodes=[loop1, loop2])
root.order.add_edge(loop1, xor1)
root.order.add_edge(xor1, loop2)
root.order.add_edge(loop2, xor2)
root.order.add_edge(xor2, loop2)
root.order.add_edge(loop2, xor3)
root.order.add_edge(xor3, loop2)
root.order.add_edge(loop2, xor4)
root.order.add_edge(xor4, loop2)
root.order.add_edge(loop2, xor5)
root.order.add_edge(xor5, loop2)
root.order.add_edge(loop2, xor6)
root.order.add_edge(xor6, loop2)
root.order.add_edge(loop2, xor7)
root.order.add_edge(xor7, loop2)
root.order.add_edge(loop2, xor8)
root.order.add_edge(xor8, loop2)
root.order.add_edge(loop2, xor9)
root.order.add_edge(xor9, loop2)
root.order.add_edge(loop2, xor10)
root.order.add_edge(xor10, loop2)
root.order.add_edge(loop2, xor11)
root.order.add_edge(xor11, loop2)
root.order.add_edge(loop2, xor12)
root.order.add_edge(xor12, loop2)
root.order.add_edge(loop2, xor13)
root.order.add_edge(xor13, loop2)