import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label='Client Consult')
B = Transition(label='Spec Gathering')
C = Transition(label='Supplier Sourcing')
D = Transition(label='Design Review')
E = Transition(label='Simulation Test')
F = Transition(label='Proto Assembly')
G = Transition(label='Quality Check')
H = Transition(label='Firmware Flash')
I = Transition(label='Sensor Install')
J = Transition(label='Final Testing')
K = Transition(label='Brand Packaging')
L = Transition(label='Shipping Prep')
M = Transition(label='Delivery Schedule')
N = Transition(label='Client Training')
O = Transition(label='Diagnostics Setup')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[A, B])
xor = OperatorPOWL(operator=Operator.XOR, children=[C, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[D, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[E, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[F, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[G, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[H, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[I, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[J, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[K, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[L, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[M, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[N, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[O, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, loop)