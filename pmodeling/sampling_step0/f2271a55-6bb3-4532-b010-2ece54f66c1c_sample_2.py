import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

provenance_check = Transition(label='Provenance Check')
spectroscopy_test = Transition(label='Spectroscopy Test')
carbon_dating = Transition(label='Carbon Dating')
style_analysis = Transition(label='Style Analysis')
image_scanning = Transition(label='Image Scanning')
restoration_scan = Transition(label='Restoration Scan')
appraiser_review = Transition(label='Appraiser Review')
database_match = Transition(label='Database Match')
blockchain_entry = Transition(label='Blockchain Entry')
certificate_issue = Transition(label='Certificate Issue')
forgery_detect = Transition(label='Forgery Detect')
report_compilation = Transition(label='Report Compilation')
client_briefing = Transition(label='Client Briefing')
secure_storage = Transition(label='Secure Storage')
final_approval = Transition(label='Final Approval')
skip = SilentTransition()

provenance_loop = OperatorPOWL(operator=Operator.LOOP, children=[provenance_check])
spectroscopy_xor = OperatorPOWL(operator=Operator.XOR, children=[spectroscopy_test, carbon_dating])
style_xor = OperatorPOWL(operator=Operator.XOR, children=[style_analysis, image_scanning])
restoration_xor = OperatorPOWL(operator=Operator.XOR, children=[restoration_scan, skip])
database_xor = OperatorPOWL(operator=Operator.XOR, children=[database_match, skip])
blockchain_xor = OperatorPOWL(operator=Operator.XOR, children=[blockchain_entry, skip])
certificate_xor = OperatorPOWL(operator=Operator.XOR, children=[certificate_issue, forgery_detect])
report_xor = OperatorPOWL(operator=Operator.XOR, children=[report_compilation, skip])
client_xor = OperatorPOWL(operator=Operator.XOR, children=[client_briefing, skip])
storage_xor = OperatorPOWL(operator=Operator.XOR, children=[secure_storage, skip])
approval_xor = OperatorPOWL(operator=Operator.XOR, children=[final_approval, skip])

root = StrictPartialOrder(nodes=[provenance_loop, spectroscopy_xor, style_xor, restoration_xor, database_xor, blockchain_xor, certificate_xor, report_xor, client_xor, storage_xor, approval_xor])
root.order.add_edge(provenance_loop, spectroscopy_xor)
root.order.add_edge(provenance_loop, style_xor)
root.order.add_edge(provenance_loop, restoration_xor)
root.order.add_edge(provenance_loop, database_xor)
root.order.add_edge(provenance_loop, blockchain_xor)
root.order.add_edge(provenance_loop, certificate_xor)
root.order.add_edge(provenance_loop, report_xor)
root.order.add_edge(provenance_loop, client_xor)
root.order.add_edge(provenance_loop, storage_xor)
root.order.add_edge(provenance_loop, approval_xor)