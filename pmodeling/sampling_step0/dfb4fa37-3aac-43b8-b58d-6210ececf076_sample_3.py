import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
site_analysis = Transition(label='Site Analysis')
permit_securing = Transition(label='Permit Securing')
unit_designing = Transition(label='Unit Designing')
led_sourcing = Transition(label='LED Sourcing')
hydroponic_setup = Transition(label='Hydroponic Setup')
staff_hiring = Transition(label='Staff Hiring')
pilot_cultivation = Transition(label='Pilot Cultivation')
data_integration = Transition(label='Data Integration')
waste_recycling = Transition(label='Waste Recycling')
local_distribution = Transition(label='Local Distribution')
subscription_setup = Transition(label='Subscription Setup')
iot_deployment = Transition(label='IoT Deployment')
sustainability_audit = Transition(label='Sustainability Audit')
market_testing = Transition(label='Market Testing')
process_refinement = Transition(label='Process Refinement')

# Define silent transitions for choices
skip1 = SilentTransition()
skip2 = SilentTransition()
skip3 = SilentTransition()
skip4 = SilentTransition()
skip5 = SilentTransition()
skip6 = SilentTransition()
skip7 = SilentTransition()
skip8 = SilentTransition()
skip9 = SilentTransition()
skip10 = SilentTransition()
skip11 = SilentTransition()
skip12 = SilentTransition()
skip13 = SilentTransition()
skip14 = SilentTransition()
skip15 = SilentTransition()
skip16 = SilentTransition()

# Define the choices and loops
site_analysis_choice = OperatorPOWL(operator=Operator.XOR, children=[site_analysis, skip1])
permit_securing_choice = OperatorPOWL(operator=Operator.XOR, children=[permit_securing, skip2])
unit_designing_choice = OperatorPOWL(operator=Operator.XOR, children=[unit_designing, skip3])
led_sourcing_choice = OperatorPOWL(operator=Operator.XOR, children=[led_sourcing, skip4])
hydroponic_setup_choice = OperatorPOWL(operator=Operator.XOR, children=[hydroponic_setup, skip5])
staff_hiring_choice = OperatorPOWL(operator=Operator.XOR, children=[staff_hiring, skip6])
pilot_cultivation_choice = OperatorPOWL(operator=Operator.XOR, children=[pilot_cultivation, skip7])
data_integration_choice = OperatorPOWL(operator=Operator.XOR, children=[data_integration, skip8])
waste_recycling_choice = OperatorPOWL(operator=Operator.XOR, children=[waste_recycling, skip9])
local_distribution_choice = OperatorPOWL(operator=Operator.XOR, children=[local_distribution, skip10])
subscription_setup_choice = OperatorPOWL(operator=Operator.XOR, children=[subscription_setup, skip11])
iot_deployment_choice = OperatorPOWL(operator=Operator.XOR, children=[iot_deployment, skip12])
sustainability_audit_choice = OperatorPOWL(operator=Operator.XOR, children=[sustainability_audit, skip13])
market_testing_choice = OperatorPOWL(operator=Operator.XOR, children=[market_testing, skip14])
process_refinement_choice = OperatorPOWL(operator=Operator.XOR, children=[process_refinement, skip15])

site_analysis_loop = OperatorPOWL(operator=Operator.LOOP, children=[site_analysis_choice, skip1])
permit_securing_loop = OperatorPOWL(operator=Operator.LOOP, children=[permit_securing_choice, skip2])
unit_designing_loop = OperatorPOWL(operator=Operator.LOOP, children=[unit_designing_choice, skip3])
led_sourcing_loop = OperatorPOWL(operator=Operator.LOOP, children=[led_sourcing_choice, skip4])
hydroponic_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[hydroponic_setup_choice, skip5])
staff_hiring_loop = OperatorPOWL(operator=Operator.LOOP, children=[staff_hiring_choice, skip6])
pilot_cultivation_loop = OperatorPOWL(operator=Operator.LOOP, children=[pilot_cultivation_choice, skip7])
data_integration_loop = OperatorPOWL(operator=Operator.LOOP, children=[data_integration_choice, skip8])
waste_recycling_loop = OperatorPOWL(operator=Operator.LOOP, children=[waste_recycling_choice, skip9])
local_distribution_loop = OperatorPOWL(operator=Operator.LOOP, children=[local_distribution_choice, skip10])
subscription_setup_loop = OperatorPOWL(operator=Operator.LOOP, children=[subscription_setup_choice, skip11])
iot_deployment_loop = OperatorPOWL(operator=Operator.LOOP, children=[iot_deployment_choice, skip12])
sustainability_audit_loop = OperatorPOWL(operator=Operator.LOOP, children=[sustainability_audit_choice, skip13])
market_testing_loop = OperatorPOWL(operator=Operator.LOOP, children=[market_testing_choice, skip14])
process_refinement_loop = OperatorPOWL(operator=Operator.LOOP, children=[process_refinement_choice, skip15])

# Create the partial order
root = StrictPartialOrder(nodes=[site_analysis_loop, permit_securing_loop, unit_designing_loop, led_sourcing_loop, hydroponic_setup_loop, staff_hiring_loop, pilot_cultivation_loop, data_integration_loop, waste_recycling_loop, local_distribution_loop, subscription_setup_loop, iot_deployment_loop, sustainability_audit_loop, market_testing_loop, process_refinement_loop])

# Add edges between the nodes
root.order.add_edge(site_analysis_loop, permit_securing_loop)
root.order.add_edge(permit_securing_loop, unit_designing_loop)
root.order.add_edge(unit_designing_loop, led_sourcing_loop)
root.order.add_edge(led_sourcing_loop, hydroponic_setup_loop)
root.order.add_edge(hydroponic_setup_loop, staff_hiring_loop)
root.order.add_edge(staff_hiring_loop, pilot_cultivation_loop)
root.order.add_edge(pilot_cultivation_loop, data_integration_loop)
root.order.add_edge(data_integration_loop, waste_recycling_loop)
root.order.add_edge(waste_recycling_loop, local_distribution_loop)
root.order.add_edge(local_distribution_loop, subscription_setup_loop)
root.order.add_edge(subscription_setup_loop, iot_deployment_loop)
root.order.add_edge(iot_deployment_loop, sustainability_audit_loop)
root.order.add_edge(sustainability_audit_loop, market_testing_loop)
root.order.add_edge(market_testing_loop, process_refinement_loop)

# Print the root node
print(root)