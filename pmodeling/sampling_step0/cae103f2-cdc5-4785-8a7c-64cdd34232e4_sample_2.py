import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
# Define the activities
site_acquisition = Transition(label='Site Acquisition')
impact_assessment = Transition(label='Impact Assess')
modular_setup = Transition(label='Modular Setup')
crop_planting = Transition(label='Crop Planting')
nutrient_control = Transition(label='Nutrient Control')
pest_control = Transition(label='Pest Control')
growth_monitor = Transition(label='Growth Monitor')
community_engagement = Transition(label='Community Engage')
yield_forecast = Transition(label='Yield Forecast')
supply_coordinate = Transition(label='Supply Coordinate')
compliance_check = Transition(label='Compliance Check')
waste_recycle = Transition(label='Waste Recycle')
energy_optimize = Transition(label='Energy Optimize')
market_strategy = Transition(label='Market Strategy')
performance_review = Transition(label='Performance Review')
# Define the silent transitions
skip = SilentTransition()
# Define the loops and choices
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[impact_assessment, modular_setup])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[crop_planting, nutrient_control, pest_control, growth_monitor])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[community_engagement, yield_forecast])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[supply_coordinate, compliance_check])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[waste_recycle, energy_optimize])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[market_strategy, performance_review])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[skip, loop6])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[loop5, loop7])
loop9 = OperatorPOWL(operator=Operator.LOOP, children=[loop4, loop8])
loop10 = OperatorPOWL(operator=Operator.LOOP, children=[loop3, loop9])
loop11 = OperatorPOWL(operator=Operator.LOOP, children=[loop2, loop10])
root = StrictPartialOrder(nodes=[loop11])
root.order.add_edge(loop11, loop2)
root.order.add_edge(loop2, loop3)
root.order.add_edge(loop3, loop4)
root.order.add_edge(loop4, loop5)
root.order.add_edge(loop5, loop6)
root.order.add_edge(loop6, loop7)
root.order.add_edge(loop7, loop8)
root.order.add_edge(loop8, loop9)
root.order.add_edge(loop9, loop10)
root.order.add_edge(loop10, loop11)