from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the activities
data_aggregation = Transition(label='Data Aggregation')
anomaly_detect = Transition(label='Anomaly Detect')
risk_assess = Transition(label='Risk Assess')
demand_model = Transition(label='Demand Model')
stakeholder_sync = Transition(label='Stakeholder Sync')
auto_negotiate = Transition(label='Auto Negotiate')
inventory_optimize = Transition(label='Inventory Optimize')
contingency_plan = Transition(label='Contingency Plan')
resource_allocate = Transition(label='Resource Allocate')
sustainability_check = Transition(label='Sustainability Check')
compliance_verify = Transition(label='Compliance Verify')
impact_score = Transition(label='Impact Score')
distribution_plan = Transition(label='Distribution Plan')
feedback_loop = Transition(label='Feedback Loop')
performance_audit = Transition(label='Performance Audit')
schedule_execute = Transition(label='Schedule Execute')

# Define the operators
xor = OperatorPOWL(operator=Operator.XOR, children=[stakeholder_sync, feedback_loop])
loop = OperatorPOWL(operator=Operator.LOOP, children=[auto_negotiate, inventory_optimize])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[contingency_plan, resource_allocate])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[sustainability_check, compliance_verify])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[impact_score, distribution_plan])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[performance_audit, schedule_execute])

# Define the partial order
root = StrictPartialOrder(nodes=[data_aggregation, anomaly_detect, risk_assess, demand_model, xor, loop, xor2, xor3, xor4, xor5])
root.order.add_edge(data_aggregation, anomaly_detect)
root.order.add_edge(data_aggregation, risk_assess)
root.order.add_edge(data_aggregation, demand_model)
root.order.add_edge(anomaly_detect, xor)
root.order.add_edge(risk_assess, xor2)
root.order.add_edge(demand_model, xor3)
root.order.add_edge(xor, loop)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(loop, xor)
root.order.add_edge(loop, xor2)
root.order.add_edge(loop, xor3)
root.order.add_edge(loop, xor4)
root.order.add_edge(loop, xor5)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor, xor3)
root.order.add_edge(xor, xor4)
root.order.add_edge(xor, xor5)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor2, xor4)
root.order.add_edge(xor2, xor5)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor3, xor5)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor)

# Print the root
print(root)