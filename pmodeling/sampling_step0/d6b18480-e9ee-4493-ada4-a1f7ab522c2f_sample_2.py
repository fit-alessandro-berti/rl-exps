import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions
material_sourcing = Transition(label='Material Sourcing')
forager_dispatch = Transition(label='Forager Dispatch')
authenticity_check = Transition(label='Authenticity Check')
batch_scheduling = Transition(label='Batch Scheduling')
artisan_allocation = Transition(label='Artisan Allocation')
craft_assembly = Transition(label='Craft Assembly')
quality_inspection = Transition(label='Quality Inspection')
blockchain_update = Transition(label='Blockchain Update')
demand_forecast = Transition(label='Demand Forecast')
price_adjustment = Transition(label='Price Adjustment')
compliance_review = Transition(label='Compliance Review')
logistics_planning = Transition(label='Logistics Planning')
distributor_sync = Transition(label='Distributor Sync')
customer_feedback = Transition(label='Customer Feedback')
product_refinement = Transition(label='Product Refinement')
reputation_audit = Transition(label='Reputation Audit')
seasonal_review = Transition(label='Seasonal Review')

# Define silent transitions
skip = SilentTransition()

# Define loops and choices
loop_batch_scheduling = OperatorPOWL(operator=Operator.LOOP, children=[batch_scheduling])
loop_artisan_allocation = OperatorPOWL(operator=Operator.LOOP, children=[artisan_allocation])
loop_quality_inspection = OperatorPOWL(operator=Operator.LOOP, children=[quality_inspection])
loop_blockchain_update = OperatorPOWL(operator=Operator.LOOP, children=[blockchain_update])
loop_demand_forecast = OperatorPOWL(operator=Operator.LOOP, children=[demand_forecast])
loop_price_adjustment = OperatorPOWL(operator=Operator.LOOP, children=[price_adjustment])
loop_compliance_review = OperatorPOWL(operator=Operator.LOOP, children=[compliance_review])
loop_logistics_planning = OperatorPOWL(operator=Operator.LOOP, children=[logistics_planning])
loop_distributor_sync = OperatorPOWL(operator=Operator.LOOP, children=[distributor_sync])
loop_customer_feedback = OperatorPOWL(operator=Operator.LOOP, children=[customer_feedback])
loop_product_refinement = OperatorPOWL(operator=Operator.LOOP, children=[product_refinement])
loop_reputation_audit = OperatorPOWL(operator=Operator.LOOP, children=[reputation_audit])
loop_seasonal_review = OperatorPOWL(operator=Operator.LOOP, children=[seasonal_review])

xor_material_sourcing = OperatorPOWL(operator=Operator.XOR, children=[material_sourcing, skip])
xor_forager_dispatch = OperatorPOWL(operator=Operator.XOR, children=[forager_dispatch, skip])
xor_authenticity_check = OperatorPOWL(operator=Operator.XOR, children=[authenticity_check, skip])
xor_batch_scheduling = OperatorPOWL(operator=Operator.XOR, children=[batch_scheduling, skip])
xor_artisan_allocation = OperatorPOWL(operator=Operator.XOR, children=[artisan_allocation, skip])
xor_craft_assembly = OperatorPOWL(operator=Operator.XOR, children=[craft_assembly, skip])
xor_quality_inspection = OperatorPOWL(operator=Operator.XOR, children=[quality_inspection, skip])
xor_blockchain_update = OperatorPOWL(operator=Operator.XOR, children=[blockchain_update, skip])
xor_demand_forecast = OperatorPOWL(operator=Operator.XOR, children=[demand_forecast, skip])
xor_price_adjustment = OperatorPOWL(operator=Operator.XOR, children=[price_adjustment, skip])
xor_compliance_review = OperatorPOWL(operator=Operator.XOR, children=[compliance_review, skip])
xor_logistics_planning = OperatorPOWL(operator=Operator.XOR, children=[logistics_planning, skip])
xor_distributor_sync = OperatorPOWL(operator=Operator.XOR, children=[distributor_sync, skip])
xor_customer_feedback = OperatorPOWL(operator=Operator.XOR, children=[customer_feedback, skip])
xor_product_refinement = OperatorPOWL(operator=Operator.XOR, children=[product_refinement, skip])
xor_reputation_audit = OperatorPOWL(operator=Operator.XOR, children=[reputation_audit, skip])
xor_seasonal_review = OperatorPOWL(operator=Operator.XOR, children=[seasonal_review, skip])

# Define root
root = StrictPartialOrder(nodes=[xor_material_sourcing, xor_forager_dispatch, xor_authenticity_check, xor_batch_scheduling, xor_artisan_allocation, xor_craft_assembly, xor_quality_inspection, xor_blockchain_update, xor_demand_forecast, xor_price_adjustment, xor_compliance_review, xor_logistics_planning, xor_distributor_sync, xor_customer_feedback, xor_product_refinement, xor_reputation_audit, xor_seasonal_review])
root.order.add_edge(xor_material_sourcing, loop_batch_scheduling)
root.order.add_edge(xor_forager_dispatch, loop_artisan_allocation)
root.order.add_edge(xor_authenticity_check, loop_quality_inspection)
root.order.add_edge(xor_blockchain_update, loop_demand_forecast)
root.order.add_edge(xor_demand_forecast, loop_price_adjustment)
root.order.add_edge(xor_price_adjustment, loop_compliance_review)
root.order.add_edge(xor_compliance_review, loop_logistics_planning)
root.order.add_edge(xor_logistics_planning, loop_distributor_sync)
root.order.add_edge(xor_distributor_sync, loop_customer_feedback)
root.order.add_edge(xor_customer_feedback, loop_product_refinement)
root.order.add_edge(xor_product_refinement, loop_reputation_audit)
root.order.add_edge(xor_reputation_audit, loop_seasonal_review)