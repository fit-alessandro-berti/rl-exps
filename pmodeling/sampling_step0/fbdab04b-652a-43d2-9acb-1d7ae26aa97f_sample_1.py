from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

client_consult = Transition(label='Client Consult')
spec_analysis = Transition(label='Spec Analysis')
module_select = Transition(label='Module Select')
component_order = Transition(label='Component Order')
parts_inspect = Transition(label='Parts Inspect')
frame_assemble = Transition(label='Frame Assemble')
sensor_install = Transition(label='Sensor Install')
motor_attach = Transition(label='Motor Attach')
wiring_connect = Transition(label='Wiring Connect')
software_upload = Transition(label='Software Upload')
calibration_test = Transition(label='Calibration Test')
flight_simulate = Transition(label='Flight Simulate')
quality_review = Transition(label='Quality Review')
user_train = Transition(label='User Train')
remote_setup = Transition(label='Remote Setup')
feedback_collect = Transition(label='Feedback Collect')
support_schedule = Transition(label='Support Schedule')

loop_1 = OperatorPOWL(operator=Operator.LOOP, children=[module_select, component_order])
loop_2 = OperatorPOWL(operator=Operator.LOOP, children=[sensor_install, motor_attach])
loop_3 = OperatorPOWL(operator=Operator.LOOP, children=[wiring_connect, software_upload])
loop_4 = OperatorPOWL(operator=Operator.LOOP, children=[calibration_test, flight_simulate])
loop_5 = OperatorPOWL(operator=Operator.LOOP, children=[quality_review, user_train])
loop_6 = OperatorPOWL(operator=Operator.LOOP, children=[remote_setup, feedback_collect])
loop_7 = OperatorPOWL(operator=Operator.LOOP, children=[support_schedule, module_select])

xor_1 = OperatorPOWL(operator=Operator.XOR, children=[client_consult, spec_analysis])
xor_2 = OperatorPOWL(operator=Operator.XOR, children=[loop_1, loop_2])
xor_3 = OperatorPOWL(operator=Operator.XOR, children=[loop_3, loop_4])
xor_4 = OperatorPOWL(operator=Operator.XOR, children=[loop_5, loop_6])
xor_5 = OperatorPOWL(operator=Operator.XOR, children=[loop_7, module_select])

root = StrictPartialOrder(nodes=[xor_1, xor_2, xor_3, xor_4, xor_5])
root.order.add_edge(xor_1, xor_2)
root.order.add_edge(xor_2, xor_3)
root.order.add_edge(xor_3, xor_4)
root.order.add_edge(xor_4, xor_5)
root.order.add_edge(xor_5, xor_1)