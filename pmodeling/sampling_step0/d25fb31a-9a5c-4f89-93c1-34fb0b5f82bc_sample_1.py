import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label='Assess Structure')
B = Transition(label='Analyze Environment')
C = Transition(label='Design Modules')
D = Transition(label='Procure Materials')
E = Transition(label='Install Irrigation')
F = Transition(label='Set Sensors')
G = Transition(label='Select Seeds')
H = Transition(label='Schedule Planting')
I = Transition(label='Monitor Growth')
J = Transition(label='Collect Data')
K = Transition(label='Manage Pests')
L = Transition(label='Harvest Crops')
M = Transition(label='Coordinate Sales')
N = Transition(label='Compost Waste')
O = Transition(label='Review Feedback')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[A, B])
xor = OperatorPOWL(operator=Operator.XOR, children=[C, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[D, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[E, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[F, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[G, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[H, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[I, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[J, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[K, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[L, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[M, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[N, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[O, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[xor, xor2])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[xor3, xor4])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[xor5, xor6])
xor17 = OperatorPOWL(operator=Operator.XOR, children=[xor7, xor8])
xor18 = OperatorPOWL(operator=Operator.XOR, children=[xor9, xor10])
xor19 = OperatorPOWL(operator=Operator.XOR, children=[xor11, xor12])
xor20 = OperatorPOWL(operator=Operator.XOR, children=[xor13, xor14])
xor21 = OperatorPOWL(operator=Operator.XOR, children=[xor15, xor16])
xor22 = OperatorPOWL(operator=Operator.XOR, children=[xor17, xor18])
xor23 = OperatorPOWL(operator=Operator.XOR, children=[xor19, xor20])
xor24 = OperatorPOWL(operator=Operator.XOR, children=[xor21, xor22])
xor25 = OperatorPOWL(operator=Operator.XOR, children=[xor23, xor24])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15, xor16, xor17, xor18, xor19, xor20, xor21, xor22, xor23, xor24, xor25])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)
root.order.add_edge(xor5, xor6)
root.order.add_edge(xor6, xor7)
root.order.add_edge(xor7, xor8)
root.order.add_edge(xor8, xor9)
root.order.add_edge(xor9, xor10)
root.order.add_edge(xor10, xor11)
root.order.add_edge(xor11, xor12)
root.order.add_edge(xor12, xor13)
root.order.add_edge(xor13, xor14)
root.order.add_edge(xor14, xor15)
root.order.add_edge(xor15, xor16)
root.order.add_edge(xor16, xor17)
root.order.add_edge(xor17, xor18)
root.order.add_edge(xor18, xor19)
root.order.add_edge(xor19, xor20)
root.order.add_edge(xor20, xor21)
root.order.add_edge(xor21, xor22)
root.order.add_edge(xor22, xor23)
root.order.add_edge(xor23, xor24)
root.order.add_edge(xor24, xor25)