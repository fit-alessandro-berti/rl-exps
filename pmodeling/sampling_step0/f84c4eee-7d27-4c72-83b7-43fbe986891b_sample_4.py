import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions
sourcing = Transition(label='Component Sourcing')
assembly = Transition(label='Frame Assembly')
mounting = Transition(label='Sensor Mounting')
wiring = Transition(label='Wiring Harness')
testing = Transition(label='Circuit Testing')
firmware = Transition(label='Firmware Loading')
calibration = Transition(label='Initial Calibration')
integration = Transition(label='Software Integration')
flight = Transition(label='Flight Testing')
logging = Transition(label='Data Logging')
tuning = Transition(label='Performance Tuning')
packaging = Transition(label='Packaging Prep')
labeling = Transition(label='Custom Labeling')
documentation = Transition(label='Documentation Print')
review = Transition(label='Quality Review')
training = Transition(label='Client Training')
monitoring = Transition(label='Remote Monitoring')
update = Transition(label='Firmware Update')

# Define silent transitions
skip_sourcing = SilentTransition()
skip_assembly = SilentTransition()
skip_mounting = SilentTransition()
skip_wiring = SilentTransition()
skip_testing = SilentTransition()
skip_firmware = SilentTransition()
skip_calibration = SilentTransition()
skip_integration = SilentTransition()
skip_flight = SilentTransition()
skip_logging = SilentTransition()
skip_tuning = SilentTransition()
skip_packaging = SilentTransition()
skip_labeling = SilentTransition()
skip_documentation = SilentTransition()
skip_review = SilentTransition()
skip_training = SilentTransition()
skip_monitoring = SilentTransition()
skip_update = SilentTransition()

# Define loops
sourcing_loop = OperatorPOWL(operator=Operator.LOOP, children=[sourcing, skip_sourcing])
assembly_loop = OperatorPOWL(operator=Operator.LOOP, children=[assembly, skip_assembly])
mounting_loop = OperatorPOWL(operator=Operator.LOOP, children=[mounting, skip_mounting])
wiring_loop = OperatorPOWL(operator=Operator.LOOP, children=[wiring, skip_wiring])
testing_loop = OperatorPOWL(operator=Operator.LOOP, children=[testing, skip_testing])
firmware_loop = OperatorPOWL(operator=Operator.LOOP, children=[firmware, skip_firmware])
calibration_loop = OperatorPOWL(operator=Operator.LOOP, children=[calibration, skip_calibration])
integration_loop = OperatorPOWL(operator=Operator.LOOP, children=[integration, skip_integration])
flight_loop = OperatorPOWL(operator=Operator.LOOP, children=[flight, skip_flight])
logging_loop = OperatorPOWL(operator=Operator.LOOP, children=[logging, skip_logging])
tuning_loop = OperatorPOWL(operator=Operator.LOOP, children=[tuning, skip_tuning])
packaging_loop = OperatorPOWL(operator=Operator.LOOP, children=[packaging, skip_packaging])
labeling_loop = OperatorPOWL(operator=Operator.LOOP, children=[labeling, skip_labeling])
documentation_loop = OperatorPOWL(operator=Operator.LOOP, children=[documentation, skip_documentation])
review_loop = OperatorPOWL(operator=Operator.LOOP, children=[review, skip_review])
training_loop = OperatorPOWL(operator=Operator.LOOP, children=[training, skip_training])
monitoring_loop = OperatorPOWL(operator=Operator.LOOP, children=[monitoring, skip_monitoring])
update_loop = OperatorPOWL(operator=Operator.LOOP, children=[update, skip_update])

# Define choices
sourcing_choice = OperatorPOWL(operator=Operator.XOR, children=[sourcing, sourcing_loop])
assembly_choice = OperatorPOWL(operator=Operator.XOR, children=[assembly, assembly_loop])
mounting_choice = OperatorPOWL(operator=Operator.XOR, children=[mounting, mounting_loop])
wiring_choice = OperatorPOWL(operator=Operator.XOR, children=[wiring, wiring_loop])
testing_choice = OperatorPOWL(operator=Operator.XOR, children=[testing, testing_loop])
firmware_choice = OperatorPOWL(operator=Operator.XOR, children=[firmware, firmware_loop])
calibration_choice = OperatorPOWL(operator=Operator.XOR, children=[calibration, calibration_loop])
integration_choice = OperatorPOWL(operator=Operator.XOR, children=[integration, integration_loop])
flight_choice = OperatorPOWL(operator=Operator.XOR, children=[flight, flight_loop])
logging_choice = OperatorPOWL(operator=Operator.XOR, children=[logging, logging_loop])
tuning_choice = OperatorPOWL(operator=Operator.XOR, children=[tuning, tuning_loop])
packaging_choice = OperatorPOWL(operator=Operator.XOR, children=[packaging, packaging_loop])
labeling_choice = OperatorPOWL(operator=Operator.XOR, children=[labeling, labeling_loop])
documentation_choice = OperatorPOWL(operator=Operator.XOR, children=[documentation, documentation_loop])
review_choice = OperatorPOWL(operator=Operator.XOR, children=[review, review_loop])
training_choice = OperatorPOWL(operator=Operator.XOR, children=[training, training_loop])
monitoring_choice = OperatorPOWL(operator=Operator.XOR, children=[monitoring, monitoring_loop])
update_choice = OperatorPOWL(operator=Operator.XOR, children=[update, update_loop])

# Define partial order
root = StrictPartialOrder(nodes=[sourcing_choice, assembly_choice, mounting_choice, wiring_choice, testing_choice, firmware_choice, calibration_choice, integration_choice, flight_choice, logging_choice, tuning_choice, packaging_choice, labeling_choice, documentation_choice, review_choice, training_choice, monitoring_choice, update_choice])

# Define dependencies
root.order.add_edge(sourcing_choice, assembly_choice)
root.order.add_edge(assembly_choice, mounting_choice)
root.order.add_edge(mounting_choice, wiring_choice)
root.order.add_edge(wiring_choice, testing_choice)
root.order.add_edge(testing_choice, firmware_choice)
root.order.add_edge(firmware_choice, calibration_choice)
root.order.add_edge(calibration_choice, integration_choice)
root.order.add_edge(integration_choice, flight_choice)
root.order.add_edge(flight_choice, logging_choice)
root.order.add_edge(logging_choice, tuning_choice)
root.order.add_edge(tuning_choice, packaging_choice)
root.order.add_edge(packaging_choice, labeling_choice)
root.order.add_edge(labeling_choice, documentation_choice)
root.order.add_edge(documentation_choice, review_choice)
root.order.add_edge(review_choice, training_choice)
root.order.add_edge(training_choice, monitoring_choice)
root.order.add_edge(monitoring_choice, update_choice)

# Print the root
print(root)