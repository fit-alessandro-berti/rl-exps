import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
Quantum_Modeling = Transition(label='Quantum Modeling')
Data_Encoding = Transition(label='Data Encoding')
Route_Simulation = Transition(label='Route Simulation')
Demand_Forecast = Transition(label='Demand Forecast')
Supplier_Sync = Transition(label='Supplier Sync')
Entangle_Nodes = Transition(label='Entangle Nodes')
Risk_Analysis = Transition(label='Risk Analysis')
Inventory_Scan = Transition(label='Inventory Scan')
Latency_Check = Transition(label='Latency Check')
Transport_Plan = Transition(label='Transport Plan')
Quantum_Compute = Transition(label='Quantum Compute')
Scenario_Test = Transition(label='Scenario Test')
Resource_Align = Transition(label='Resource Align')
Protocol_Update = Transition(label='Protocol Update')
Feedback_Loop = Transition(label='Feedback Loop')
Cost_Optimize = Transition(label='Cost Optimize')
Impact_Review = Transition(label='Impact Review')
skip = SilentTransition()
loop = OperatorPOWL(operator=Operator.LOOP, children=[Quantum_Compute, Scenario_Test])
xor = OperatorPOWL(operator=Operator.XOR, children=[Risk_Analysis, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[Inventory_Scan, Latency_Check])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[Transport_Plan, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[Cost_Optimize, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[Impact_Review, skip])
root = StrictPartialOrder(nodes=[loop, xor, xor2, xor3, xor4, xor5])
root.order.add_edge(loop, xor)
root.order.add_edge(xor, xor2)
root.order.add_edge(xor2, xor3)
root.order.add_edge(xor3, xor4)
root.order.add_edge(xor4, xor5)