import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator
A = Transition(label='Site Survey')
B = Transition(label='Design Modules')
C = Transition(label='Source Materials')
D = Transition(label='Install Framework')
E = Transition(label='Setup Irrigation')
F = Transition(label='Integrate Sensors')
G = Transition(label='Configure AI')
H = Transition(label='Select Crops')
I = Transition(label='Calibrate Climate')
J = Transition(label='Plant Seeds')
K = Transition(label='Monitor Growth')
L = Transition(label='Manage Pests')
M = Transition(label='Recycle Waste')
N = Transition(label='Engage Community')
O = Transition(label='Ensure Compliance')
P = Transition(label='Distribute Produce')
skip = SilentTransition()
loop1 = OperatorPOWL(operator=Operator.LOOP, children=[A, B])
loop2 = OperatorPOWL(operator=Operator.LOOP, children=[C, D])
loop3 = OperatorPOWL(operator=Operator.LOOP, children=[E, F])
loop4 = OperatorPOWL(operator=Operator.LOOP, children=[G, H])
loop5 = OperatorPOWL(operator=Operator.LOOP, children=[I, J])
loop6 = OperatorPOWL(operator=Operator.LOOP, children=[K, L])
loop7 = OperatorPOWL(operator=Operator.LOOP, children=[M, N])
loop8 = OperatorPOWL(operator=Operator.LOOP, children=[O, P])
xor1 = OperatorPOWL(operator=Operator.XOR, children=[P, skip])
xor2 = OperatorPOWL(operator=Operator.XOR, children=[O, skip])
xor3 = OperatorPOWL(operator=Operator.XOR, children=[N, skip])
xor4 = OperatorPOWL(operator=Operator.XOR, children=[M, skip])
xor5 = OperatorPOWL(operator=Operator.XOR, children=[L, skip])
xor6 = OperatorPOWL(operator=Operator.XOR, children=[K, skip])
xor7 = OperatorPOWL(operator=Operator.XOR, children=[J, skip])
xor8 = OperatorPOWL(operator=Operator.XOR, children=[I, skip])
xor9 = OperatorPOWL(operator=Operator.XOR, children=[H, skip])
xor10 = OperatorPOWL(operator=Operator.XOR, children=[G, skip])
xor11 = OperatorPOWL(operator=Operator.XOR, children=[F, skip])
xor12 = OperatorPOWL(operator=Operator.XOR, children=[E, skip])
xor13 = OperatorPOWL(operator=Operator.XOR, children=[D, skip])
xor14 = OperatorPOWL(operator=Operator.XOR, children=[C, skip])
xor15 = OperatorPOWL(operator=Operator.XOR, children=[B, skip])
xor16 = OperatorPOWL(operator=Operator.XOR, children=[A, skip])
root = StrictPartialOrder(nodes=[loop1, loop2, loop3, loop4, loop5, loop6, loop7, loop8, xor1, xor2, xor3, xor4, xor5, xor6, xor7, xor8, xor9, xor10, xor11, xor12, xor13, xor14, xor15, xor16])
root.order.add_edge(loop1, loop2)
root.order.add_edge(loop2, loop3)
root.order.add_edge(loop3, loop4)
root.order.add_edge(loop4, loop5)
root.order.add_edge(loop5, loop6)
root.order.add_edge(loop6, loop7)
root.order.add_edge(loop7, loop8)
root.order.add_edge(loop8, xor1)
root.order.add_edge(loop8, xor2)
root.order.add_edge(loop8, xor3)
root.order.add_edge(loop8, xor4)
root.order.add_edge(loop8, xor5)
root.order.add_edge(loop8, xor6)
root.order.add_edge(loop8, xor7)
root.order.add_edge(loop8, xor8)
root.order.add_edge(loop8, xor9)
root.order.add_edge(loop8, xor10)
root.order.add_edge(loop8, xor11)
root.order.add_edge(loop8, xor12)
root.order.add_edge(loop8, xor13)
root.order.add_edge(loop8, xor14)
root.order.add_edge(loop8, xor15)
root.order.add_edge(loop8, xor16)