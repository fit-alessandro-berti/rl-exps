from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define the POWL model
SiteSurvey = Transition(label='Site Survey')
FleetDesign = Transition(label='Fleet Design')
PermitRequest = Transition(label='Permit Request')
RegulationReview = Transition(label='Regulation Review')
StakeholderMeet = Transition(label='Stakeholder Meet')
RouteMapping = Transition(label='Route Mapping')
TrafficSync = Transition(label='Traffic Sync')
DroneAssembly = Transition(label='Drone Assembly')
SoftwareSetup = Transition(label='Software Setup')
TestFlight = Transition(label='Test Flight')
DataIntegration = Transition(label='Data Integration')
ComplianceAudit = Transition(label='Compliance Audit')
EmergencyPlan = Transition(label='Emergency Plan')
LaunchPrep = Transition(label='Launch Prep')
FeedbackLoop = Transition(label='Feedback Loop')
PerformanceTune = Transition(label='Performance Tune')
ScaleStrategy = Transition(label='Scale Strategy')

# Define the POWL model structure
root = StrictPartialOrder(nodes=[SiteSurvey, FleetDesign, PermitRequest, RegulationReview, StakeholderMeet, RouteMapping, TrafficSync, DroneAssembly, SoftwareSetup, TestFlight, DataIntegration, ComplianceAudit, EmergencyPlan, LaunchPrep, FeedbackLoop, PerformanceTune, ScaleStrategy])
root.order.add_edge(SiteSurvey, FleetDesign)
root.order.add_edge(FleetDesign, PermitRequest)
root.order.add_edge(PermitRequest, RegulationReview)
root.order.add_edge(RegulationReview, StakeholderMeet)
root.order.add_edge(StakeholderMeet, RouteMapping)
root.order.add_edge(RouteMapping, TrafficSync)
root.order.add_edge(TrafficSync, DroneAssembly)
root.order.add_edge(DroneAssembly, SoftwareSetup)
root.order.add_edge(SoftwareSetup, TestFlight)
root.order.add_edge(TestFlight, DataIntegration)
root.order.add_edge(DataIntegration, ComplianceAudit)
root.order.add_edge(ComplianceAudit, EmergencyPlan)
root.order.add_edge(EmergencyPlan, LaunchPrep)
root.order.add_edge(LaunchPrep, FeedbackLoop)
root.order.add_edge(FeedbackLoop, PerformanceTune)
root.order.add_edge(PerformanceTune, ScaleStrategy)