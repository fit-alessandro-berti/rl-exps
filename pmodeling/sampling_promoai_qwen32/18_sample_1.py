import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions for each activity
submit_application = Transition(label='Submit application online')
review_application = Transition(label='Review application and documents')
notify_missing_documents = Transition(label='Notify applicant of missing documents')
process_fees_or_waivers = Transition(label='Process fees or waivers')
evaluate_application = Transition(label='Evaluate application by admissions committee')
send_acceptance_letter = Transition(label='Send acceptance letter')
send_rejection_letter = Transition(label='Send rejection letter')
confirm_enrollment = Transition(label='Confirm enrollment')
cancel_application = Transition(label='Cancel application')
send_orientation_materials = Transition(label='Send orientation materials')
set_up_it_accounts = Transition(label='Set up IT accounts')
assist_with_visa_processing = Transition(label='Assist with visa processing')
obtain_student_id_card = Transition(label='Obtain student ID card')
meet_with_academic_advisor = Transition(label='Meet with academic advisor')
select_courses = Transition(label='Select courses')
resolve_schedule_conflicts = Transition(label='Resolve schedule conflicts')
begin_attending_classes = Transition(label='Begin attending classes')
add_drop_courses = Transition(label='Add/drop courses')
post_grades = Transition(label='Post grades')
review_grades = Transition(label='Review grades online')
submit_appeal_form = Transition(label='Submit appeal form')
meet_with_appeals_committee = Transition(label='Meet with appeals committee')
await_decision = Transition(label='Await decision')
graduate = Transition(label='Graduate')
withdraw = Transition(label='Withdraw')

# Define control flow operators
loop = OperatorPOWL(operator=Operator.LOOP, children=[submit_application])
xor_documents = OperatorPOWL(operator=Operator.XOR, children=[notify_missing_documents, process_fees_or_waivers])
xor_application_outcome = OperatorPOWL(operator=Operator.XOR, children=[send_acceptance_letter, send_rejection_letter])
xor_enrollment = OperatorPOWL(operator=Operator.XOR, children=[confirm_enrollment, cancel_application])
loop_semester = OperatorPOWL(operator=Operator.LOOP, children=[begin_attending_classes])
xor_grievances = OperatorPOWL(operator=Operator.XOR, children=[submit_appeal_form, withdraw])
xor_appeal_outcome = OperatorPOWL(operator=Operator.XOR, children=[await_decision, graduate])

# Define the root POWL model
root = StrictPartialOrder(nodes=[loop, review_application, xor_documents, evaluate_application, xor_application_outcome, xor_enrollment, send_orientation_materials, set_up_it_accounts, assist_with_visa_processing, obtain_student_id_card, meet_with_academic_advisor, select_courses, resolve_schedule_conflicts, loop_semester, add_drop_courses, post_grades, review_grades, xor_grievances, meet_with_appeals_committee, xor_appeal_outcome])

# Define the partial order
root.order.add_edge(loop, review_application)
root.order.add_edge(review_application, xor_documents)
root.order.add_edge(notify_missing_documents, review_application)
root.order.add_edge(process_fees_or_waivers, evaluate_application)
root.order.add_edge(evaluate_application, xor_application_outcome)
root.order.add_edge(send_acceptance_letter, xor_enrollment)
root.order.add_edge(confirm_enrollment, send_orientation_materials)
root.order.add_edge(send_orientation_materials, set_up_it_accounts)
root.order.add_edge(set_up_it_accounts, assist_with_visa_processing)
root.order.add_edge(assist_with_visa_processing, obtain_student_id_card)
root.order.add_edge(obtain_student_id_card, meet_with_academic_advisor)
root.order.add_edge(meet_with_academic_advisor, select_courses)
root.order.add_edge(select_courses, resolve_schedule_conflicts)
root.order.add_edge(resolve_schedule_conflicts, loop_semester)
root.order.add_edge(begin_attending_classes, add_drop_courses)
root.order.add_edge(add_drop_courses, post_grades)
root.order.add_edge(post_grades, review_grades)
root.order.add_edge(review_grades, xor_grievances)
root.order.add_edge(submit_appeal_form, meet_with_appeals_committee)
root.order.add_edge(meet_with_appeals_committee, xor_appeal_outcome)