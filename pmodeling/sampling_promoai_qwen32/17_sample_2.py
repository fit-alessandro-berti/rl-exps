import pm4py
from pm4py.objects.powl.obj import StrictPartialOrder, OperatorPOWL, Transition, SilentTransition
from pm4py.objects.process_tree.obj import Operator

# Define transitions
place_order = Transition(label='Place order')
record_order_details = Transition(label='Record order details')
process_payment = Transition(label='Process payment')
notify_failed_payment = Transition(label='Notify about failed payment')
check_stock = Transition(label='Check stock availability')
initiate_back_order = Transition(label='Initiate back-order')
inform_delay = Transition(label='Inform customer about delay')
receive_back_order = Transition(label='Receive back-order')
pick_items = Transition(label='Pick items from warehouse')
perform_qc = Transition(label='Perform quality control checks')
package_items = Transition(label='Package items')
gift_wrap = Transition(label='Gift wrap items')
prepare_shipping = Transition(label='Prepare shipping documents and labels')
prepare_customs = Transition(label='Prepare documentation for international orders')
dispatch_order = Transition(label='Dispatch order')
send_confirmation = Transition(label='Send shipping confirmation to customer')
update_inventory = Transition(label='Update inventory levels')
send_follow_up = Transition(label='Send follow-up email')
customer_reports_issue = Transition(label='Customer reports issue')
send_return_label = Transition(label='Send return shipping label')
receive_returned_items = Transition(label='Receive returned items')
inspect_returned_items = Transition(label='Inspect returned items')
process_refund = Transition(label='Process refund')
process_replacement = Transition(label='Process replacement')
confirm_delivery = Transition(label='Confirm delivery')

# Define control-flow structures
payment_loop = OperatorPOWL(operator=Operator.LOOP, children=[process_payment, notify_failed_payment])
stock_loop = OperatorPOWL(operator=Operator.LOOP, children=[check_stock, initiate_back_order, inform_delay, receive_back_order])
packaging_choice = OperatorPOWL(operator=Operator.XOR, children=[gift_wrap, SilentTransition()])
returns_choice = OperatorPOWL(operator=Operator.XOR, children=[process_refund, process_replacement])
returns_loop = OperatorPOWL(operator=Operator.LOOP, children=[receive_returned_items, inspect_returned_items, returns_choice])

# Define partial order
root = StrictPartialOrder(nodes=[place_order, record_order_details, payment_loop, stock_loop, pick_items, perform_qc, package_items, packaging_choice, prepare_shipping, prepare_customs, dispatch_order, send_confirmation, update_inventory, send_follow_up, customer_reports_issue, send_return_label, returns_loop, confirm_delivery])
root.order.add_edge(place_order, record_order_details)
root.order.add_edge(record_order_details, payment_loop)
root.order.add_edge(payment_loop, stock_loop)
root.order.add_edge(stock_loop, pick_items)
root.order.add_edge(pick_items, perform_qc)
root.order.add_edge(perform_qc, package_items)
root.order.add_edge(package_items, packaging_choice)
root.order.add_edge(packaging_choice, prepare_shipping)
root.order.add_edge(prepare_shipping, prepare_customs)
root.order.add_edge(prepare_customs, dispatch_order)
root.order.add_edge(dispatch_order, send_confirmation)
root.order.add_edge(send_confirmation, update_inventory)
root.order.add_edge(update_inventory, send_follow_up)
root.order.add_edge(send_follow_up, customer_reports_issue)
root.order.add_edge(customer_reports_issue, send_return_label)
root.order.add_edge(send_return_label, returns_loop)
root.order.add_edge(returns_loop, confirm_delivery)